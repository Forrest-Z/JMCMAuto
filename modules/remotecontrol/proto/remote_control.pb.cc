// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/remotecontrol/proto/remote_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/remotecontrol/proto/remote_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace remote {
class RemoteControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoteControl> {
} _RemoteControl_default_instance_;

namespace protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, mode_apply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, gear_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, steerwheel_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, steerwheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, pedal_brake_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControl, pedal_throttle_percent_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(RemoteControl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoteControl_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/remotecontrol/proto/remote_control.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _RemoteControl_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  _RemoteControl_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n0modules/remotecontrol/proto/remote_con"
      "trol.proto\022\017jmc_auto.remote\032\"modules/can"
      "bus/proto/chassis.proto\"\233\002\n\rRemoteContro"
      "l\022\026\n\016emergency_stop\030\001 \001(\010\0228\n\nmode_apply\030"
      "\002 \001(\0162$.jmc_auto.canbus.Chassis.DrivingM"
      "ode\022\r\n\005stamp\030\003 \001(\001\0228\n\tgear_data\030\004 \001(\0162%."
      "jmc_auto.canbus.Chassis.GearPosition\022\030\n\020"
      "steerwheel_angle\030\005 \001(\002\022\030\n\020steerwheel_spe"
      "ed\030\006 \001(\002\022\033\n\023pedal_brake_percent\030\007 \001(\002\022\036\n"
      "\026pedal_throttle_percent\030\010 \001(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/remotecontrol/proto/remote_control.proto", &protobuf_RegisterTypes);
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControl::kEmergencyStopFieldNumber;
const int RemoteControl::kModeApplyFieldNumber;
const int RemoteControl::kStampFieldNumber;
const int RemoteControl::kGearDataFieldNumber;
const int RemoteControl::kSteerwheelAngleFieldNumber;
const int RemoteControl::kSteerwheelSpeedFieldNumber;
const int RemoteControl::kPedalBrakePercentFieldNumber;
const int RemoteControl::kPedalThrottlePercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControl::RemoteControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.remote.RemoteControl)
}
RemoteControl::RemoteControl(const RemoteControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_stop_, &from.emergency_stop_,
    reinterpret_cast<char*>(&pedal_throttle_percent_) -
    reinterpret_cast<char*>(&emergency_stop_) + sizeof(pedal_throttle_percent_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.remote.RemoteControl)
}

void RemoteControl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&emergency_stop_, 0, reinterpret_cast<char*>(&pedal_throttle_percent_) -
    reinterpret_cast<char*>(&emergency_stop_) + sizeof(pedal_throttle_percent_));
}

RemoteControl::~RemoteControl() {
  // @@protoc_insertion_point(destructor:jmc_auto.remote.RemoteControl)
  SharedDtor();
}

void RemoteControl::SharedDtor() {
}

void RemoteControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControl::descriptor() {
  protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControl& RemoteControl::default_instance() {
  protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoteControl* RemoteControl::New(::google::protobuf::Arena* arena) const {
  RemoteControl* n = new RemoteControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.remote.RemoteControl)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&emergency_stop_, 0, reinterpret_cast<char*>(&pedal_throttle_percent_) -
      reinterpret_cast<char*>(&emergency_stop_) + sizeof(pedal_throttle_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.remote.RemoteControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool emergency_stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_emergency_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_mode_apply(static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_data(static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steerwheel_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_steerwheel_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerwheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steerwheel_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_steerwheel_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerwheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pedal_brake_percent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_pedal_brake_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pedal_brake_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pedal_throttle_percent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_pedal_throttle_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pedal_throttle_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.remote.RemoteControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.remote.RemoteControl)
  return false;
#undef DO_
}

void RemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.remote.RemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool emergency_stop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->emergency_stop(), output);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode_apply(), output);
  }

  // optional double stamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stamp(), output);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_data(), output);
  }

  // optional float steerwheel_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->steerwheel_angle(), output);
  }

  // optional float steerwheel_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->steerwheel_speed(), output);
  }

  // optional float pedal_brake_percent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pedal_brake_percent(), output);
  }

  // optional float pedal_throttle_percent = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pedal_throttle_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.remote.RemoteControl)
}

::google::protobuf::uint8* RemoteControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.remote.RemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool emergency_stop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->emergency_stop(), target);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode_apply(), target);
  }

  // optional double stamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stamp(), target);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_data(), target);
  }

  // optional float steerwheel_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->steerwheel_angle(), target);
  }

  // optional float steerwheel_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->steerwheel_speed(), target);
  }

  // optional float pedal_brake_percent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pedal_brake_percent(), target);
  }

  // optional float pedal_throttle_percent = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pedal_throttle_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.remote.RemoteControl)
  return target;
}

size_t RemoteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.remote.RemoteControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool emergency_stop = 1;
    if (has_emergency_stop()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
    if (has_mode_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_apply());
    }

    // optional double stamp = 3;
    if (has_stamp()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
    if (has_gear_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_data());
    }

    // optional float steerwheel_angle = 5;
    if (has_steerwheel_angle()) {
      total_size += 1 + 4;
    }

    // optional float steerwheel_speed = 6;
    if (has_steerwheel_speed()) {
      total_size += 1 + 4;
    }

    // optional float pedal_brake_percent = 7;
    if (has_pedal_brake_percent()) {
      total_size += 1 + 4;
    }

    // optional float pedal_throttle_percent = 8;
    if (has_pedal_throttle_percent()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.remote.RemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.remote.RemoteControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.remote.RemoteControl)
    MergeFrom(*source);
  }
}

void RemoteControl::MergeFrom(const RemoteControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.remote.RemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      emergency_stop_ = from.emergency_stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_apply_ = from.mode_apply_;
    }
    if (cached_has_bits & 0x00000004u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_data_ = from.gear_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      steerwheel_angle_ = from.steerwheel_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      steerwheel_speed_ = from.steerwheel_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      pedal_brake_percent_ = from.pedal_brake_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      pedal_throttle_percent_ = from.pedal_throttle_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.remote.RemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControl::CopyFrom(const RemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.remote.RemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControl::IsInitialized() const {
  return true;
}

void RemoteControl::Swap(RemoteControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControl::InternalSwap(RemoteControl* other) {
  std::swap(emergency_stop_, other->emergency_stop_);
  std::swap(mode_apply_, other->mode_apply_);
  std::swap(stamp_, other->stamp_);
  std::swap(gear_data_, other->gear_data_);
  std::swap(steerwheel_angle_, other->steerwheel_angle_);
  std::swap(steerwheel_speed_, other->steerwheel_speed_);
  std::swap(pedal_brake_percent_, other->pedal_brake_percent_);
  std::swap(pedal_throttle_percent_, other->pedal_throttle_percent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteControl::GetMetadata() const {
  protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteControl

// optional bool emergency_stop = 1;
bool RemoteControl::has_emergency_stop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteControl::set_has_emergency_stop() {
  _has_bits_[0] |= 0x00000001u;
}
void RemoteControl::clear_has_emergency_stop() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemoteControl::clear_emergency_stop() {
  emergency_stop_ = false;
  clear_has_emergency_stop();
}
bool RemoteControl::emergency_stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.emergency_stop)
  return emergency_stop_;
}
void RemoteControl::set_emergency_stop(bool value) {
  set_has_emergency_stop();
  emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.emergency_stop)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
bool RemoteControl::has_mode_apply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteControl::set_has_mode_apply() {
  _has_bits_[0] |= 0x00000002u;
}
void RemoteControl::clear_has_mode_apply() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemoteControl::clear_mode_apply() {
  mode_apply_ = 0;
  clear_has_mode_apply();
}
::jmc_auto::canbus::Chassis_DrivingMode RemoteControl::mode_apply() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.mode_apply)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(mode_apply_);
}
void RemoteControl::set_mode_apply(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_mode_apply();
  mode_apply_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.mode_apply)
}

// optional double stamp = 3;
bool RemoteControl::has_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteControl::set_has_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
void RemoteControl::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemoteControl::clear_stamp() {
  stamp_ = 0;
  clear_has_stamp();
}
double RemoteControl::stamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.stamp)
  return stamp_;
}
void RemoteControl::set_stamp(double value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.stamp)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
bool RemoteControl::has_gear_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteControl::set_has_gear_data() {
  _has_bits_[0] |= 0x00000008u;
}
void RemoteControl::clear_has_gear_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemoteControl::clear_gear_data() {
  gear_data_ = 0;
  clear_has_gear_data();
}
::jmc_auto::canbus::Chassis_GearPosition RemoteControl::gear_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.gear_data)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_data_);
}
void RemoteControl::set_gear_data(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_data();
  gear_data_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.gear_data)
}

// optional float steerwheel_angle = 5;
bool RemoteControl::has_steerwheel_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RemoteControl::set_has_steerwheel_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void RemoteControl::clear_has_steerwheel_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void RemoteControl::clear_steerwheel_angle() {
  steerwheel_angle_ = 0;
  clear_has_steerwheel_angle();
}
float RemoteControl::steerwheel_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.steerwheel_angle)
  return steerwheel_angle_;
}
void RemoteControl::set_steerwheel_angle(float value) {
  set_has_steerwheel_angle();
  steerwheel_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.steerwheel_angle)
}

// optional float steerwheel_speed = 6;
bool RemoteControl::has_steerwheel_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RemoteControl::set_has_steerwheel_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void RemoteControl::clear_has_steerwheel_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void RemoteControl::clear_steerwheel_speed() {
  steerwheel_speed_ = 0;
  clear_has_steerwheel_speed();
}
float RemoteControl::steerwheel_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.steerwheel_speed)
  return steerwheel_speed_;
}
void RemoteControl::set_steerwheel_speed(float value) {
  set_has_steerwheel_speed();
  steerwheel_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.steerwheel_speed)
}

// optional float pedal_brake_percent = 7;
bool RemoteControl::has_pedal_brake_percent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RemoteControl::set_has_pedal_brake_percent() {
  _has_bits_[0] |= 0x00000040u;
}
void RemoteControl::clear_has_pedal_brake_percent() {
  _has_bits_[0] &= ~0x00000040u;
}
void RemoteControl::clear_pedal_brake_percent() {
  pedal_brake_percent_ = 0;
  clear_has_pedal_brake_percent();
}
float RemoteControl::pedal_brake_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.pedal_brake_percent)
  return pedal_brake_percent_;
}
void RemoteControl::set_pedal_brake_percent(float value) {
  set_has_pedal_brake_percent();
  pedal_brake_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.pedal_brake_percent)
}

// optional float pedal_throttle_percent = 8;
bool RemoteControl::has_pedal_throttle_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RemoteControl::set_has_pedal_throttle_percent() {
  _has_bits_[0] |= 0x00000080u;
}
void RemoteControl::clear_has_pedal_throttle_percent() {
  _has_bits_[0] &= ~0x00000080u;
}
void RemoteControl::clear_pedal_throttle_percent() {
  pedal_throttle_percent_ = 0;
  clear_has_pedal_throttle_percent();
}
float RemoteControl::pedal_throttle_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.pedal_throttle_percent)
  return pedal_throttle_percent_;
}
void RemoteControl::set_pedal_throttle_percent(float value) {
  set_has_pedal_throttle_percent();
  pedal_throttle_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.pedal_throttle_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace remote
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
