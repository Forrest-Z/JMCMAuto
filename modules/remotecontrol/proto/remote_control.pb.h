// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/remotecontrol/proto/remote_control.proto

#ifndef PROTOBUF_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Sonar;
class SonarDefaultTypeInternal;
extern SonarDefaultTypeInternal _Sonar_default_instance_;
class Surround;
class SurroundDefaultTypeInternal;
extern SurroundDefaultTypeInternal _Surround_default_instance_;
class WheelSpeed;
class WheelSpeedDefaultTypeInternal;
extern WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
}  // namespace canbus
namespace remote {
class RemoteControl;
class RemoteControlDefaultTypeInternal;
extern RemoteControlDefaultTypeInternal _RemoteControl_default_instance_;
}  // namespace remote
}  // namespace jmc_auto

namespace jmc_auto {
namespace remote {

namespace protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto

// ===================================================================

class RemoteControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.remote.RemoteControl) */ {
 public:
  RemoteControl();
  virtual ~RemoteControl();

  RemoteControl(const RemoteControl& from);

  inline RemoteControl& operator=(const RemoteControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControl& default_instance();

  static inline const RemoteControl* internal_default_instance() {
    return reinterpret_cast<const RemoteControl*>(
               &_RemoteControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RemoteControl* other);

  // implements Message ----------------------------------------------

  inline RemoteControl* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoteControl& from);
  void MergeFrom(const RemoteControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool emergency_stop = 1;
  bool has_emergency_stop() const;
  void clear_emergency_stop();
  static const int kEmergencyStopFieldNumber = 1;
  bool emergency_stop() const;
  void set_emergency_stop(bool value);

  // optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
  bool has_mode_apply() const;
  void clear_mode_apply();
  static const int kModeApplyFieldNumber = 2;
  ::jmc_auto::canbus::Chassis_DrivingMode mode_apply() const;
  void set_mode_apply(::jmc_auto::canbus::Chassis_DrivingMode value);

  // optional double stamp = 3;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 3;
  double stamp() const;
  void set_stamp(double value);

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
  bool has_gear_data() const;
  void clear_gear_data();
  static const int kGearDataFieldNumber = 4;
  ::jmc_auto::canbus::Chassis_GearPosition gear_data() const;
  void set_gear_data(::jmc_auto::canbus::Chassis_GearPosition value);

  // optional float steerwheel_angle = 5;
  bool has_steerwheel_angle() const;
  void clear_steerwheel_angle();
  static const int kSteerwheelAngleFieldNumber = 5;
  float steerwheel_angle() const;
  void set_steerwheel_angle(float value);

  // optional float steerwheel_speed = 6;
  bool has_steerwheel_speed() const;
  void clear_steerwheel_speed();
  static const int kSteerwheelSpeedFieldNumber = 6;
  float steerwheel_speed() const;
  void set_steerwheel_speed(float value);

  // optional float pedal_brake_percent = 7;
  bool has_pedal_brake_percent() const;
  void clear_pedal_brake_percent();
  static const int kPedalBrakePercentFieldNumber = 7;
  float pedal_brake_percent() const;
  void set_pedal_brake_percent(float value);

  // optional float pedal_throttle_percent = 8;
  bool has_pedal_throttle_percent() const;
  void clear_pedal_throttle_percent();
  static const int kPedalThrottlePercentFieldNumber = 8;
  float pedal_throttle_percent() const;
  void set_pedal_throttle_percent(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.remote.RemoteControl)
 private:
  void set_has_emergency_stop();
  void clear_has_emergency_stop();
  void set_has_mode_apply();
  void clear_has_mode_apply();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_gear_data();
  void clear_has_gear_data();
  void set_has_steerwheel_angle();
  void clear_has_steerwheel_angle();
  void set_has_steerwheel_speed();
  void clear_has_steerwheel_speed();
  void set_has_pedal_brake_percent();
  void clear_has_pedal_brake_percent();
  void set_has_pedal_throttle_percent();
  void clear_has_pedal_throttle_percent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool emergency_stop_;
  int mode_apply_;
  double stamp_;
  int gear_data_;
  float steerwheel_angle_;
  float steerwheel_speed_;
  float pedal_brake_percent_;
  float pedal_throttle_percent_;
  friend struct protobuf_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteControl

// optional bool emergency_stop = 1;
inline bool RemoteControl::has_emergency_stop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControl::set_has_emergency_stop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControl::clear_has_emergency_stop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteControl::clear_emergency_stop() {
  emergency_stop_ = false;
  clear_has_emergency_stop();
}
inline bool RemoteControl::emergency_stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.emergency_stop)
  return emergency_stop_;
}
inline void RemoteControl::set_emergency_stop(bool value) {
  set_has_emergency_stop();
  emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.emergency_stop)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode mode_apply = 2;
inline bool RemoteControl::has_mode_apply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControl::set_has_mode_apply() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControl::clear_has_mode_apply() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControl::clear_mode_apply() {
  mode_apply_ = 0;
  clear_has_mode_apply();
}
inline ::jmc_auto::canbus::Chassis_DrivingMode RemoteControl::mode_apply() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.mode_apply)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(mode_apply_);
}
inline void RemoteControl::set_mode_apply(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_mode_apply();
  mode_apply_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.mode_apply)
}

// optional double stamp = 3;
inline bool RemoteControl::has_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteControl::set_has_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteControl::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteControl::clear_stamp() {
  stamp_ = 0;
  clear_has_stamp();
}
inline double RemoteControl::stamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.stamp)
  return stamp_;
}
inline void RemoteControl::set_stamp(double value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.stamp)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_data = 4;
inline bool RemoteControl::has_gear_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteControl::set_has_gear_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoteControl::clear_has_gear_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoteControl::clear_gear_data() {
  gear_data_ = 0;
  clear_has_gear_data();
}
inline ::jmc_auto::canbus::Chassis_GearPosition RemoteControl::gear_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.gear_data)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_data_);
}
inline void RemoteControl::set_gear_data(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_data();
  gear_data_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.gear_data)
}

// optional float steerwheel_angle = 5;
inline bool RemoteControl::has_steerwheel_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoteControl::set_has_steerwheel_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RemoteControl::clear_has_steerwheel_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RemoteControl::clear_steerwheel_angle() {
  steerwheel_angle_ = 0;
  clear_has_steerwheel_angle();
}
inline float RemoteControl::steerwheel_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.steerwheel_angle)
  return steerwheel_angle_;
}
inline void RemoteControl::set_steerwheel_angle(float value) {
  set_has_steerwheel_angle();
  steerwheel_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.steerwheel_angle)
}

// optional float steerwheel_speed = 6;
inline bool RemoteControl::has_steerwheel_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RemoteControl::set_has_steerwheel_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RemoteControl::clear_has_steerwheel_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RemoteControl::clear_steerwheel_speed() {
  steerwheel_speed_ = 0;
  clear_has_steerwheel_speed();
}
inline float RemoteControl::steerwheel_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.steerwheel_speed)
  return steerwheel_speed_;
}
inline void RemoteControl::set_steerwheel_speed(float value) {
  set_has_steerwheel_speed();
  steerwheel_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.steerwheel_speed)
}

// optional float pedal_brake_percent = 7;
inline bool RemoteControl::has_pedal_brake_percent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RemoteControl::set_has_pedal_brake_percent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RemoteControl::clear_has_pedal_brake_percent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RemoteControl::clear_pedal_brake_percent() {
  pedal_brake_percent_ = 0;
  clear_has_pedal_brake_percent();
}
inline float RemoteControl::pedal_brake_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.pedal_brake_percent)
  return pedal_brake_percent_;
}
inline void RemoteControl::set_pedal_brake_percent(float value) {
  set_has_pedal_brake_percent();
  pedal_brake_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.pedal_brake_percent)
}

// optional float pedal_throttle_percent = 8;
inline bool RemoteControl::has_pedal_throttle_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RemoteControl::set_has_pedal_throttle_percent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RemoteControl::clear_has_pedal_throttle_percent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RemoteControl::clear_pedal_throttle_percent() {
  pedal_throttle_percent_ = 0;
  clear_has_pedal_throttle_percent();
}
inline float RemoteControl::pedal_throttle_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.remote.RemoteControl.pedal_throttle_percent)
  return pedal_throttle_percent_;
}
inline void RemoteControl::set_pedal_throttle_percent(float value) {
  set_has_pedal_throttle_percent();
  pedal_throttle_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.remote.RemoteControl.pedal_throttle_percent)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace remote
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fremotecontrol_2fproto_2fremote_5fcontrol_2eproto__INCLUDED
