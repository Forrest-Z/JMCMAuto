// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/configs/proto/vehicle_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/common/configs/proto/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace common {
class TransformDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transform> {
} _Transform_default_instance_;
class ExtrinsicsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Extrinsics> {
} _Extrinsics_default_instance_;
class VehicleParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleParam> {
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleConfig> {
} _VehicleConfig_default_instance_;

namespace protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, source_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, target_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, rotation_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, tansforms_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, brand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, front_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, back_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, left_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, right_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_turn_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, steer_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_rolling_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_abs_speed_when_stopped_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, vehicle_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, extrinsics_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(Transform)},
  { 13, 19, sizeof(Extrinsics)},
  { 20, 43, sizeof(VehicleParam)},
  { 61, 69, sizeof(VehicleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Extrinsics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/common/configs/proto/vehicle_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Transform_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Extrinsics_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VehicleParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VehicleConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _Transform_default_instance_.DefaultConstruct();
  _Extrinsics_default_instance_.DefaultConstruct();
  _VehicleParam_default_instance_.DefaultConstruct();
  _VehicleConfig_default_instance_.DefaultConstruct();
  _Transform_default_instance_.get_mutable()->translation_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Transform_default_instance_.get_mutable()->rotation_ = const_cast< ::jmc_auto::common::Quaternion*>(
      ::jmc_auto::common::Quaternion::internal_default_instance());
  _VehicleConfig_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _VehicleConfig_default_instance_.get_mutable()->vehicle_param_ = const_cast< ::jmc_auto::common::VehicleParam*>(
      ::jmc_auto::common::VehicleParam::internal_default_instance());
  _VehicleConfig_default_instance_.get_mutable()->extrinsics_ = const_cast< ::jmc_auto::common::Extrinsics*>(
      ::jmc_auto::common::Extrinsics::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1modules/common/configs/proto/vehicle_c"
      "onfig.proto\022\017jmc_auto.common\032!modules/co"
      "mmon/proto/header.proto\032#modules/common/"
      "proto/geometry.proto\"\225\001\n\tTransform\022\024\n\014so"
      "urce_frame\030\001 \001(\014\022\024\n\014target_frame\030\002 \001(\014\022-"
      "\n\013translation\030\003 \001(\0132\030.jmc_auto.common.Po"
      "int3D\022-\n\010rotation\030\004 \001(\0132\033.jmc_auto.commo"
      "n.Quaternion\";\n\nExtrinsics\022-\n\ttansforms\030"
      "\001 \003(\0132\032.jmc_auto.common.Transform\"\271\004\n\014Ve"
      "hicleParam\0229\n\005brand\030\001 \001(\0162*.jmc_auto.com"
      "mon.VehicleParam.VehicleBrand\022\034\n\024front_e"
      "dge_to_center\030\002 \001(\001\022\033\n\023back_edge_to_cent"
      "er\030\003 \001(\001\022\033\n\023left_edge_to_center\030\004 \001(\001\022\034\n"
      "\024right_edge_to_center\030\005 \001(\001\022\016\n\006length\030\006 "
      "\001(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\027\n\017mi"
      "n_turn_radius\030\t \001(\001\022\030\n\020max_acceleration\030"
      "\n \001(\001\022\030\n\020max_deceleration\030\013 \001(\001\022\027\n\017max_s"
      "teer_angle\030\014 \001(\001\022\034\n\024max_steer_angle_rate"
      "\030\r \001(\001\022\034\n\024min_steer_angle_rate\030\016 \001(\001\022\023\n\013"
      "steer_ratio\030\017 \001(\001\022\022\n\nwheel_base\030\020 \001(\001\022\034\n"
      "\024wheel_rolling_radius\030\021 \001(\001\022\"\n\032max_abs_s"
      "peed_when_stopped\030\022 \001(\002\"<\n\014VehicleBrand\022"
      "\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM\020\001\022\006\n\002CH\020\002\022\n\n\006TES"
      "HUN\020\003\"\237\001\n\rVehicleConfig\022\'\n\006header\030\001 \001(\0132"
      "\027.jmc_auto.common.Header\0224\n\rvehicle_para"
      "m\030\002 \001(\0132\035.jmc_auto.common.VehicleParam\022/"
      "\n\nextrinsics\030\003 \001(\0132\033.jmc_auto.common.Ext"
      "rinsics"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1087);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/common/configs/proto/vehicle_config.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* VehicleParam_VehicleBrand_descriptor() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool VehicleParam_VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleParam_VehicleBrand VehicleParam::LINCOLN_MKZ;
const VehicleParam_VehicleBrand VehicleParam::GEM;
const VehicleParam_VehicleBrand VehicleParam::CH;
const VehicleParam_VehicleBrand VehicleParam::TESHUN;
const VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MIN;
const VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MAX;
const int VehicleParam::VehicleBrand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kSourceFrameFieldNumber;
const int Transform::kTargetFrameFieldNumber;
const int Transform::kTranslationFieldNumber;
const int Transform::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_frame()) {
    source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
  }
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_frame()) {
    target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
  }
  if (from.has_translation()) {
    translation_ = new ::jmc_auto::common::Point3D(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::jmc_auto::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.common.Transform)
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&translation_, 0, reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&translation_) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:jmc_auto.common.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  source_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete translation_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transform& Transform::default_instance() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.common.Transform)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_source_frame()) {
      GOOGLE_DCHECK(!source_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_frame_.UnsafeRawStringPointer())->clear();
    }
    if (has_target_frame()) {
      GOOGLE_DCHECK(!target_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_frame_.UnsafeRawStringPointer())->clear();
    }
    if (has_translation()) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::jmc_auto::common::Quaternion::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.common.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes source_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D translation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Quaternion rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.common.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.common.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->source_frame(), output);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_frame(), output);
  }

  // optional .jmc_auto.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->translation_, output);
  }

  // optional .jmc_auto.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.common.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_frame(), target);
  }

  // optional .jmc_auto.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->translation_, deterministic, target);
  }

  // optional .jmc_auto.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.common.Transform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes source_frame = 1;
    if (has_source_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_frame());
    }

    // optional bytes target_frame = 2;
    if (has_target_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_frame());
    }

    // optional .jmc_auto.common.Point3D translation = 3;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .jmc_auto.common.Quaternion rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.common.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.common.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_frame();
      source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_frame();
      target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_translation()->::jmc_auto::common::Point3D::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rotation()->::jmc_auto::common::Quaternion::MergeFrom(from.rotation());
    }
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  source_frame_.Swap(&other->source_frame_);
  target_frame_.Swap(&other->target_frame_);
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional bytes source_frame = 1;
bool Transform::has_source_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transform::set_has_source_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void Transform::clear_has_source_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_frame();
}
const ::std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.Transform.source_frame)
  return source_frame_.GetNoArena();
}
void Transform::set_source_frame(const ::std::string& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.common.Transform.source_frame)
}
#if LANG_CXX11
void Transform::set_source_frame(::std::string&& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.common.Transform.source_frame)
}
#endif
void Transform::set_source_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.common.Transform.source_frame)
}
void Transform::set_source_frame(const void* value, size_t size) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.common.Transform.source_frame)
}
::std::string* Transform::mutable_source_frame() {
  set_has_source_frame();
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.Transform.source_frame)
  return source_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.Transform.source_frame)
  clear_has_source_frame();
  return source_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transform::set_allocated_source_frame(::std::string* source_frame) {
  if (source_frame != NULL) {
    set_has_source_frame();
  } else {
    clear_has_source_frame();
  }
  source_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
bool Transform::has_target_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transform::set_has_target_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void Transform::clear_has_target_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_frame();
}
const ::std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.Transform.target_frame)
  return target_frame_.GetNoArena();
}
void Transform::set_target_frame(const ::std::string& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.common.Transform.target_frame)
}
#if LANG_CXX11
void Transform::set_target_frame(::std::string&& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.common.Transform.target_frame)
}
#endif
void Transform::set_target_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.common.Transform.target_frame)
}
void Transform::set_target_frame(const void* value, size_t size) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.common.Transform.target_frame)
}
::std::string* Transform::mutable_target_frame() {
  set_has_target_frame();
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.Transform.target_frame)
  return target_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.Transform.target_frame)
  clear_has_target_frame();
  return target_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transform::set_allocated_target_frame(::std::string* target_frame) {
  if (target_frame != NULL) {
    set_has_target_frame();
  } else {
    clear_has_target_frame();
  }
  target_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.Transform.target_frame)
}

// optional .jmc_auto.common.Point3D translation = 3;
bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::jmc_auto::common::Point3D::Clear();
  clear_has_translation();
}
const ::jmc_auto::common::Point3D& Transform::translation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.Transform.translation)
  return translation_ != NULL ? *translation_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.Transform.translation)
  return translation_;
}
::jmc_auto::common::Point3D* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.Transform.translation)
  clear_has_translation();
  ::jmc_auto::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform::set_allocated_translation(::jmc_auto::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.Transform.translation)
}

// optional .jmc_auto.common.Quaternion rotation = 4;
bool Transform::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transform::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
void Transform::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transform::clear_rotation() {
  if (rotation_ != NULL) rotation_->::jmc_auto::common::Quaternion::Clear();
  clear_has_rotation();
}
const ::jmc_auto::common::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.Transform.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::jmc_auto::common::Quaternion::internal_default_instance();
}
::jmc_auto::common::Quaternion* Transform::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::jmc_auto::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.Transform.rotation)
  return rotation_;
}
::jmc_auto::common::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.Transform.rotation)
  clear_has_rotation();
  ::jmc_auto::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform::set_allocated_rotation(::jmc_auto::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.Transform.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extrinsics::kTansformsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extrinsics::Extrinsics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.common.Extrinsics)
}

void Extrinsics::SharedCtor() {
  _cached_size_ = 0;
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:jmc_auto.common.Extrinsics)
  SharedDtor();
}

void Extrinsics::SharedDtor() {
}

void Extrinsics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extrinsics::descriptor() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Extrinsics& Extrinsics::default_instance() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Extrinsics* Extrinsics::New(::google::protobuf::Arena* arena) const {
  Extrinsics* n = new Extrinsics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.common.Extrinsics)
  tansforms_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Extrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.common.Extrinsics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Transform tansforms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tansforms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.common.Extrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.common.Extrinsics)
  return false;
#undef DO_
}

void Extrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Transform tansforms = 1;
  for (unsigned int i = 0, n = this->tansforms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tansforms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.common.Extrinsics)
}

::google::protobuf::uint8* Extrinsics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Transform tansforms = 1;
  for (unsigned int i = 0, n = this->tansforms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tansforms(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.common.Extrinsics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Transform tansforms = 1;
  {
    unsigned int count = this->tansforms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tansforms(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extrinsics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Extrinsics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.common.Extrinsics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.common.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
}

void Extrinsics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::Swap(Extrinsics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extrinsics::InternalSwap(Extrinsics* other) {
  tansforms_.InternalSwap(&other->tansforms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extrinsics::GetMetadata() const {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extrinsics

// repeated .jmc_auto.common.Transform tansforms = 1;
int Extrinsics::tansforms_size() const {
  return tansforms_.size();
}
void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
const ::jmc_auto::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.Extrinsics.tansforms)
  return tansforms_.Get(index);
}
::jmc_auto::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
::jmc_auto::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:jmc_auto.common.Extrinsics.tansforms)
  return tansforms_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.common.Extrinsics.tansforms)
  return &tansforms_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:jmc_auto.common.Extrinsics.tansforms)
  return tansforms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kBrandFieldNumber;
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kMinSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
const int VehicleParam::kMaxAbsSpeedWhenStoppedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_edge_to_center_, &from.front_edge_to_center_,
    reinterpret_cast<char*>(&wheel_rolling_radius_) -
    reinterpret_cast<char*>(&front_edge_to_center_) + sizeof(wheel_rolling_radius_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.common.VehicleParam)
}

void VehicleParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&front_edge_to_center_, 0, reinterpret_cast<char*>(&wheel_rolling_radius_) -
    reinterpret_cast<char*>(&front_edge_to_center_) + sizeof(wheel_rolling_radius_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.common.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
}

void VehicleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleParam& VehicleParam::default_instance() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleParam* VehicleParam::New(::google::protobuf::Arena* arena) const {
  VehicleParam* n = new VehicleParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.common.VehicleParam)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&front_edge_to_center_, 0, reinterpret_cast<char*>(&min_turn_radius_) -
      reinterpret_cast<char*>(&front_edge_to_center_) + sizeof(min_turn_radius_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&brand_, 0, reinterpret_cast<char*>(&steer_ratio_) -
      reinterpret_cast<char*>(&brand_) + sizeof(steer_ratio_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&wheel_base_, 0, reinterpret_cast<char*>(&wheel_rolling_radius_) -
      reinterpret_cast<char*>(&wheel_base_) + sizeof(wheel_rolling_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.common.VehicleParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.VehicleParam.VehicleBrand brand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::common::VehicleParam_VehicleBrand_IsValid(value)) {
            set_brand(static_cast< ::jmc_auto::common::VehicleParam_VehicleBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_edge_to_center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_front_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double back_edge_to_center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_back_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_edge_to_center = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_left_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_edge_to_center = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_right_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_turn_radius = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_min_turn_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_max_steer_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle_rate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_max_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_steer_angle_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_min_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_ratio = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_steer_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_base = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_wheel_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_rolling_radius = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_wheel_rolling_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_abs_speed_when_stopped = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_max_abs_speed_when_stopped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_abs_speed_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.common.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.common.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.VehicleParam.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional double front_edge_to_center = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right_edge_to_center(), output);
  }

  // optional double length = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // optional double width = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional double min_turn_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_steer_angle_rate(), output);
  }

  // optional double min_steer_angle_rate = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->min_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steer_ratio(), output);
  }

  // optional double wheel_base = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->wheel_rolling_radius(), output);
  }

  // optional float max_abs_speed_when_stopped = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->max_abs_speed_when_stopped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.common.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.VehicleParam.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional double front_edge_to_center = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right_edge_to_center(), target);
  }

  // optional double length = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // optional double width = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional double min_turn_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steer_ratio(), target);
  }

  // optional double wheel_base = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->max_abs_speed_when_stopped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.common.VehicleParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double front_edge_to_center = 2;
    if (has_front_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 3;
    if (has_back_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 4;
    if (has_left_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 5;
    if (has_right_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double length = 6;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 7;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 9;
    if (has_min_turn_radius()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.common.VehicleParam.VehicleBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional float max_abs_speed_when_stopped = 18;
    if (has_max_abs_speed_when_stopped()) {
      total_size += 2 + 4;
    }

    // optional double max_acceleration = 10;
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 11;
    if (has_max_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 12;
    if (has_max_steer_angle()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 13;
    if (has_max_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 14;
    if (has_min_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 15;
    if (has_steer_ratio()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double wheel_base = 16;
    if (has_wheel_base()) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 17;
    if (has_wheel_rolling_radius()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.common.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.common.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      front_edge_to_center_ = from.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      back_edge_to_center_ = from.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_edge_to_center_ = from.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_edge_to_center_ = from.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_turn_radius_ = from.min_turn_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_abs_speed_when_stopped_ = from.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_steer_angle_ = from.max_steer_angle_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_steer_angle_rate_ = from.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_steer_angle_rate_ = from.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      steer_ratio_ = from.steer_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      wheel_base_ = from.wheel_base_;
    }
    if (cached_has_bits & 0x00020000u) {
      wheel_rolling_radius_ = from.wheel_rolling_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  std::swap(front_edge_to_center_, other->front_edge_to_center_);
  std::swap(back_edge_to_center_, other->back_edge_to_center_);
  std::swap(left_edge_to_center_, other->left_edge_to_center_);
  std::swap(right_edge_to_center_, other->right_edge_to_center_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(min_turn_radius_, other->min_turn_radius_);
  std::swap(brand_, other->brand_);
  std::swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(max_deceleration_, other->max_deceleration_);
  std::swap(max_steer_angle_, other->max_steer_angle_);
  std::swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  std::swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  std::swap(steer_ratio_, other->steer_ratio_);
  std::swap(wheel_base_, other->wheel_base_);
  std::swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParam

// optional .jmc_auto.common.VehicleParam.VehicleBrand brand = 1;
bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
::jmc_auto::common::VehicleParam_VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.brand)
  return static_cast< ::jmc_auto::common::VehicleParam_VehicleBrand >(brand_);
}
void VehicleParam::set_brand(::jmc_auto::common::VehicleParam_VehicleBrand value) {
  assert(::jmc_auto::common::VehicleParam_VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.brand)
}

// optional double front_edge_to_center = 2;
bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
  clear_has_front_edge_to_center();
}
double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 3;
bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
  clear_has_back_edge_to_center();
}
double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 4;
bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
  clear_has_left_edge_to_center();
}
double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 5;
bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
  clear_has_right_edge_to_center();
}
double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.right_edge_to_center)
}

// optional double length = 6;
bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleParam::clear_length() {
  length_ = 0;
  clear_has_length();
}
double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.length)
  return length_;
}
void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.length)
}

// optional double width = 7;
bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleParam::clear_width() {
  width_ = 0;
  clear_has_width();
}
double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.width)
  return width_;
}
void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.width)
}

// optional double height = 8;
bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleParam::clear_height() {
  height_ = 0;
  clear_has_height();
}
double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.height)
  return height_;
}
void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.height)
}

// optional double min_turn_radius = 9;
bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
  clear_has_min_turn_radius();
}
double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 10;
bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
  clear_has_max_acceleration();
}
double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 11;
bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
  clear_has_max_deceleration();
}
double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 12;
bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
  clear_has_max_steer_angle();
}
double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 13;
bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
  clear_has_max_steer_angle_rate();
}
double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 14;
bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = 0;
  clear_has_min_steer_angle_rate();
}
double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 15;
bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
  clear_has_steer_ratio();
}
double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 16;
bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
  clear_has_wheel_base();
}
double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.wheel_base)
  return wheel_base_;
}
void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 17;
bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
  clear_has_wheel_rolling_radius();
}
double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 18;
bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = 0;
  clear_has_max_abs_speed_when_stopped();
}
float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.common.VehicleParam.max_abs_speed_when_stopped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kHeaderFieldNumber;
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_vehicle_param()) {
    vehicle_param_ = new ::jmc_auto::common::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = NULL;
  }
  if (from.has_extrinsics()) {
    extrinsics_ = new ::jmc_auto::common::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.common.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&extrinsics_) -
    reinterpret_cast<char*>(&header_) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.common.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete vehicle_param_;
  }
  if (this != internal_default_instance()) {
    delete extrinsics_;
  }
}

void VehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleConfig& VehicleConfig::default_instance() {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleConfig* VehicleConfig::New(::google::protobuf::Arena* arena) const {
  VehicleConfig* n = new VehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.common.VehicleConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_vehicle_param()) {
      GOOGLE_DCHECK(vehicle_param_ != NULL);
      vehicle_param_->::jmc_auto::common::VehicleParam::Clear();
    }
    if (has_extrinsics()) {
      GOOGLE_DCHECK(extrinsics_ != NULL);
      extrinsics_->::jmc_auto::common::Extrinsics::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.common.VehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.VehicleParam vehicle_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Extrinsics extrinsics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.common.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.common.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .jmc_auto.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_param_, output);
  }

  // optional .jmc_auto.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extrinsics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.common.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .jmc_auto.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_param_, deterministic, target);
  }

  // optional .jmc_auto.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->extrinsics_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.common.VehicleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.common.VehicleParam vehicle_param = 2;
    if (has_vehicle_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_param_);
    }

    // optional .jmc_auto.common.Extrinsics extrinsics = 3;
    if (has_extrinsics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extrinsics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.common.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.common.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vehicle_param()->::jmc_auto::common::VehicleParam::MergeFrom(from.vehicle_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_extrinsics()->::jmc_auto::common::Extrinsics::MergeFrom(from.extrinsics());
    }
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  std::swap(header_, other->header_);
  std::swap(vehicle_param_, other->vehicle_param_);
  std::swap(extrinsics_, other->extrinsics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleConfig

// optional .jmc_auto.common.Header header = 1;
bool VehicleConfig::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleConfig::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleConfig::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleConfig::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleConfig.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* VehicleConfig::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.VehicleConfig.header)
  return header_;
}
::jmc_auto::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.VehicleConfig.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.VehicleConfig.header)
}

// optional .jmc_auto.common.VehicleParam vehicle_param = 2;
bool VehicleConfig::has_vehicle_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleConfig::set_has_vehicle_param() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleConfig::clear_has_vehicle_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != NULL) vehicle_param_->::jmc_auto::common::VehicleParam::Clear();
  clear_has_vehicle_param();
}
const ::jmc_auto::common::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleConfig.vehicle_param)
  return vehicle_param_ != NULL ? *vehicle_param_
                         : *::jmc_auto::common::VehicleParam::internal_default_instance();
}
::jmc_auto::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  set_has_vehicle_param();
  if (vehicle_param_ == NULL) {
    vehicle_param_ = new ::jmc_auto::common::VehicleParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
::jmc_auto::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.VehicleConfig.vehicle_param)
  clear_has_vehicle_param();
  ::jmc_auto::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_vehicle_param(::jmc_auto::common::VehicleParam* vehicle_param) {
  delete vehicle_param_;
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    set_has_vehicle_param();
  } else {
    clear_has_vehicle_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.VehicleConfig.vehicle_param)
}

// optional .jmc_auto.common.Extrinsics extrinsics = 3;
bool VehicleConfig::has_extrinsics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleConfig::set_has_extrinsics() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleConfig::clear_has_extrinsics() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != NULL) extrinsics_->::jmc_auto::common::Extrinsics::Clear();
  clear_has_extrinsics();
}
const ::jmc_auto::common::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:jmc_auto.common.VehicleConfig.extrinsics)
  return extrinsics_ != NULL ? *extrinsics_
                         : *::jmc_auto::common::Extrinsics::internal_default_instance();
}
::jmc_auto::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  set_has_extrinsics();
  if (extrinsics_ == NULL) {
    extrinsics_ = new ::jmc_auto::common::Extrinsics;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.common.VehicleConfig.extrinsics)
  return extrinsics_;
}
::jmc_auto::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:jmc_auto.common.VehicleConfig.extrinsics)
  clear_has_extrinsics();
  ::jmc_auto::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_extrinsics(::jmc_auto::common::Extrinsics* extrinsics) {
  delete extrinsics_;
  extrinsics_ = extrinsics;
  if (extrinsics) {
    set_has_extrinsics();
  } else {
    clear_has_extrinsics();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.common.VehicleConfig.extrinsics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
