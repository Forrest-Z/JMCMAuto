// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/vehicle_chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/canbus/proto/vehicle_chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace canbus {
class Vehicle_ChassisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle_Chassis> {
} _Vehicle_Chassis_default_instance_;

namespace protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, soc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, acc_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Chassis, engine_started_),
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  2,
  3,
  0,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(Vehicle_Chassis)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle_Chassis_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/canbus/proto/vehicle_chassis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vehicle_Chassis_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  _Vehicle_Chassis_default_instance_.DefaultConstruct();
  _Vehicle_Chassis_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*modules/canbus/proto/vehicle_chassis.p"
      "roto\022\017jmc_auto.canbus\032!modules/common/pr"
      "oto/header.proto\032\"modules/canbus/proto/c"
      "hassis.proto\"\304\003\n\017Vehicle_Chassis\022\020\n\003SOC\030"
      "\001 \001(\002:\003nan\022\026\n\tspeed_mps\030\002 \001(\002:\003nan\022\026\n\tAC"
      "C_Speed\030\004 \001(\002:\003nan\022 \n\023throttle_percentag"
      "e\030\005 \001(\002:\003nan\022\035\n\020brake_percentage\030\006 \001(\002:\003"
      "nan\022 \n\023steering_percentage\030\007 \001(\002:\003nan\022K\n"
      "\014driving_mode\030\010 \001(\0162$.jmc_auto.canbus.Ch"
      "assis.DrivingMode:\017COMPLETE_MANUAL\022@\n\ner"
      "ror_code\030\t \001(\0162\".jmc_auto.canbus.Chassis"
      ".ErrorCode:\010NO_ERROR\022<\n\rgear_location\030\n "
      "\001(\0162%.jmc_auto.canbus.Chassis.GearPositi"
      "on\022\'\n\006header\030\013 \001(\0132\027.jmc_auto.common.Hea"
      "der\022\026\n\016engine_started\030\014 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 587);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/vehicle_chassis.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle_Chassis::kSOCFieldNumber;
const int Vehicle_Chassis::kSpeedMpsFieldNumber;
const int Vehicle_Chassis::kACCSpeedFieldNumber;
const int Vehicle_Chassis::kThrottlePercentageFieldNumber;
const int Vehicle_Chassis::kBrakePercentageFieldNumber;
const int Vehicle_Chassis::kSteeringPercentageFieldNumber;
const int Vehicle_Chassis::kDrivingModeFieldNumber;
const int Vehicle_Chassis::kErrorCodeFieldNumber;
const int Vehicle_Chassis::kGearLocationFieldNumber;
const int Vehicle_Chassis::kHeaderFieldNumber;
const int Vehicle_Chassis::kEngineStartedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle_Chassis::Vehicle_Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Vehicle_Chassis)
}
Vehicle_Chassis::Vehicle_Chassis(const Vehicle_Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&driving_mode_, &from.driving_mode_,
    reinterpret_cast<char*>(&steering_percentage_) -
    reinterpret_cast<char*>(&driving_mode_) + sizeof(steering_percentage_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Vehicle_Chassis)
}

void Vehicle_Chassis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&engine_started_) -
    reinterpret_cast<char*>(&header_) + sizeof(engine_started_));
  soc_ = static_cast<float>(::google::protobuf::internal::NaN());
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  acc_speed_ = static_cast<float>(::google::protobuf::internal::NaN());
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
}

Vehicle_Chassis::~Vehicle_Chassis() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Vehicle_Chassis)
  SharedDtor();
}

void Vehicle_Chassis::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void Vehicle_Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle_Chassis::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle_Chassis& Vehicle_Chassis::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vehicle_Chassis* Vehicle_Chassis::New(::google::protobuf::Arena* arena) const {
  Vehicle_Chassis* n = new Vehicle_Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle_Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Vehicle_Chassis)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::jmc_auto::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&driving_mode_, 0, reinterpret_cast<char*>(&engine_started_) -
      reinterpret_cast<char*>(&driving_mode_) + sizeof(engine_started_));
    soc_ = static_cast<float>(::google::protobuf::internal::NaN());
    speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
    acc_speed_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[8 / 32] & 1792u) {
    throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vehicle_Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Vehicle_Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float SOC = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_soc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ACC_Speed = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_acc_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 7 [default = nan];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header header = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_started = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_engine_started();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Vehicle_Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Vehicle_Chassis)
  return false;
#undef DO_
}

void Vehicle_Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Vehicle_Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float SOC = 1 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->soc(), output);
  }

  // optional float speed_mps = 2 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_mps(), output);
  }

  // optional float ACC_Speed = 4 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acc_speed(), output);
  }

  // optional float throttle_percentage = 5 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 6 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 7 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->steering_percentage(), output);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->driving_mode(), output);
  }

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->error_code(), output);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear_location(), output);
  }

  // optional .jmc_auto.common.Header header = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->header_, output);
  }

  // optional bool engine_started = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->engine_started(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Vehicle_Chassis)
}

::google::protobuf::uint8* Vehicle_Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Vehicle_Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float SOC = 1 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->soc(), target);
  }

  // optional float speed_mps = 2 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_mps(), target);
  }

  // optional float ACC_Speed = 4 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acc_speed(), target);
  }

  // optional float throttle_percentage = 5 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 6 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 7 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->steering_percentage(), target);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->driving_mode(), target);
  }

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->error_code(), target);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear_location(), target);
  }

  // optional .jmc_auto.common.Header header = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->header_, deterministic, target);
  }

  // optional bool engine_started = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->engine_started(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Vehicle_Chassis)
  return target;
}

size_t Vehicle_Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Vehicle_Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.common.Header header = 11;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
    if (has_gear_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional bool engine_started = 12;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }

    // optional float SOC = 1 [default = nan];
    if (has_soc()) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 2 [default = nan];
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float ACC_Speed = 4 [default = nan];
    if (has_acc_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float throttle_percentage = 5 [default = nan];
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 6 [default = nan];
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 7 [default = nan];
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle_Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Vehicle_Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_Chassis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle_Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Vehicle_Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Vehicle_Chassis)
    MergeFrom(*source);
  }
}

void Vehicle_Chassis::MergeFrom(const Vehicle_Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Vehicle_Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00000010u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00000020u) {
      soc_ = from.soc_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_speed_ = from.acc_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000200u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_percentage_ = from.steering_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Vehicle_Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_Chassis::CopyFrom(const Vehicle_Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Vehicle_Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_Chassis::IsInitialized() const {
  return true;
}

void Vehicle_Chassis::Swap(Vehicle_Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle_Chassis::InternalSwap(Vehicle_Chassis* other) {
  std::swap(header_, other->header_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(error_code_, other->error_code_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(engine_started_, other->engine_started_);
  std::swap(soc_, other->soc_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(acc_speed_, other->acc_speed_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle_Chassis::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle_Chassis

// optional float SOC = 1 [default = nan];
bool Vehicle_Chassis::has_soc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vehicle_Chassis::set_has_soc() {
  _has_bits_[0] |= 0x00000020u;
}
void Vehicle_Chassis::clear_has_soc() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vehicle_Chassis::clear_soc() {
  soc_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_soc();
}
float Vehicle_Chassis::soc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.SOC)
  return soc_;
}
void Vehicle_Chassis::set_soc(float value) {
  set_has_soc();
  soc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.SOC)
}

// optional float speed_mps = 2 [default = nan];
bool Vehicle_Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vehicle_Chassis::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000040u;
}
void Vehicle_Chassis::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vehicle_Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
float Vehicle_Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.speed_mps)
  return speed_mps_;
}
void Vehicle_Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.speed_mps)
}

// optional float ACC_Speed = 4 [default = nan];
bool Vehicle_Chassis::has_acc_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vehicle_Chassis::set_has_acc_speed() {
  _has_bits_[0] |= 0x00000080u;
}
void Vehicle_Chassis::clear_has_acc_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vehicle_Chassis::clear_acc_speed() {
  acc_speed_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_acc_speed();
}
float Vehicle_Chassis::acc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.ACC_Speed)
  return acc_speed_;
}
void Vehicle_Chassis::set_acc_speed(float value) {
  set_has_acc_speed();
  acc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.ACC_Speed)
}

// optional float throttle_percentage = 5 [default = nan];
bool Vehicle_Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vehicle_Chassis::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00000100u;
}
void Vehicle_Chassis::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vehicle_Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
float Vehicle_Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.throttle_percentage)
  return throttle_percentage_;
}
void Vehicle_Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.throttle_percentage)
}

// optional float brake_percentage = 6 [default = nan];
bool Vehicle_Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vehicle_Chassis::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00000200u;
}
void Vehicle_Chassis::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vehicle_Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
float Vehicle_Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.brake_percentage)
  return brake_percentage_;
}
void Vehicle_Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.brake_percentage)
}

// optional float steering_percentage = 7 [default = nan];
bool Vehicle_Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Vehicle_Chassis::set_has_steering_percentage() {
  _has_bits_[0] |= 0x00000400u;
}
void Vehicle_Chassis::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x00000400u;
}
void Vehicle_Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
float Vehicle_Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.steering_percentage)
  return steering_percentage_;
}
void Vehicle_Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.steering_percentage)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
bool Vehicle_Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vehicle_Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void Vehicle_Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vehicle_Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::jmc_auto::canbus::Chassis_DrivingMode Vehicle_Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.driving_mode)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(driving_mode_);
}
void Vehicle_Chassis::set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.driving_mode)
}

// optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
bool Vehicle_Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vehicle_Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
void Vehicle_Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vehicle_Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::jmc_auto::canbus::Chassis_ErrorCode Vehicle_Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.error_code)
  return static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(error_code_);
}
void Vehicle_Chassis::set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value) {
  assert(::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.error_code)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
bool Vehicle_Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vehicle_Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00000008u;
}
void Vehicle_Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vehicle_Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
::jmc_auto::canbus::Chassis_GearPosition Vehicle_Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.gear_location)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_location_);
}
void Vehicle_Chassis::set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.gear_location)
}

// optional .jmc_auto.common.Header header = 11;
bool Vehicle_Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vehicle_Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Vehicle_Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vehicle_Chassis::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& Vehicle_Chassis::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* Vehicle_Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Vehicle_Chassis.header)
  return header_;
}
::jmc_auto::common::Header* Vehicle_Chassis::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Vehicle_Chassis.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Vehicle_Chassis::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Vehicle_Chassis.header)
}

// optional bool engine_started = 12;
bool Vehicle_Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vehicle_Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000010u;
}
void Vehicle_Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vehicle_Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
bool Vehicle_Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.engine_started)
  return engine_started_;
}
void Vehicle_Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.engine_started)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
