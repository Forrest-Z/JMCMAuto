// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/vehicle_chassis.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/canbus/proto/chassis.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Sonar;
class SonarDefaultTypeInternal;
extern SonarDefaultTypeInternal _Sonar_default_instance_;
class Surround;
class SurroundDefaultTypeInternal;
extern SurroundDefaultTypeInternal _Surround_default_instance_;
class Vehicle_Chassis;
class Vehicle_ChassisDefaultTypeInternal;
extern Vehicle_ChassisDefaultTypeInternal _Vehicle_Chassis_default_instance_;
class WheelSpeed;
class WheelSpeedDefaultTypeInternal;
extern WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
}  // namespace canbus
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
}  // namespace jmc_auto

namespace jmc_auto {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto

// ===================================================================

class Vehicle_Chassis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Vehicle_Chassis) */ {
 public:
  Vehicle_Chassis();
  virtual ~Vehicle_Chassis();

  Vehicle_Chassis(const Vehicle_Chassis& from);

  inline Vehicle_Chassis& operator=(const Vehicle_Chassis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle_Chassis& default_instance();

  static inline const Vehicle_Chassis* internal_default_instance() {
    return reinterpret_cast<const Vehicle_Chassis*>(
               &_Vehicle_Chassis_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vehicle_Chassis* other);

  // implements Message ----------------------------------------------

  inline Vehicle_Chassis* New() const PROTOBUF_FINAL { return New(NULL); }

  Vehicle_Chassis* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vehicle_Chassis& from);
  void MergeFrom(const Vehicle_Chassis& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vehicle_Chassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.common.Header header = 11;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 11;
  const ::jmc_auto::common::Header& header() const;
  ::jmc_auto::common::Header* mutable_header();
  ::jmc_auto::common::Header* release_header();
  void set_allocated_header(::jmc_auto::common::Header* header);

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 8;
  ::jmc_auto::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value);

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  ::jmc_auto::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value);

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
  bool has_gear_location() const;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 10;
  ::jmc_auto::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value);

  // optional bool engine_started = 12;
  bool has_engine_started() const;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 12;
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional float SOC = 1 [default = nan];
  bool has_soc() const;
  void clear_soc();
  static const int kSOCFieldNumber = 1;
  float soc() const;
  void set_soc(float value);

  // optional float speed_mps = 2 [default = nan];
  bool has_speed_mps() const;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 2;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float ACC_Speed = 4 [default = nan];
  bool has_acc_speed() const;
  void clear_acc_speed();
  static const int kACCSpeedFieldNumber = 4;
  float acc_speed() const;
  void set_acc_speed(float value);

  // optional float throttle_percentage = 5 [default = nan];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 5;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 6 [default = nan];
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 6;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 7 [default = nan];
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 7;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Vehicle_Chassis)
 private:
  void set_has_soc();
  void clear_has_soc();
  void set_has_speed_mps();
  void clear_has_speed_mps();
  void set_has_acc_speed();
  void clear_has_acc_speed();
  void set_has_throttle_percentage();
  void clear_has_throttle_percentage();
  void set_has_brake_percentage();
  void clear_has_brake_percentage();
  void set_has_steering_percentage();
  void clear_has_steering_percentage();
  void set_has_driving_mode();
  void clear_has_driving_mode();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_gear_location();
  void clear_has_gear_location();
  void set_has_header();
  void clear_has_header();
  void set_has_engine_started();
  void clear_has_engine_started();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::common::Header* header_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  bool engine_started_;
  float soc_;
  float speed_mps_;
  float acc_speed_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle_Chassis

// optional float SOC = 1 [default = nan];
inline bool Vehicle_Chassis::has_soc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Vehicle_Chassis::set_has_soc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Vehicle_Chassis::clear_has_soc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Vehicle_Chassis::clear_soc() {
  soc_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_soc();
}
inline float Vehicle_Chassis::soc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.SOC)
  return soc_;
}
inline void Vehicle_Chassis::set_soc(float value) {
  set_has_soc();
  soc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.SOC)
}

// optional float speed_mps = 2 [default = nan];
inline bool Vehicle_Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Vehicle_Chassis::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Vehicle_Chassis::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Vehicle_Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
inline float Vehicle_Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.speed_mps)
  return speed_mps_;
}
inline void Vehicle_Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.speed_mps)
}

// optional float ACC_Speed = 4 [default = nan];
inline bool Vehicle_Chassis::has_acc_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Vehicle_Chassis::set_has_acc_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Vehicle_Chassis::clear_has_acc_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Vehicle_Chassis::clear_acc_speed() {
  acc_speed_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_acc_speed();
}
inline float Vehicle_Chassis::acc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.ACC_Speed)
  return acc_speed_;
}
inline void Vehicle_Chassis::set_acc_speed(float value) {
  set_has_acc_speed();
  acc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.ACC_Speed)
}

// optional float throttle_percentage = 5 [default = nan];
inline bool Vehicle_Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Vehicle_Chassis::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Vehicle_Chassis::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Vehicle_Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
inline float Vehicle_Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Vehicle_Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.throttle_percentage)
}

// optional float brake_percentage = 6 [default = nan];
inline bool Vehicle_Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Vehicle_Chassis::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Vehicle_Chassis::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Vehicle_Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
inline float Vehicle_Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Vehicle_Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.brake_percentage)
}

// optional float steering_percentage = 7 [default = nan];
inline bool Vehicle_Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Vehicle_Chassis::set_has_steering_percentage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Vehicle_Chassis::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Vehicle_Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
inline float Vehicle_Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Vehicle_Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.steering_percentage)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 8 [default = COMPLETE_MANUAL];
inline bool Vehicle_Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vehicle_Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vehicle_Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vehicle_Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
inline ::jmc_auto::canbus::Chassis_DrivingMode Vehicle_Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.driving_mode)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Vehicle_Chassis::set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.driving_mode)
}

// optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 9 [default = NO_ERROR];
inline bool Vehicle_Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vehicle_Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vehicle_Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vehicle_Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::jmc_auto::canbus::Chassis_ErrorCode Vehicle_Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.error_code)
  return static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Vehicle_Chassis::set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value) {
  assert(::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.error_code)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 10;
inline bool Vehicle_Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vehicle_Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vehicle_Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vehicle_Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
inline ::jmc_auto::canbus::Chassis_GearPosition Vehicle_Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.gear_location)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Vehicle_Chassis::set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.gear_location)
}

// optional .jmc_auto.common.Header header = 11;
inline bool Vehicle_Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vehicle_Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vehicle_Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vehicle_Chassis::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
inline const ::jmc_auto::common::Header& Vehicle_Chassis::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
inline ::jmc_auto::common::Header* Vehicle_Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Vehicle_Chassis.header)
  return header_;
}
inline ::jmc_auto::common::Header* Vehicle_Chassis::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Vehicle_Chassis.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Vehicle_Chassis::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Vehicle_Chassis.header)
}

// optional bool engine_started = 12;
inline bool Vehicle_Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Vehicle_Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Vehicle_Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Vehicle_Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
inline bool Vehicle_Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Vehicle_Chassis.engine_started)
  return engine_started_;
}
inline void Vehicle_Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Vehicle_Chassis.engine_started)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fvehicle_5fchassis_2eproto__INCLUDED
