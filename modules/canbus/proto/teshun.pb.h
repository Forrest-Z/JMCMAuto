// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/teshun.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fteshun_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fteshun_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Adu_bodycontrol_0x333_333;
class Adu_bodycontrol_0x333_333DefaultTypeInternal;
extern Adu_bodycontrol_0x333_333DefaultTypeInternal _Adu_bodycontrol_0x333_333_default_instance_;
class Adu_controlbrake_0x110_110;
class Adu_controlbrake_0x110_110DefaultTypeInternal;
extern Adu_controlbrake_0x110_110DefaultTypeInternal _Adu_controlbrake_0x110_110_default_instance_;
class Adu_controldrive_0x120_120;
class Adu_controldrive_0x120_120DefaultTypeInternal;
extern Adu_controldrive_0x120_120DefaultTypeInternal _Adu_controldrive_0x120_120_default_instance_;
class Adu_controleps2_0x100_100;
class Adu_controleps2_0x100_100DefaultTypeInternal;
extern Adu_controleps2_0x100_100DefaultTypeInternal _Adu_controleps2_0x100_100_default_instance_;
class Bcm_bodysts_0x344_344;
class Bcm_bodysts_0x344_344DefaultTypeInternal;
extern Bcm_bodysts_0x344_344DefaultTypeInternal _Bcm_bodysts_0x344_344_default_instance_;
class Bcm_door_0x310_310;
class Bcm_door_0x310_310DefaultTypeInternal;
extern Bcm_door_0x310_310DefaultTypeInternal _Bcm_door_0x310_310_default_instance_;
class Epb_status_0x152_152;
class Epb_status_0x152_152DefaultTypeInternal;
extern Epb_status_0x152_152DefaultTypeInternal _Epb_status_0x152_152_default_instance_;
class Eps2_status_0x112_112;
class Eps2_status_0x112_112DefaultTypeInternal;
extern Eps2_status_0x112_112DefaultTypeInternal _Eps2_status_0x112_112_default_instance_;
class Gw_abs_0x211_211;
class Gw_abs_0x211_211DefaultTypeInternal;
extern Gw_abs_0x211_211DefaultTypeInternal _Gw_abs_0x211_211_default_instance_;
class Gw_abs_sts_0x221_221;
class Gw_abs_sts_0x221_221DefaultTypeInternal;
extern Gw_abs_sts_0x221_221DefaultTypeInternal _Gw_abs_sts_0x221_221_default_instance_;
class Gw_bms_display_0x323_323;
class Gw_bms_display_0x323_323DefaultTypeInternal;
extern Gw_bms_display_0x323_323DefaultTypeInternal _Gw_bms_display_0x323_323_default_instance_;
class Gw_bms_sts_0x181_181;
class Gw_bms_sts_0x181_181DefaultTypeInternal;
extern Gw_bms_sts_0x181_181DefaultTypeInternal _Gw_bms_sts_0x181_181_default_instance_;
class Gw_mcu_output_0x225_225;
class Gw_mcu_output_0x225_225DefaultTypeInternal;
extern Gw_mcu_output_0x225_225DefaultTypeInternal _Gw_mcu_output_0x225_225_default_instance_;
class Gw_mcu_power_0x226_226;
class Gw_mcu_power_0x226_226DefaultTypeInternal;
extern Gw_mcu_power_0x226_226DefaultTypeInternal _Gw_mcu_power_0x226_226_default_instance_;
class Gw_scu_shiftersts_0xc8_c8;
class Gw_scu_shiftersts_0xc8_c8DefaultTypeInternal;
extern Gw_scu_shiftersts_0xc8_c8DefaultTypeInternal _Gw_scu_shiftersts_0xc8_c8_default_instance_;
class Gw_vcu_control2_0x131_131;
class Gw_vcu_control2_0x131_131DefaultTypeInternal;
extern Gw_vcu_control2_0x131_131DefaultTypeInternal _Gw_vcu_control2_0x131_131_default_instance_;
class Gw_vcu_control_0x185_185;
class Gw_vcu_control_0x185_185DefaultTypeInternal;
extern Gw_vcu_control_0x185_185DefaultTypeInternal _Gw_vcu_control_0x185_185_default_instance_;
class Gw_vcu_drivests_0x10a_10a;
class Gw_vcu_drivests_0x10a_10aDefaultTypeInternal;
extern Gw_vcu_drivests_0x10a_10aDefaultTypeInternal _Gw_vcu_drivests_0x10a_10a_default_instance_;
class Gw_vcu_hmi_0x358_358;
class Gw_vcu_hmi_0x358_358DefaultTypeInternal;
extern Gw_vcu_hmi_0x358_358DefaultTypeInternal _Gw_vcu_hmi_0x358_358_default_instance_;
class Gw_vcu_sts_0x218_218;
class Gw_vcu_sts_0x218_218DefaultTypeInternal;
extern Gw_vcu_sts_0x218_218DefaultTypeInternal _Gw_vcu_sts_0x218_218_default_instance_;
class Gw_vcu_whltq_0x107_107;
class Gw_vcu_whltq_0x107_107DefaultTypeInternal;
extern Gw_vcu_whltq_0x107_107DefaultTypeInternal _Gw_vcu_whltq_0x107_107_default_instance_;
class Ibc_status2_0x124_124;
class Ibc_status2_0x124_124DefaultTypeInternal;
extern Ibc_status2_0x124_124DefaultTypeInternal _Ibc_status2_0x124_124_default_instance_;
class Ibc_status_0x122_122;
class Ibc_status_0x122_122DefaultTypeInternal;
extern Ibc_status_0x122_122DefaultTypeInternal _Ibc_status_0x122_122_default_instance_;
class Teshun;
class TeshunDefaultTypeInternal;
extern TeshunDefaultTypeInternal _Teshun_default_instance_;
}  // namespace canbus
}  // namespace jmc_auto

namespace jmc_auto {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto

enum Epb_status_0x152_152_Epb_brakelampreqType {
  Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_OFF = 0,
  Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_ON = 1
};
bool Epb_status_0x152_152_Epb_brakelampreqType_IsValid(int value);
const Epb_status_0x152_152_Epb_brakelampreqType Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_MIN = Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_OFF;
const Epb_status_0x152_152_Epb_brakelampreqType Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_MAX = Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_ON;
const int Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_ARRAYSIZE = Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Epb_status_0x152_152_Epb_brakelampreqType_descriptor();
inline const ::std::string& Epb_status_0x152_152_Epb_brakelampreqType_Name(Epb_status_0x152_152_Epb_brakelampreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Epb_status_0x152_152_Epb_brakelampreqType_descriptor(), value);
}
inline bool Epb_status_0x152_152_Epb_brakelampreqType_Parse(
    const ::std::string& name, Epb_status_0x152_152_Epb_brakelampreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Epb_status_0x152_152_Epb_brakelampreqType>(
    Epb_status_0x152_152_Epb_brakelampreqType_descriptor(), name, value);
}
enum Epb_status_0x152_152_Epb_sysfaultstatusType {
  Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_NO_FAULT = 0,
  Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_WARNING = 1,
  Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_FAULT = 2,
  Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_RESEVED = 3
};
bool Epb_status_0x152_152_Epb_sysfaultstatusType_IsValid(int value);
const Epb_status_0x152_152_Epb_sysfaultstatusType Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_MIN = Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_NO_FAULT;
const Epb_status_0x152_152_Epb_sysfaultstatusType Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_MAX = Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_RESEVED;
const int Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_ARRAYSIZE = Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Epb_status_0x152_152_Epb_sysfaultstatusType_descriptor();
inline const ::std::string& Epb_status_0x152_152_Epb_sysfaultstatusType_Name(Epb_status_0x152_152_Epb_sysfaultstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Epb_status_0x152_152_Epb_sysfaultstatusType_descriptor(), value);
}
inline bool Epb_status_0x152_152_Epb_sysfaultstatusType_Parse(
    const ::std::string& name, Epb_status_0x152_152_Epb_sysfaultstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Epb_status_0x152_152_Epb_sysfaultstatusType>(
    Epb_status_0x152_152_Epb_sysfaultstatusType_descriptor(), name, value);
}
enum Epb_status_0x152_152_Epb_parkingstatusType {
  Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_RELEASED = 0,
  Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_RELEASE_ONGOING = 1,
  Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_PARK_ONGOING = 2,
  Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_PARKED = 3,
  Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_UNKOWN = 4
};
bool Epb_status_0x152_152_Epb_parkingstatusType_IsValid(int value);
const Epb_status_0x152_152_Epb_parkingstatusType Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_MIN = Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_RELEASED;
const Epb_status_0x152_152_Epb_parkingstatusType Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_MAX = Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_UNKOWN;
const int Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_ARRAYSIZE = Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Epb_status_0x152_152_Epb_parkingstatusType_descriptor();
inline const ::std::string& Epb_status_0x152_152_Epb_parkingstatusType_Name(Epb_status_0x152_152_Epb_parkingstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Epb_status_0x152_152_Epb_parkingstatusType_descriptor(), value);
}
inline bool Epb_status_0x152_152_Epb_parkingstatusType_Parse(
    const ::std::string& name, Epb_status_0x152_152_Epb_parkingstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Epb_status_0x152_152_Epb_parkingstatusType>(
    Epb_status_0x152_152_Epb_parkingstatusType_descriptor(), name, value);
}
enum Epb_status_0x152_152_Epb_switchstatusType {
  Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_NO_ACTION_ON_SWITCH = 0,
  Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_SWITCH_TO_RELEASE = 1,
  Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_SWITCH_TO_PARK = 2,
  Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_RESERVED = 3
};
bool Epb_status_0x152_152_Epb_switchstatusType_IsValid(int value);
const Epb_status_0x152_152_Epb_switchstatusType Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_MIN = Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_NO_ACTION_ON_SWITCH;
const Epb_status_0x152_152_Epb_switchstatusType Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_MAX = Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_RESERVED;
const int Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_ARRAYSIZE = Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Epb_status_0x152_152_Epb_switchstatusType_descriptor();
inline const ::std::string& Epb_status_0x152_152_Epb_switchstatusType_Name(Epb_status_0x152_152_Epb_switchstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Epb_status_0x152_152_Epb_switchstatusType_descriptor(), value);
}
inline bool Epb_status_0x152_152_Epb_switchstatusType_Parse(
    const ::std::string& name, Epb_status_0x152_152_Epb_switchstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Epb_status_0x152_152_Epb_switchstatusType>(
    Epb_status_0x152_152_Epb_switchstatusType_descriptor(), name, value);
}
enum Gw_abs_0x211_211_Abs_whlspdreristatusType {
  Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID = 0,
  Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID = 1
};
bool Gw_abs_0x211_211_Abs_whlspdreristatusType_IsValid(int value);
const Gw_abs_0x211_211_Abs_whlspdreristatusType Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MIN = Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID;
const Gw_abs_0x211_211_Abs_whlspdreristatusType Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX = Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID;
const int Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_ARRAYSIZE = Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_0x211_211_Abs_whlspdreristatusType_descriptor();
inline const ::std::string& Gw_abs_0x211_211_Abs_whlspdreristatusType_Name(Gw_abs_0x211_211_Abs_whlspdreristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_0x211_211_Abs_whlspdreristatusType_descriptor(), value);
}
inline bool Gw_abs_0x211_211_Abs_whlspdreristatusType_Parse(
    const ::std::string& name, Gw_abs_0x211_211_Abs_whlspdreristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_0x211_211_Abs_whlspdreristatusType>(
    Gw_abs_0x211_211_Abs_whlspdreristatusType_descriptor(), name, value);
}
enum Gw_abs_0x211_211_Abs_whlspdrelestatusType {
  Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID = 0,
  Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID = 1
};
bool Gw_abs_0x211_211_Abs_whlspdrelestatusType_IsValid(int value);
const Gw_abs_0x211_211_Abs_whlspdrelestatusType Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MIN = Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID;
const Gw_abs_0x211_211_Abs_whlspdrelestatusType Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX = Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID;
const int Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_ARRAYSIZE = Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_0x211_211_Abs_whlspdrelestatusType_descriptor();
inline const ::std::string& Gw_abs_0x211_211_Abs_whlspdrelestatusType_Name(Gw_abs_0x211_211_Abs_whlspdrelestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_descriptor(), value);
}
inline bool Gw_abs_0x211_211_Abs_whlspdrelestatusType_Parse(
    const ::std::string& name, Gw_abs_0x211_211_Abs_whlspdrelestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_0x211_211_Abs_whlspdrelestatusType>(
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_descriptor(), name, value);
}
enum Gw_abs_0x211_211_Abs_whlspdfrntristatusType {
  Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID = 0,
  Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID = 1
};
bool Gw_abs_0x211_211_Abs_whlspdfrntristatusType_IsValid(int value);
const Gw_abs_0x211_211_Abs_whlspdfrntristatusType Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MIN = Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID;
const Gw_abs_0x211_211_Abs_whlspdfrntristatusType Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX = Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID;
const int Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_ARRAYSIZE = Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_0x211_211_Abs_whlspdfrntristatusType_descriptor();
inline const ::std::string& Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Name(Gw_abs_0x211_211_Abs_whlspdfrntristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_descriptor(), value);
}
inline bool Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Parse(
    const ::std::string& name, Gw_abs_0x211_211_Abs_whlspdfrntristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_0x211_211_Abs_whlspdfrntristatusType>(
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_descriptor(), name, value);
}
enum Gw_abs_0x211_211_Abs_whlspdfrntlestatusType {
  Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID = 0,
  Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID = 1
};
bool Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_IsValid(int value);
const Gw_abs_0x211_211_Abs_whlspdfrntlestatusType Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MIN = Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID;
const Gw_abs_0x211_211_Abs_whlspdfrntlestatusType Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX = Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID;
const int Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_ARRAYSIZE = Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
inline const ::std::string& Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Name(Gw_abs_0x211_211_Abs_whlspdfrntlestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_descriptor(), value);
}
inline bool Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Parse(
    const ::std::string& name, Gw_abs_0x211_211_Abs_whlspdfrntlestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_0x211_211_Abs_whlspdfrntlestatusType>(
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_rearwiperstsType {
  Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_OFF = 1,
  Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_ON = 2,
  Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED = 3
};
bool Bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_rearwiperstsType Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MIN = Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED;
const Bcm_door_0x310_310_Bcm_rearwiperstsType Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX = Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED;
const int Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_rearwiperstsType_Name(Bcm_door_0x310_310_Bcm_rearwiperstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_rearwiperstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_rearwiperstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_rearwiperstsType>(
    Bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_frontwiperstsType {
  Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_OFF = 1,
  Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_LOW = 2,
  Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH = 3
};
bool Bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_frontwiperstsType Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MIN = Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED;
const Bcm_door_0x310_310_Bcm_frontwiperstsType Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX = Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH;
const int Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_frontwiperstsType_Name(Bcm_door_0x310_310_Bcm_frontwiperstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_frontwiperstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_frontwiperstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_frontwiperstsType>(
    Bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_chargeplugstsType {
  Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_OPEN = 2,
  Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_chargeplugstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_chargeplugstsType Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_MIN = Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_NO_USED;
const Bcm_door_0x310_310_Bcm_chargeplugstsType Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_MAX = Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_FAULT;
const int Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_chargeplugstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_chargeplugstsType_Name(Bcm_door_0x310_310_Bcm_chargeplugstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_chargeplugstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_chargeplugstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_chargeplugstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_chargeplugstsType>(
    Bcm_door_0x310_310_Bcm_chargeplugstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_enginehoodstsType {
  Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_OPEN = 2,
  Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_enginehoodstsType Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MIN = Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED;
const Bcm_door_0x310_310_Bcm_enginehoodstsType Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX = Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT;
const int Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_enginehoodstsType_Name(Bcm_door_0x310_310_Bcm_enginehoodstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_enginehoodstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_enginehoodstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_enginehoodstsType>(
    Bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType {
  Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION = 0,
  Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED = 1
};
bool Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MIN = Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION;
const Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX = Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED;
const int Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Name(Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType>(
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_antitheftstsType {
  Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_RELIEVE_ANTI_THEFT = 0,
  Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT = 1,
  Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT_PASS = 2,
  Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT_FAULT_ALARM = 3
};
bool Bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_antitheftstsType Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MIN = Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_RELIEVE_ANTI_THEFT;
const Bcm_door_0x310_310_Bcm_antitheftstsType Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX = Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT_FAULT_ALARM;
const int Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_antitheftstsType_Name(Bcm_door_0x310_310_Bcm_antitheftstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_antitheftstsType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_antitheftstsType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_antitheftstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_antitheftstsType>(
    Bcm_door_0x310_310_Bcm_antitheftstsType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_lockunlockfeedbackType {
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION = 0,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_LOCK = 1,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK = 2,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK = 3,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK_D6_D8_CB_F8 = 4,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK_BB_FA_B3_D7_C9_CF_CB_F8 = 5,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK_BF_D8_D7_AF_BB_C0 = 6,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK = 7,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK = 8,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK = 15,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK = 17,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK = 18,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK = 19,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK_D6_E2_CB_F8 = 20,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK_BB_FA_B3_E2_CB_F8 = 21,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK_C5_F6_BD_E2_CB_F8 = 22,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK_B0_CE_B3_E2_CB_F8 = 23,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK_BB_F0_BD_E2_CB_F8 = 24,
  Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK = 31
};
bool Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_lockunlockfeedbackType Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MIN = Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION;
const Bcm_door_0x310_310_Bcm_lockunlockfeedbackType Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX = Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK;
const int Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Name(Bcm_door_0x310_310_Bcm_lockunlockfeedbackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_lockunlockfeedbackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_lockunlockfeedbackType>(
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorlockststrunkType {
  Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_LOCKED = 1,
  Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_UNLOCKED = 2,
  Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorlockststrunkType Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MIN = Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED;
const Bcm_door_0x310_310_Bcm_doorlockststrunkType Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX = Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT;
const int Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorlockststrunkType_Name(Bcm_door_0x310_310_Bcm_doorlockststrunkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorlockststrunkType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorlockststrunkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorlockststrunkType>(
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorststrunkType {
  Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_OPEN = 2,
  Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorststrunkType Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MIN = Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED;
const Bcm_door_0x310_310_Bcm_doorststrunkType Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX = Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT;
const int Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorststrunkType_Name(Bcm_door_0x310_310_Bcm_doorststrunkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorststrunkType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorststrunkType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorststrunkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorststrunkType>(
    Bcm_door_0x310_310_Bcm_doorststrunkType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorlockstsrearriType {
  Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_LOCKED = 1,
  Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_UNLOCKED = 2,
  Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorlockstsrearriType Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MIN = Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED;
const Bcm_door_0x310_310_Bcm_doorlockstsrearriType Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX = Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT;
const int Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Name(Bcm_door_0x310_310_Bcm_doorlockstsrearriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorlockstsrearriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorlockstsrearriType>(
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorlockstsrearleType {
  Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_LOCKED = 1,
  Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_UNLOCKED = 2,
  Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorlockstsrearleType Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MIN = Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED;
const Bcm_door_0x310_310_Bcm_doorlockstsrearleType Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX = Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT;
const int Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Name(Bcm_door_0x310_310_Bcm_doorlockstsrearleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorlockstsrearleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorlockstsrearleType>(
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorlockstsfrntriType {
  Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_LOCKED = 1,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_UNLOCKED = 2,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorlockstsfrntriType Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MIN = Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED;
const Bcm_door_0x310_310_Bcm_doorlockstsfrntriType Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX = Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT;
const int Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Name(Bcm_door_0x310_310_Bcm_doorlockstsfrntriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorlockstsfrntriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorlockstsfrntriType>(
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorlockstsfrntleType {
  Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_LOCKED = 1,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_UNLOCKED = 2,
  Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorlockstsfrntleType Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MIN = Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED;
const Bcm_door_0x310_310_Bcm_doorlockstsfrntleType Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX = Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT;
const int Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Name(Bcm_door_0x310_310_Bcm_doorlockstsfrntleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorlockstsfrntleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorlockstsfrntleType>(
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorstsrearriType {
  Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_OPEN = 2,
  Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorstsrearriType Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MIN = Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED;
const Bcm_door_0x310_310_Bcm_doorstsrearriType Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX = Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT;
const int Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorstsrearriType_Name(Bcm_door_0x310_310_Bcm_doorstsrearriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorstsrearriType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorstsrearriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorstsrearriType>(
    Bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorstsrearleType {
  Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_OPEN = 2,
  Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorstsrearleType Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MIN = Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED;
const Bcm_door_0x310_310_Bcm_doorstsrearleType Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX = Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT;
const int Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorstsrearleType_Name(Bcm_door_0x310_310_Bcm_doorstsrearleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorstsrearleType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorstsrearleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorstsrearleType>(
    Bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorstsfrntriType {
  Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_OPEN = 2,
  Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorstsfrntriType Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MIN = Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED;
const Bcm_door_0x310_310_Bcm_doorstsfrntriType Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX = Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT;
const int Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorstsfrntriType_Name(Bcm_door_0x310_310_Bcm_doorstsfrntriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorstsfrntriType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorstsfrntriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorstsfrntriType>(
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor(), name, value);
}
enum Bcm_door_0x310_310_Bcm_doorstsfrntleType {
  Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED = 0,
  Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_CLOSED = 1,
  Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_OPEN = 2,
  Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT = 3
};
bool Bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(int value);
const Bcm_door_0x310_310_Bcm_doorstsfrntleType Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MIN = Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED;
const Bcm_door_0x310_310_Bcm_doorstsfrntleType Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX = Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT;
const int Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_ARRAYSIZE = Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
inline const ::std::string& Bcm_door_0x310_310_Bcm_doorstsfrntleType_Name(Bcm_door_0x310_310_Bcm_doorstsfrntleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor(), value);
}
inline bool Bcm_door_0x310_310_Bcm_doorstsfrntleType_Parse(
    const ::std::string& name, Bcm_door_0x310_310_Bcm_doorstsfrntleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_door_0x310_310_Bcm_doorstsfrntleType>(
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_nlockrequestType {
  Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_NO_USE = 0,
  Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_LOCK = 1,
  Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_UNLOCK = 2,
  Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_INVALID = 3
};
bool Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_nlockrequestType Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_MIN = Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_NO_USE;
const Gw_vcu_sts_0x218_218_Vcu_nlockrequestType Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_MAX = Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_INVALID;
const int Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Name(Gw_vcu_sts_0x218_218_Vcu_nlockrequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_nlockrequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_nlockrequestType>(
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_plockrequestType {
  Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_NO_USE = 0,
  Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_LOCK = 1,
  Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_UNLOCK = 2,
  Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_INVALID = 3
};
bool Gw_vcu_sts_0x218_218_Vcu_plockrequestType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_plockrequestType Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_MIN = Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_NO_USE;
const Gw_vcu_sts_0x218_218_Vcu_plockrequestType Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_MAX = Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_INVALID;
const int Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_plockrequestType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Name(Gw_vcu_sts_0x218_218_Vcu_plockrequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_plockrequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_plockrequestType>(
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType {
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_STANDBY_IG_OFF_MODE = 1,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_VEHICLE_RESET_MODE = 2,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_HV_ACTIVATION_MODE = 3,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_DRIVING_MODE = 4,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_HV_TERMINATION_MODE = 5,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_CHARGING_MODE = 6,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_RESERVED = 7,
  Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_EMER_DRIVING_MODE = 8
};
bool Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_MIN = Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_STANDBY_IG_OFF_MODE;
const Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_MAX = Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_EMER_DRIVING_MODE;
const int Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Name(Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType>(
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType {
  Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_NO_RQ = 0,
  Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_RQ = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_MIN = Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_NO_RQ;
const Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_MAX = Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_RQ;
const int Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Name(Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType>(
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_fan_rqType {
  Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_NO_RQ = 0,
  Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_FAN_LOW_RQ = 1,
  Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_FAN_HIGH_RQ = 4
};
bool Gw_vcu_sts_0x218_218_Vcu_fan_rqType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_fan_rqType Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_MIN = Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_NO_RQ;
const Gw_vcu_sts_0x218_218_Vcu_fan_rqType Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_MAX = Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_FAN_HIGH_RQ;
const int Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_fan_rqType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Name(Gw_vcu_sts_0x218_218_Vcu_fan_rqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_fan_rqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_fan_rqType>(
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_engstart_rqType {
  Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_NO_RQ = 0,
  Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_RQ = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_engstart_rqType Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_MIN = Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_NO_RQ;
const Gw_vcu_sts_0x218_218_Vcu_engstart_rqType Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_MAX = Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_RQ;
const int Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Name(Gw_vcu_sts_0x218_218_Vcu_engstart_rqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_engstart_rqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_engstart_rqType>(
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType {
  Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_OFF = 0,
  Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_PARK = 1,
  Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_UNPARK = 2,
  Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_INVALID = 3
};
bool Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_MIN = Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_OFF;
const Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_MAX = Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_INVALID;
const int Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Name(Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType>(
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType {
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_VALID = 0,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_INVALID = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_MIN = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_VALID;
const Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_MAX = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_INVALID;
const int Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Name(Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType>(
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType {
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INITIAL = 0,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_P_PARK = 1,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_R_REVERSE = 2,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_N_NEUTRAL = 3,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_D_DRIVE = 4,
  Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INVALID = 5
};
bool Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_MIN = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INITIAL;
const Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_MAX = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INVALID;
const int Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Name(Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType>(
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType {
  Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_FORBID = 0,
  Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_ALLOW = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_MIN = Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_FORBID;
const Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_MAX = Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_ALLOW;
const int Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Name(Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType>(
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType {
  Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_FORBID = 0,
  Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_ALLOW = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_MIN = Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_FORBID;
const Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_MAX = Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_ALLOW;
const int Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Name(Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType>(
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType {
  Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_NORMAL = 0,
  Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL1 = 1,
  Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL2 = 2,
  Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL3 = 3
};
bool Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_MIN = Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_NORMAL;
const Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_MAX = Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL3;
const int Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Name(Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType>(
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_running_modeType {
  Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_STANDBY = 0,
  Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_EV_MODE = 1,
  Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_HYBIRD_MODE = 2
};
bool Gw_vcu_sts_0x218_218_Vcu_running_modeType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_running_modeType Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_MIN = Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_STANDBY;
const Gw_vcu_sts_0x218_218_Vcu_running_modeType Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_MAX = Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_HYBIRD_MODE;
const int Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_running_modeType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_running_modeType_Name(Gw_vcu_sts_0x218_218_Vcu_running_modeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_running_modeType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_running_modeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_running_modeType>(
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType {
  Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_NOT_ALLOWED = 0,
  Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_ALLOWED = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_MIN = Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_NOT_ALLOWED;
const Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_MAX = Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_ALLOWED;
const int Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Name(Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType>(
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_hvil_inType {
  Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_OFF = 0,
  Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_ON = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_hvil_inType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_hvil_inType Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_MIN = Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_OFF;
const Gw_vcu_sts_0x218_218_Vcu_hvil_inType Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_MAX = Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_ON;
const int Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_hvil_inType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Name(Gw_vcu_sts_0x218_218_Vcu_hvil_inType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_hvil_inType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_hvil_inType>(
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_descriptor(), name, value);
}
enum Gw_vcu_sts_0x218_218_Vcu_hvil_outType {
  Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_OFF = 0,
  Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_ON = 1
};
bool Gw_vcu_sts_0x218_218_Vcu_hvil_outType_IsValid(int value);
const Gw_vcu_sts_0x218_218_Vcu_hvil_outType Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_MIN = Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_OFF;
const Gw_vcu_sts_0x218_218_Vcu_hvil_outType Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_MAX = Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_ON;
const int Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_ARRAYSIZE = Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_sts_0x218_218_Vcu_hvil_outType_descriptor();
inline const ::std::string& Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Name(Gw_vcu_sts_0x218_218_Vcu_hvil_outType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_descriptor(), value);
}
inline bool Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Parse(
    const ::std::string& name, Gw_vcu_sts_0x218_218_Vcu_hvil_outType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_sts_0x218_218_Vcu_hvil_outType>(
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_descriptor(), name, value);
}
enum Adu_controldrive_0x120_120_Adu_controtorque_rawflagType {
  Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_NO_FILTERS = 0,
  Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_FILTERS = 1
};
bool Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_IsValid(int value);
const Adu_controldrive_0x120_120_Adu_controtorque_rawflagType Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_MIN = Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_NO_FILTERS;
const Adu_controldrive_0x120_120_Adu_controtorque_rawflagType Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_MAX = Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_FILTERS;
const int Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_ARRAYSIZE = Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_descriptor();
inline const ::std::string& Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Name(Adu_controldrive_0x120_120_Adu_controtorque_rawflagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_descriptor(), value);
}
inline bool Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Parse(
    const ::std::string& name, Adu_controldrive_0x120_120_Adu_controtorque_rawflagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controldrive_0x120_120_Adu_controtorque_rawflagType>(
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_descriptor(), name, value);
}
enum Adu_controldrive_0x120_120_Adu_controtorque_enableType {
  Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_DISABLE = 0,
  Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_ENABLE = 1
};
bool Adu_controldrive_0x120_120_Adu_controtorque_enableType_IsValid(int value);
const Adu_controldrive_0x120_120_Adu_controtorque_enableType Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_MIN = Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_DISABLE;
const Adu_controldrive_0x120_120_Adu_controtorque_enableType Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_MAX = Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_ENABLE;
const int Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_ARRAYSIZE = Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controldrive_0x120_120_Adu_controtorque_enableType_descriptor();
inline const ::std::string& Adu_controldrive_0x120_120_Adu_controtorque_enableType_Name(Adu_controldrive_0x120_120_Adu_controtorque_enableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_descriptor(), value);
}
inline bool Adu_controldrive_0x120_120_Adu_controtorque_enableType_Parse(
    const ::std::string& name, Adu_controldrive_0x120_120_Adu_controtorque_enableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controldrive_0x120_120_Adu_controtorque_enableType>(
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_descriptor(), name, value);
}
enum Adu_controldrive_0x120_120_Adu_targetgear_positionType {
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INITIAL = 0,
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_P_PARK = 1,
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_R_REVERSE = 2,
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_N_NEUTRAL = 3,
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_D_DRIVE = 4,
  Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INVALID = 5
};
bool Adu_controldrive_0x120_120_Adu_targetgear_positionType_IsValid(int value);
const Adu_controldrive_0x120_120_Adu_targetgear_positionType Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_MIN = Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INITIAL;
const Adu_controldrive_0x120_120_Adu_targetgear_positionType Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_MAX = Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INVALID;
const int Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_ARRAYSIZE = Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controldrive_0x120_120_Adu_targetgear_positionType_descriptor();
inline const ::std::string& Adu_controldrive_0x120_120_Adu_targetgear_positionType_Name(Adu_controldrive_0x120_120_Adu_targetgear_positionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_descriptor(), value);
}
inline bool Adu_controldrive_0x120_120_Adu_targetgear_positionType_Parse(
    const ::std::string& name, Adu_controldrive_0x120_120_Adu_targetgear_positionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controldrive_0x120_120_Adu_targetgear_positionType>(
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_descriptor(), name, value);
}
enum Adu_controldrive_0x120_120_Adu_targetgear_enableType {
  Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_DISABLE = 0,
  Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_ENABLE = 1
};
bool Adu_controldrive_0x120_120_Adu_targetgear_enableType_IsValid(int value);
const Adu_controldrive_0x120_120_Adu_targetgear_enableType Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_MIN = Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_DISABLE;
const Adu_controldrive_0x120_120_Adu_targetgear_enableType Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_MAX = Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_ENABLE;
const int Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_ARRAYSIZE = Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controldrive_0x120_120_Adu_targetgear_enableType_descriptor();
inline const ::std::string& Adu_controldrive_0x120_120_Adu_targetgear_enableType_Name(Adu_controldrive_0x120_120_Adu_targetgear_enableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_descriptor(), value);
}
inline bool Adu_controldrive_0x120_120_Adu_targetgear_enableType_Parse(
    const ::std::string& name, Adu_controldrive_0x120_120_Adu_targetgear_enableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controldrive_0x120_120_Adu_targetgear_enableType>(
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_descriptor(), name, value);
}
enum Gw_vcu_control2_0x131_131_Vcu_sts_vcuType {
  Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_INITIALIZING = 0,
  Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_READY = 1,
  Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_WARNING = 2,
  Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_FAULT = 3
};
bool Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_IsValid(int value);
const Gw_vcu_control2_0x131_131_Vcu_sts_vcuType Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_MIN = Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_INITIALIZING;
const Gw_vcu_control2_0x131_131_Vcu_sts_vcuType Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_MAX = Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_FAULT;
const int Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_ARRAYSIZE = Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_descriptor();
inline const ::std::string& Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Name(Gw_vcu_control2_0x131_131_Vcu_sts_vcuType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_descriptor(), value);
}
inline bool Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Parse(
    const ::std::string& name, Gw_vcu_control2_0x131_131_Vcu_sts_vcuType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control2_0x131_131_Vcu_sts_vcuType>(
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_descriptor(), name, value);
}
enum Gw_vcu_control2_0x131_131_Vcu_brake_flagType {
  Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_NO_ACTIVE = 0,
  Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_ACTIVE = 1
};
bool Gw_vcu_control2_0x131_131_Vcu_brake_flagType_IsValid(int value);
const Gw_vcu_control2_0x131_131_Vcu_brake_flagType Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_MIN = Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_NO_ACTIVE;
const Gw_vcu_control2_0x131_131_Vcu_brake_flagType Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_MAX = Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_ACTIVE;
const int Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_ARRAYSIZE = Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control2_0x131_131_Vcu_brake_flagType_descriptor();
inline const ::std::string& Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Name(Gw_vcu_control2_0x131_131_Vcu_brake_flagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_descriptor(), value);
}
inline bool Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Parse(
    const ::std::string& name, Gw_vcu_control2_0x131_131_Vcu_brake_flagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control2_0x131_131_Vcu_brake_flagType>(
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_descriptor(), name, value);
}
enum Gw_vcu_control2_0x131_131_Vcu_tractor_flagType {
  Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_NO_ACTIVE = 0,
  Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_ACTIVE = 1
};
bool Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_IsValid(int value);
const Gw_vcu_control2_0x131_131_Vcu_tractor_flagType Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_MIN = Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_NO_ACTIVE;
const Gw_vcu_control2_0x131_131_Vcu_tractor_flagType Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_MAX = Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_ACTIVE;
const int Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_ARRAYSIZE = Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_descriptor();
inline const ::std::string& Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Name(Gw_vcu_control2_0x131_131_Vcu_tractor_flagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_descriptor(), value);
}
inline bool Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Parse(
    const ::std::string& name, Gw_vcu_control2_0x131_131_Vcu_tractor_flagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control2_0x131_131_Vcu_tractor_flagType>(
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_descriptor(), name, value);
}
enum Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType {
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_ECOHEV = 0,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_ECO_EV = 1,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_PWRHEV = 2,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_PWREV = 3,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_EV_ECO = 4,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_EV_POWER = 5,
  Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_RESERVED = 7
};
bool Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_IsValid(int value);
const Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_MIN = Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_ECOHEV;
const Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_MAX = Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_RESERVED;
const int Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_ARRAYSIZE = Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_descriptor();
inline const ::std::string& Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Name(Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_descriptor(), value);
}
inline bool Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Parse(
    const ::std::string& name, Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType>(
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_descriptor(), name, value);
}
enum Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType {
  Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_NO_REQUEST = 0,
  Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_DISCHARGE = 1
};
bool Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_IsValid(int value);
const Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_MIN = Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_NO_REQUEST;
const Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_MAX = Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_DISCHARGE;
const int Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_ARRAYSIZE = Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_descriptor();
inline const ::std::string& Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Name(Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_descriptor(), value);
}
inline bool Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Parse(
    const ::std::string& name, Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType>(
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType {
  Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_UNLOCKED = 0,
  Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_LOCKED = 1,
  Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_FAULT = 3
};
bool Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_MIN = Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_UNLOCKED;
const Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_MAX = Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_FAULT;
const int Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Name(Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType>(
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType {
  Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_UNLOCKED = 0,
  Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_LOCKED = 1,
  Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_FAULT = 3
};
bool Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_MIN = Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_UNLOCKED;
const Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_MAX = Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_FAULT;
const int Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_Name(Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType>(
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType {
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_NOFAULT = 0,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_MODESELECTORSENSORFAIL = 1,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_ROTARYPOSITIONSENSORFAIL = 2,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_CANBUSCOMMUNICATION = 3,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_SOLENOIDFAIL = 4
};
bool Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_MIN = Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_NOFAULT;
const Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_MAX = Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_SOLENOIDFAIL;
const int Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_Name(Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType>(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_ShifterpositionType {
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_ERROR = 0,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_MANUAL_MODE = 3,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_DRIVE = 5,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_NEUTRAL = 6,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_REVERSE = 7,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_PARK = 8,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_UPSHIFT = 9,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_DOWNSHIFT = 10
};
bool Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_ShifterpositionType Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_MIN = Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_ERROR;
const Gw_scu_shiftersts_0xc8_c8_ShifterpositionType Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_MAX = Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_DOWNSHIFT;
const int Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_Name(Gw_scu_shiftersts_0xc8_c8_ShifterpositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_ShifterpositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_ShifterpositionType>(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType {
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_DOWNSHIFT = 5,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_UPSHIFT = 6,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_PARK = 7,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_REVERSE = 8,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_NEUTRAL = 9,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_DRIVE = 10,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_MANUAL_MODE = 12,
  Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_ERROR = 15
};
bool Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_MIN = Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_DOWNSHIFT;
const Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_MAX = Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_ERROR;
const int Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_Name(Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType>(
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_descriptor(), name, value);
}
enum Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType {
  Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_INIT = 0,
  Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_OK = 1,
  Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_WARNING = 2,
  Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_FAULT = 3
};
bool Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_IsValid(int value);
const Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_MIN = Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_INIT;
const Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_MAX = Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_FAULT;
const int Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_ARRAYSIZE = Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_descriptor();
inline const ::std::string& Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Name(Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_descriptor(), value);
}
inline bool Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Parse(
    const ::std::string& name, Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType>(
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType {
  Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_NOTINTERVENE = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_INTERVENE = 1
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_NOTINTERVENE;
const Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_INTERVENE;
const int Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType {
  Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_AVAILABLEFORCONTROL = 1,
  Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_ACTIVE = 2,
  Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_PERMANENTLY_FAILED = 3
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_TEMPORARILY_INHIBIT;
const Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_PERMANENTLY_FAILED;
const int Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType {
  Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_NOTINTERVENE = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_INTERVENE = 1
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_NOTINTERVENE;
const Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_INTERVENE;
const int Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType {
  Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_AVAILABLEFORCONTROL = 1,
  Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_ACTIVE = 2,
  Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_PERMANENTLY_FAILED = 3
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_TEMPORARILY_INHIBIT;
const Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_PERMANENTLY_FAILED;
const int Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType {
  Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_NOTINTERVENE = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_INTERVENE = 1
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_NOTINTERVENE;
const Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_INTERVENE;
const int Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType {
  Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_NOTREADY = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_READY = 1
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_NOTREADY;
const Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_READY;
const int Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_descriptor(), name, value);
}
enum Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType {
  Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_NOERROR = 0,
  Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_ERROR = 1
};
bool Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_IsValid(int value);
const Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_MIN = Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_NOERROR;
const Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_MAX = Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_ERROR;
const int Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_ARRAYSIZE = Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_descriptor();
inline const ::std::string& Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Name(Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_descriptor(), value);
}
inline bool Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Parse(
    const ::std::string& name, Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType>(
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_descriptor(), name, value);
}
enum Adu_controlbrake_0x110_110_Adu_parkrelease_reqType {
  Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_NO_CONTROL = 0,
  Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_RELEASE = 1,
  Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_PARK = 2,
  Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_RESERVED = 3
};
bool Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_IsValid(int value);
const Adu_controlbrake_0x110_110_Adu_parkrelease_reqType Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_MIN = Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_NO_CONTROL;
const Adu_controlbrake_0x110_110_Adu_parkrelease_reqType Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_MAX = Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_RESERVED;
const int Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_ARRAYSIZE = Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_descriptor();
inline const ::std::string& Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Name(Adu_controlbrake_0x110_110_Adu_parkrelease_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_descriptor(), value);
}
inline bool Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Parse(
    const ::std::string& name, Adu_controlbrake_0x110_110_Adu_parkrelease_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controlbrake_0x110_110_Adu_parkrelease_reqType>(
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_descriptor(), name, value);
}
enum Adu_controlbrake_0x110_110_Adu_controbrk_standstillType {
  Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_NOT_STANDSTILL = 0,
  Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_STANDSTILL = 1
};
bool Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_IsValid(int value);
const Adu_controlbrake_0x110_110_Adu_controbrk_standstillType Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_MIN = Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_NOT_STANDSTILL;
const Adu_controlbrake_0x110_110_Adu_controbrk_standstillType Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_MAX = Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_STANDSTILL;
const int Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_ARRAYSIZE = Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_descriptor();
inline const ::std::string& Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Name(Adu_controlbrake_0x110_110_Adu_controbrk_standstillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_descriptor(), value);
}
inline bool Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Parse(
    const ::std::string& name, Adu_controlbrake_0x110_110_Adu_controbrk_standstillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controlbrake_0x110_110_Adu_controbrk_standstillType>(
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_descriptor(), name, value);
}
enum Adu_controlbrake_0x110_110_Adu_controbrk_enableType {
  Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_DISABLE = 0,
  Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_ENABLE = 1
};
bool Adu_controlbrake_0x110_110_Adu_controbrk_enableType_IsValid(int value);
const Adu_controlbrake_0x110_110_Adu_controbrk_enableType Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_MIN = Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_DISABLE;
const Adu_controlbrake_0x110_110_Adu_controbrk_enableType Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_MAX = Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_ENABLE;
const int Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_ARRAYSIZE = Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controlbrake_0x110_110_Adu_controbrk_enableType_descriptor();
inline const ::std::string& Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Name(Adu_controlbrake_0x110_110_Adu_controbrk_enableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_descriptor(), value);
}
inline bool Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Parse(
    const ::std::string& name, Adu_controlbrake_0x110_110_Adu_controbrk_enableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controlbrake_0x110_110_Adu_controbrk_enableType>(
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_descriptor(), name, value);
}
enum Eps2_status_0x112_112_Eps_controlstatusType {
  Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0,
  Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_AVAILABLE_FOR_CONTROL = 1,
  Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_ACTIVE = 2,
  Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_PERMANENTLY_FAILED = 3
};
bool Eps2_status_0x112_112_Eps_controlstatusType_IsValid(int value);
const Eps2_status_0x112_112_Eps_controlstatusType Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_MIN = Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_TEMPORARILY_INHIBIT;
const Eps2_status_0x112_112_Eps_controlstatusType Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_MAX = Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_PERMANENTLY_FAILED;
const int Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_ARRAYSIZE = Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps2_status_0x112_112_Eps_controlstatusType_descriptor();
inline const ::std::string& Eps2_status_0x112_112_Eps_controlstatusType_Name(Eps2_status_0x112_112_Eps_controlstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps2_status_0x112_112_Eps_controlstatusType_descriptor(), value);
}
inline bool Eps2_status_0x112_112_Eps_controlstatusType_Parse(
    const ::std::string& name, Eps2_status_0x112_112_Eps_controlstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps2_status_0x112_112_Eps_controlstatusType>(
    Eps2_status_0x112_112_Eps_controlstatusType_descriptor(), name, value);
}
enum Eps2_status_0x112_112_Eps_driver_interveneType {
  Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_NOT_INTERVENE = 0,
  Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_INTERVENE = 1
};
bool Eps2_status_0x112_112_Eps_driver_interveneType_IsValid(int value);
const Eps2_status_0x112_112_Eps_driver_interveneType Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_MIN = Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_NOT_INTERVENE;
const Eps2_status_0x112_112_Eps_driver_interveneType Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_MAX = Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_INTERVENE;
const int Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_ARRAYSIZE = Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps2_status_0x112_112_Eps_driver_interveneType_descriptor();
inline const ::std::string& Eps2_status_0x112_112_Eps_driver_interveneType_Name(Eps2_status_0x112_112_Eps_driver_interveneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps2_status_0x112_112_Eps_driver_interveneType_descriptor(), value);
}
inline bool Eps2_status_0x112_112_Eps_driver_interveneType_Parse(
    const ::std::string& name, Eps2_status_0x112_112_Eps_driver_interveneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps2_status_0x112_112_Eps_driver_interveneType>(
    Eps2_status_0x112_112_Eps_driver_interveneType_descriptor(), name, value);
}
enum Eps2_status_0x112_112_Eps_sasfailurestsType {
  Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_INVALID__AN_INTERNAL_SENSOR_FAULT_OCCURRED = 0,
  Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_VALID = 1
};
bool Eps2_status_0x112_112_Eps_sasfailurestsType_IsValid(int value);
const Eps2_status_0x112_112_Eps_sasfailurestsType Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_MIN = Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_INVALID__AN_INTERNAL_SENSOR_FAULT_OCCURRED;
const Eps2_status_0x112_112_Eps_sasfailurestsType Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_MAX = Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_VALID;
const int Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_ARRAYSIZE = Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps2_status_0x112_112_Eps_sasfailurestsType_descriptor();
inline const ::std::string& Eps2_status_0x112_112_Eps_sasfailurestsType_Name(Eps2_status_0x112_112_Eps_sasfailurestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps2_status_0x112_112_Eps_sasfailurestsType_descriptor(), value);
}
inline bool Eps2_status_0x112_112_Eps_sasfailurestsType_Parse(
    const ::std::string& name, Eps2_status_0x112_112_Eps_sasfailurestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps2_status_0x112_112_Eps_sasfailurestsType>(
    Eps2_status_0x112_112_Eps_sasfailurestsType_descriptor(), name, value);
}
enum Eps2_status_0x112_112_Eps_torsionbartorquedirType {
  Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_POSITIVE = 0,
  Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_NEGATIVE = 1
};
bool Eps2_status_0x112_112_Eps_torsionbartorquedirType_IsValid(int value);
const Eps2_status_0x112_112_Eps_torsionbartorquedirType Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_MIN = Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_POSITIVE;
const Eps2_status_0x112_112_Eps_torsionbartorquedirType Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_MAX = Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_NEGATIVE;
const int Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_ARRAYSIZE = Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps2_status_0x112_112_Eps_torsionbartorquedirType_descriptor();
inline const ::std::string& Eps2_status_0x112_112_Eps_torsionbartorquedirType_Name(Eps2_status_0x112_112_Eps_torsionbartorquedirType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_descriptor(), value);
}
inline bool Eps2_status_0x112_112_Eps_torsionbartorquedirType_Parse(
    const ::std::string& name, Eps2_status_0x112_112_Eps_torsionbartorquedirType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps2_status_0x112_112_Eps_torsionbartorquedirType>(
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_descriptor(), name, value);
}
enum Eps2_status_0x112_112_Eps_torsionbartorquevalidType {
  Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_INVALID = 0,
  Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_VALID = 1
};
bool Eps2_status_0x112_112_Eps_torsionbartorquevalidType_IsValid(int value);
const Eps2_status_0x112_112_Eps_torsionbartorquevalidType Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_MIN = Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_INVALID;
const Eps2_status_0x112_112_Eps_torsionbartorquevalidType Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_MAX = Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_VALID;
const int Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_ARRAYSIZE = Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps2_status_0x112_112_Eps_torsionbartorquevalidType_descriptor();
inline const ::std::string& Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Name(Eps2_status_0x112_112_Eps_torsionbartorquevalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_descriptor(), value);
}
inline bool Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Parse(
    const ::std::string& name, Eps2_status_0x112_112_Eps_torsionbartorquevalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps2_status_0x112_112_Eps_torsionbartorquevalidType>(
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_descriptor(), name, value);
}
enum Gw_mcu_power_0x226_226_Mcu_sys_stsType {
  Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_INIT = 0,
  Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_OK = 1,
  Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_WARNING = 2,
  Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_FAULT = 3
};
bool Gw_mcu_power_0x226_226_Mcu_sys_stsType_IsValid(int value);
const Gw_mcu_power_0x226_226_Mcu_sys_stsType Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_MIN = Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_INIT;
const Gw_mcu_power_0x226_226_Mcu_sys_stsType Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_MAX = Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_FAULT;
const int Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_ARRAYSIZE = Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mcu_power_0x226_226_Mcu_sys_stsType_descriptor();
inline const ::std::string& Gw_mcu_power_0x226_226_Mcu_sys_stsType_Name(Gw_mcu_power_0x226_226_Mcu_sys_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_descriptor(), value);
}
inline bool Gw_mcu_power_0x226_226_Mcu_sys_stsType_Parse(
    const ::std::string& name, Gw_mcu_power_0x226_226_Mcu_sys_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mcu_power_0x226_226_Mcu_sys_stsType>(
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_descriptor(), name, value);
}
enum Adu_controleps2_0x100_100_Adu_controepsenableType {
  Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_DISABLE = 0,
  Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_ENABLE = 1
};
bool Adu_controleps2_0x100_100_Adu_controepsenableType_IsValid(int value);
const Adu_controleps2_0x100_100_Adu_controepsenableType Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_MIN = Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_DISABLE;
const Adu_controleps2_0x100_100_Adu_controepsenableType Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_MAX = Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_ENABLE;
const int Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_ARRAYSIZE = Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_controleps2_0x100_100_Adu_controepsenableType_descriptor();
inline const ::std::string& Adu_controleps2_0x100_100_Adu_controepsenableType_Name(Adu_controleps2_0x100_100_Adu_controepsenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_controleps2_0x100_100_Adu_controepsenableType_descriptor(), value);
}
inline bool Adu_controleps2_0x100_100_Adu_controepsenableType_Parse(
    const ::std::string& name, Adu_controleps2_0x100_100_Adu_controepsenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_controleps2_0x100_100_Adu_controepsenableType>(
    Adu_controleps2_0x100_100_Adu_controepsenableType_descriptor(), name, value);
}
enum Gw_mcu_output_0x225_225_Mcu_work_stsType {
  Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_CONSUM = 0,
  Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_GENERATE = 1,
  Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_OFF = 2,
  Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_READY = 3,
  Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_INVALID = 4
};
bool Gw_mcu_output_0x225_225_Mcu_work_stsType_IsValid(int value);
const Gw_mcu_output_0x225_225_Mcu_work_stsType Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_MIN = Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_CONSUM;
const Gw_mcu_output_0x225_225_Mcu_work_stsType Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_MAX = Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_INVALID;
const int Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_ARRAYSIZE = Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mcu_output_0x225_225_Mcu_work_stsType_descriptor();
inline const ::std::string& Gw_mcu_output_0x225_225_Mcu_work_stsType_Name(Gw_mcu_output_0x225_225_Mcu_work_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mcu_output_0x225_225_Mcu_work_stsType_descriptor(), value);
}
inline bool Gw_mcu_output_0x225_225_Mcu_work_stsType_Parse(
    const ::std::string& name, Gw_mcu_output_0x225_225_Mcu_work_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mcu_output_0x225_225_Mcu_work_stsType>(
    Gw_mcu_output_0x225_225_Mcu_work_stsType_descriptor(), name, value);
}
enum Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType {
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_INITIALIZATION = 0,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_PRECHARGE = 1,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_DISABLE = 2,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_STANDBY = 3,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ANTISLIP = 4,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ALOFFSETCAL = 5,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_NCTLINT = 7,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_TRQCT = 8,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ASCACTIVE = 9,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_AFTERRUN = 11,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_PREFAILURE = 12,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_FAILURE = 13,
  Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_DISCHARGE = 14
};
bool Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_IsValid(int value);
const Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_MIN = Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_INITIALIZATION;
const Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_MAX = Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_DISCHARGE;
const int Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_ARRAYSIZE = Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_descriptor();
inline const ::std::string& Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Name(Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_descriptor(), value);
}
inline bool Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Parse(
    const ::std::string& name, Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType>(
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_descriptor(), name, value);
}
enum Gw_mcu_output_0x225_225_Mcu_capacitor_stsType {
  Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_FORBIDCHARGE = 0,
  Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_WAITCHARGE = 1,
  Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_ALLOWDISCHARGE = 2,
  Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_FORBIDDISCHARGE = 3,
  Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_ERRORDISCHARGE = 4
};
bool Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_IsValid(int value);
const Gw_mcu_output_0x225_225_Mcu_capacitor_stsType Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_MIN = Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_FORBIDCHARGE;
const Gw_mcu_output_0x225_225_Mcu_capacitor_stsType Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_MAX = Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_ERRORDISCHARGE;
const int Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_ARRAYSIZE = Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_descriptor();
inline const ::std::string& Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Name(Gw_mcu_output_0x225_225_Mcu_capacitor_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_descriptor(), value);
}
inline bool Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Parse(
    const ::std::string& name, Gw_mcu_output_0x225_225_Mcu_capacitor_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mcu_output_0x225_225_Mcu_capacitor_stsType>(
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType {
  Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID = 0,
  Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID = 1
};
bool Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MIN = Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID;
const Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX = Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID;
const int Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Name(Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType>(
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType {
  Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID = 0,
  Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID = 1
};
bool Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MIN = Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID;
const Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX = Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID;
const int Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Name(Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType>(
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType {
  Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID = 0,
  Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INVALID = 1,
  Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT = 2
};
bool Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MIN = Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID;
const Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX = Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT;
const int Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Name(Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType>(
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_vehspddirectionType {
  Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD = 0,
  Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD = 1
};
bool Gw_abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_vehspddirectionType Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MIN = Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD;
const Gw_abs_sts_0x221_221_Abs_vehspddirectionType Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX = Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD;
const int Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Name(Gw_abs_sts_0x221_221_Abs_vehspddirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_vehspddirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_vehspddirectionType>(
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_ebdflgfltType {
  Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE = 0,
  Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE = 1
};
bool Gw_abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_ebdflgfltType Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MIN = Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE;
const Gw_abs_sts_0x221_221_Abs_ebdflgfltType Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX = Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE;
const int Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Name(Gw_abs_sts_0x221_221_Abs_ebdflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_ebdflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_ebdflgfltType>(
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_absflgfltType {
  Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE = 0,
  Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE = 1
};
bool Gw_abs_sts_0x221_221_Abs_absflgfltType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_absflgfltType Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MIN = Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE;
const Gw_abs_sts_0x221_221_Abs_absflgfltType Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX = Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE;
const int Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_absflgfltType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_absflgfltType_Name(Gw_abs_sts_0x221_221_Abs_absflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_absflgfltType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_absflgfltType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_absflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_absflgfltType>(
    Gw_abs_sts_0x221_221_Abs_absflgfltType_descriptor(), name, value);
}
enum Gw_abs_sts_0x221_221_Abs_absctrlactvType {
  Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE = 0,
  Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE = 1
};
bool Gw_abs_sts_0x221_221_Abs_absctrlactvType_IsValid(int value);
const Gw_abs_sts_0x221_221_Abs_absctrlactvType Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MIN = Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE;
const Gw_abs_sts_0x221_221_Abs_absctrlactvType Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX = Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE;
const int Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_ARRAYSIZE = Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
inline const ::std::string& Gw_abs_sts_0x221_221_Abs_absctrlactvType_Name(Gw_abs_sts_0x221_221_Abs_absctrlactvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_descriptor(), value);
}
inline bool Gw_abs_sts_0x221_221_Abs_absctrlactvType_Parse(
    const ::std::string& name, Gw_abs_sts_0x221_221_Abs_absctrlactvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_abs_sts_0x221_221_Abs_absctrlactvType>(
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_parkrelease_reqType {
  Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_NO_CONTROL = 0,
  Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_RELEASE = 1,
  Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_PARK = 2,
  Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_DYNAMIC_PARKING = 3
};
bool Ibc_status_0x122_122_Ibc_parkrelease_reqType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_parkrelease_reqType Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_MIN = Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_NO_CONTROL;
const Ibc_status_0x122_122_Ibc_parkrelease_reqType Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_MAX = Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_DYNAMIC_PARKING;
const int Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_parkrelease_reqType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_parkrelease_reqType_Name(Ibc_status_0x122_122_Ibc_parkrelease_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_parkrelease_reqType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_parkrelease_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_parkrelease_reqType>(
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType {
  Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_INVAILD = 0,
  Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_VALID = 1
};
bool Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_MIN = Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_INVAILD;
const Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_MAX = Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_VALID;
const int Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Name(Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType>(
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_brakeactiveType {
  Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_INACTIVE = 0,
  Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_ACTIVE = 1
};
bool Ibc_status_0x122_122_Ibc_brakeactiveType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_brakeactiveType Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_MIN = Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_INACTIVE;
const Ibc_status_0x122_122_Ibc_brakeactiveType Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_MAX = Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_ACTIVE;
const int Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_brakeactiveType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_brakeactiveType_Name(Ibc_status_0x122_122_Ibc_brakeactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_brakeactiveType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_brakeactiveType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_brakeactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_brakeactiveType>(
    Ibc_status_0x122_122_Ibc_brakeactiveType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_brakereqavailabeType {
  Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_NOT_AVAILABLE = 0,
  Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_AVAILABLE = 1
};
bool Ibc_status_0x122_122_Ibc_brakereqavailabeType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_brakereqavailabeType Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_MIN = Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_NOT_AVAILABLE;
const Ibc_status_0x122_122_Ibc_brakereqavailabeType Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_MAX = Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_AVAILABLE;
const int Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_brakereqavailabeType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_brakereqavailabeType_Name(Ibc_status_0x122_122_Ibc_brakereqavailabeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_brakereqavailabeType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_brakereqavailabeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_brakereqavailabeType>(
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_brakepressurereqackType {
  Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_NOT_ACK = 0,
  Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_ACK = 1
};
bool Ibc_status_0x122_122_Ibc_brakepressurereqackType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_brakepressurereqackType Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_MIN = Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_NOT_ACK;
const Ibc_status_0x122_122_Ibc_brakepressurereqackType Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_MAX = Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_ACK;
const int Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_brakepressurereqackType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_brakepressurereqackType_Name(Ibc_status_0x122_122_Ibc_brakepressurereqackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_brakepressurereqackType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_brakepressurereqackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_brakepressurereqackType>(
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_controlstatusType {
  Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0,
  Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_AVAILABLE_FOR_CONTROL = 1,
  Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_ACTIVE = 2,
  Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_PERMANENTLY_FAILED = 3
};
bool Ibc_status_0x122_122_Ibc_controlstatusType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_controlstatusType Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_MIN = Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_TEMPORARILY_INHIBIT;
const Ibc_status_0x122_122_Ibc_controlstatusType Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_MAX = Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_PERMANENTLY_FAILED;
const int Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_controlstatusType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_controlstatusType_Name(Ibc_status_0x122_122_Ibc_controlstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_controlstatusType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_controlstatusType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_controlstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_controlstatusType>(
    Ibc_status_0x122_122_Ibc_controlstatusType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_driver_interveneType {
  Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_NOT_INTERVENE = 0,
  Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_INTERVENE = 1
};
bool Ibc_status_0x122_122_Ibc_driver_interveneType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_driver_interveneType Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_MIN = Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_NOT_INTERVENE;
const Ibc_status_0x122_122_Ibc_driver_interveneType Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_MAX = Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_INTERVENE;
const int Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_driver_interveneType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_driver_interveneType_Name(Ibc_status_0x122_122_Ibc_driver_interveneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_driver_interveneType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_driver_interveneType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_driver_interveneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_driver_interveneType>(
    Ibc_status_0x122_122_Ibc_driver_interveneType_descriptor(), name, value);
}
enum Ibc_status_0x122_122_Ibc_systemstatusType {
  Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_NO_FAULT = 0,
  Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_WARING = 1,
  Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_FAULT = 2,
  Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_RESERVED = 3
};
bool Ibc_status_0x122_122_Ibc_systemstatusType_IsValid(int value);
const Ibc_status_0x122_122_Ibc_systemstatusType Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_MIN = Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_NO_FAULT;
const Ibc_status_0x122_122_Ibc_systemstatusType Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_MAX = Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_RESERVED;
const int Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_ARRAYSIZE = Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status_0x122_122_Ibc_systemstatusType_descriptor();
inline const ::std::string& Ibc_status_0x122_122_Ibc_systemstatusType_Name(Ibc_status_0x122_122_Ibc_systemstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status_0x122_122_Ibc_systemstatusType_descriptor(), value);
}
inline bool Ibc_status_0x122_122_Ibc_systemstatusType_Parse(
    const ::std::string& name, Ibc_status_0x122_122_Ibc_systemstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status_0x122_122_Ibc_systemstatusType>(
    Ibc_status_0x122_122_Ibc_systemstatusType_descriptor(), name, value);
}
enum Gw_vcu_whltq_0x107_107_Vcu_kickdownType {
  Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_NOTACTIVE = 0,
  Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_ACTIVE = 1
};
bool Gw_vcu_whltq_0x107_107_Vcu_kickdownType_IsValid(int value);
const Gw_vcu_whltq_0x107_107_Vcu_kickdownType Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_MIN = Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_NOTACTIVE;
const Gw_vcu_whltq_0x107_107_Vcu_kickdownType Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_MAX = Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_ACTIVE;
const int Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_ARRAYSIZE = Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_whltq_0x107_107_Vcu_kickdownType_descriptor();
inline const ::std::string& Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Name(Gw_vcu_whltq_0x107_107_Vcu_kickdownType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_descriptor(), value);
}
inline bool Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Parse(
    const ::std::string& name, Gw_vcu_whltq_0x107_107_Vcu_kickdownType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_whltq_0x107_107_Vcu_kickdownType>(
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_descriptor(), name, value);
}
enum Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType {
  Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_NOERROR = 0,
  Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_ERROR = 1
};
bool Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_IsValid(int value);
const Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_MIN = Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_NOERROR;
const Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_MAX = Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_ERROR;
const int Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_ARRAYSIZE = Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_descriptor();
inline const ::std::string& Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Name(Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_descriptor(), value);
}
inline bool Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Parse(
    const ::std::string& name, Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType>(
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_descriptor(), name, value);
}
enum Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType {
  Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_NOTPRESSED = 0,
  Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_PRESSED = 1,
  Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_RESERVED = 2,
  Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_ERROR = 3
};
bool Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_IsValid(int value);
const Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_MIN = Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_NOTPRESSED;
const Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_MAX = Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_ERROR;
const int Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_ARRAYSIZE = Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_descriptor();
inline const ::std::string& Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Name(Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_descriptor(), value);
}
inline bool Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Parse(
    const ::std::string& name, Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType>(
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_brakelampstatusType {
  Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_INACTIVE = 0,
  Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_ACTIVE = 1
};
bool Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_brakelampstatusType Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_INACTIVE;
const Bcm_bodysts_0x344_344_Bcm_brakelampstatusType Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_ACTIVE;
const int Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_brakelampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_brakelampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_brakelampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType {
  Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType {
  Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_washerstatusType {
  Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_washerstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_washerstatusType Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_washerstatusType Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_washerstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_washerstatusType_Name(Bcm_bodysts_0x344_344_Bcm_washerstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_washerstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_washerstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_washerstatusType>(
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_wiperstatusType {
  Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_LOW_SPEED = 2,
  Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_HIGH_SPEED = 3,
  Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_RESERVED = 7
};
bool Bcm_bodysts_0x344_344_Bcm_wiperstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_wiperstatusType Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_wiperstatusType Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_wiperstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Name(Bcm_bodysts_0x344_344_Bcm_wiperstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_wiperstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_wiperstatusType>(
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType {
  Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_LOCK_ACTION = 1,
  Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_UNLOCK_ACTION = 2,
  Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_MIN = Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_INVALID;
const Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_MAX = Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Name(Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType>(
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_hornstatusType {
  Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_hornstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_hornstatusType Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_hornstatusType Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_hornstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_hornstatusType_Name(Bcm_bodysts_0x344_344_Bcm_hornstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_hornstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_hornstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_hornstatusType>(
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_positionlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_ON = 2,
  Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_positionlampstatusType Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_positionlampstatusType Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_positionlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_positionlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_positionlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_BLINK = 2,
  Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_BLINK = 2,
  Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_descriptor(), name, value);
}
enum Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType {
  Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_INVALID = 0,
  Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_OFF = 1,
  Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_BLINK = 2,
  Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_RESERVED = 3
};
bool Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_IsValid(int value);
const Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_MIN = Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_INVALID;
const Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_MAX = Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_RESERVED;
const int Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_ARRAYSIZE = Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_descriptor();
inline const ::std::string& Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Name(Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_descriptor(), value);
}
inline bool Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Parse(
    const ::std::string& name, Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType>(
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_washercontrolType {
  Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_washercontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_washercontrolType Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_washercontrolType Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_washercontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_washercontrolType_Name(Adu_bodycontrol_0x333_333_Adu_washercontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_washercontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_washercontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_washercontrolType>(
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_wipercontrolType {
  Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_LOW_SPEED_A3_A8_B5_CD_CB_B5_A3_A9 = 2,
  Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_HIGH_SPEED_A3_A8_B8_DF_CB_B5_A3_A9 = 3,
  Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_RESERVED = 7
};
bool Adu_bodycontrol_0x333_333_Adu_wipercontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_wipercontrolType Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_wipercontrolType Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_wipercontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Name(Adu_bodycontrol_0x333_333_Adu_wipercontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_wipercontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_wipercontrolType>(
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_doorcontrolType {
  Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_LOCK = 1,
  Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_UNLOCK = 2,
  Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_doorcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_doorcontrolType Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_doorcontrolType Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_doorcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_doorcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_doorcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_doorcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_horncontrolType {
  Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_horncontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_horncontrolType Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_horncontrolType Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_horncontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_horncontrolType_Name(Adu_bodycontrol_0x333_333_Adu_horncontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_horncontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_horncontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_horncontrolType>(
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_ON = 2,
  Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_BLINK = 2,
  Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_BLINK = 2,
  Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_descriptor(), name, value);
}
enum Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType {
  Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_INVALID = 0,
  Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_OFF = 1,
  Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_BLINK = 2,
  Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_RESERVED = 3
};
bool Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_IsValid(int value);
const Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_MIN = Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_INVALID;
const Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_MAX = Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_RESERVED;
const int Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_ARRAYSIZE = Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_descriptor();
inline const ::std::string& Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Name(Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_descriptor(), value);
}
inline bool Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Parse(
    const ::std::string& name, Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType>(
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_err_levType {
  Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_NO_ERROR = 0,
  Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL1_ERROR = 1,
  Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL2_ERROR = 2,
  Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL3_ERROR = 3
};
bool Gw_bms_sts_0x181_181_Bms_err_levType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_err_levType Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_MIN = Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_NO_ERROR;
const Gw_bms_sts_0x181_181_Bms_err_levType Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_MAX = Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL3_ERROR;
const int Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_err_levType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_err_levType_Name(Gw_bms_sts_0x181_181_Bms_err_levType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_err_levType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_err_levType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_err_levType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_err_levType>(
    Gw_bms_sts_0x181_181_Bms_err_levType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_idu_statusType {
  Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_NORMAL = 0,
  Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL1_600_A6_B8_V = 1,
  Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL2_500_A6_B8_V = 2,
  Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL3_CHARGE_100_A6_B8_V_DRIVE_400_A6_B8_V = 3
};
bool Gw_bms_sts_0x181_181_Bms_idu_statusType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_idu_statusType Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_MIN = Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_NORMAL;
const Gw_bms_sts_0x181_181_Bms_idu_statusType Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_MAX = Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL3_CHARGE_100_A6_B8_V_DRIVE_400_A6_B8_V;
const int Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_idu_statusType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_idu_statusType_Name(Gw_bms_sts_0x181_181_Bms_idu_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_idu_statusType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_idu_statusType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_idu_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_idu_statusType>(
    Gw_bms_sts_0x181_181_Bms_idu_statusType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_batbalance_errType {
  Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_NORMAL = 0,
  Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_ERROR = 1
};
bool Gw_bms_sts_0x181_181_Bms_batbalance_errType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_batbalance_errType Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_MIN = Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_NORMAL;
const Gw_bms_sts_0x181_181_Bms_batbalance_errType Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_MAX = Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_ERROR;
const int Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_batbalance_errType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_batbalance_errType_Name(Gw_bms_sts_0x181_181_Bms_batbalance_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_batbalance_errType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_batbalance_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_batbalance_errType>(
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_chg_stsType {
  Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_NOT_READY = 0,
  Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_READY_TO_CHARGING = 1,
  Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGING = 2,
  Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGEERROR = 3,
  Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGEOK = 4
};
bool Gw_bms_sts_0x181_181_Bms_chg_stsType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_chg_stsType Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_MIN = Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_NOT_READY;
const Gw_bms_sts_0x181_181_Bms_chg_stsType Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_MAX = Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGEOK;
const int Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_chg_stsType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_chg_stsType_Name(Gw_bms_sts_0x181_181_Bms_chg_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_chg_stsType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_chg_stsType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_chg_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_chg_stsType>(
    Gw_bms_sts_0x181_181_Bms_chg_stsType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_balance_stsType {
  Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_INACTIVE = 0,
  Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_ACTIVE = 1
};
bool Gw_bms_sts_0x181_181_Bms_balance_stsType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_balance_stsType Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_MIN = Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_INACTIVE;
const Gw_bms_sts_0x181_181_Bms_balance_stsType Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_MAX = Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_ACTIVE;
const int Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_balance_stsType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_balance_stsType_Name(Gw_bms_sts_0x181_181_Bms_balance_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_balance_stsType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_balance_stsType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_balance_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_balance_stsType>(
    Gw_bms_sts_0x181_181_Bms_balance_stsType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_hvdown_reqType {
  Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_NO_REQUEST = 0,
  Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_REQUEST = 1
};
bool Gw_bms_sts_0x181_181_Bms_hvdown_reqType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_hvdown_reqType Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_MIN = Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_NO_REQUEST;
const Gw_bms_sts_0x181_181_Bms_hvdown_reqType Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_MAX = Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_REQUEST;
const int Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_hvdown_reqType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Name(Gw_bms_sts_0x181_181_Bms_hvdown_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_hvdown_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_hvdown_reqType>(
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_hvonoff_stsType {
  Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_HV_OFF = 0,
  Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_PRECHARGE = 1,
  Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_HV_ON = 2,
  Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_FAIL_TO_HV_ON = 3
};
bool Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_hvonoff_stsType Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_MIN = Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_HV_OFF;
const Gw_bms_sts_0x181_181_Bms_hvonoff_stsType Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_MAX = Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_FAIL_TO_HV_ON;
const int Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Name(Gw_bms_sts_0x181_181_Bms_hvonoff_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_hvonoff_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_hvonoff_stsType>(
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_descriptor(), name, value);
}
enum Gw_bms_sts_0x181_181_Bms_sys_stsType {
  Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_INIT = 0,
  Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_OK = 1,
  Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_WARNING = 2,
  Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_FAULT = 3
};
bool Gw_bms_sts_0x181_181_Bms_sys_stsType_IsValid(int value);
const Gw_bms_sts_0x181_181_Bms_sys_stsType Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_MIN = Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_INIT;
const Gw_bms_sts_0x181_181_Bms_sys_stsType Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_MAX = Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_FAULT;
const int Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_ARRAYSIZE = Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bms_sts_0x181_181_Bms_sys_stsType_descriptor();
inline const ::std::string& Gw_bms_sts_0x181_181_Bms_sys_stsType_Name(Gw_bms_sts_0x181_181_Bms_sys_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bms_sts_0x181_181_Bms_sys_stsType_descriptor(), value);
}
inline bool Gw_bms_sts_0x181_181_Bms_sys_stsType_Parse(
    const ::std::string& name, Gw_bms_sts_0x181_181_Bms_sys_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bms_sts_0x181_181_Bms_sys_stsType>(
    Gw_bms_sts_0x181_181_Bms_sys_stsType_descriptor(), name, value);
}
enum Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType {
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STOPPED = 0,
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_RUNNING = 1,
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_IDLE = 2,
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_DFCO = 3,
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_CRANKING = 4,
  Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STALLING = 5
};
bool Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_IsValid(int value);
const Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_MIN = Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STOPPED;
const Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_MAX = Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STALLING;
const int Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_ARRAYSIZE = Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_descriptor();
inline const ::std::string& Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Name(Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_descriptor(), value);
}
inline bool Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Parse(
    const ::std::string& name, Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType>(
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_descriptor(), name, value);
}
enum Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType {
  Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_ON = 0,
  Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_OFF = 1
};
bool Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_IsValid(int value);
const Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_MIN = Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_ON;
const Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_MAX = Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_OFF;
const int Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_ARRAYSIZE = Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_descriptor();
inline const ::std::string& Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Name(Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_descriptor(), value);
}
inline bool Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Parse(
    const ::std::string& name, Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType>(
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_descriptor(), name, value);
}
enum Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType {
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_DISABLE = 0,
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_STANDBY = 1,
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_SPEEDMODE = 2,
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_TORQUEMODE = 3,
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_ANTISLIP = 4,
  Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_ALOFFSETCAL = 5
};
bool Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_IsValid(int value);
const Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_MIN = Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_DISABLE;
const Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_MAX = Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_ALOFFSETCAL;
const int Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_ARRAYSIZE = Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_descriptor();
inline const ::std::string& Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Name(Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_descriptor(), value);
}
inline bool Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Parse(
    const ::std::string& name, Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType>(
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_descriptor(), name, value);
}
enum Ibc_status2_0x124_124_Ibc_decelerationvaildType {
  Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_INVAILD = 0,
  Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_VALID = 1
};
bool Ibc_status2_0x124_124_Ibc_decelerationvaildType_IsValid(int value);
const Ibc_status2_0x124_124_Ibc_decelerationvaildType Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_MIN = Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_INVAILD;
const Ibc_status2_0x124_124_Ibc_decelerationvaildType Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_MAX = Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_VALID;
const int Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_ARRAYSIZE = Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status2_0x124_124_Ibc_decelerationvaildType_descriptor();
inline const ::std::string& Ibc_status2_0x124_124_Ibc_decelerationvaildType_Name(Ibc_status2_0x124_124_Ibc_decelerationvaildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_descriptor(), value);
}
inline bool Ibc_status2_0x124_124_Ibc_decelerationvaildType_Parse(
    const ::std::string& name, Ibc_status2_0x124_124_Ibc_decelerationvaildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status2_0x124_124_Ibc_decelerationvaildType>(
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_descriptor(), name, value);
}
enum Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType {
  Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_INVAILD = 0,
  Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_VALID = 1
};
bool Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IsValid(int value);
const Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_MIN = Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_INVAILD;
const Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_MAX = Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_VALID;
const int Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_ARRAYSIZE = Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_descriptor();
inline const ::std::string& Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Name(Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_descriptor(), value);
}
inline bool Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Parse(
    const ::std::string& name, Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType>(
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_VehiclehvstatusType {
  Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_NOT_READY = 0,
  Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_HV_ON = 1,
  Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_READYTODRIVE = 2,
  Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_RESERVED = 3
};
bool Gw_vcu_hmi_0x358_358_VehiclehvstatusType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_VehiclehvstatusType Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_MIN = Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_NOT_READY;
const Gw_vcu_hmi_0x358_358_VehiclehvstatusType Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_MAX = Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_RESERVED;
const int Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_VehiclehvstatusType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_VehiclehvstatusType_Name(Gw_vcu_hmi_0x358_358_VehiclehvstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_VehiclehvstatusType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_VehiclehvstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_VehiclehvstatusType>(
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType {
  Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_MIN = Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_NORMAL;
const Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_MAX = Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_ERROR;
const int Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_Name(Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType>(
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_PackheatstatusType {
  Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_INACTIVE = 0,
  Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_ACTIVE = 1
};
bool Gw_vcu_hmi_0x358_358_PackheatstatusType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_PackheatstatusType Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_MIN = Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_INACTIVE;
const Gw_vcu_hmi_0x358_358_PackheatstatusType Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_MAX = Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_ACTIVE;
const int Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_PackheatstatusType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_PackheatstatusType_Name(Gw_vcu_hmi_0x358_358_PackheatstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_PackheatstatusType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_PackheatstatusType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_PackheatstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_PackheatstatusType>(
    Gw_vcu_hmi_0x358_358_PackheatstatusType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType {
  Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_MIN = Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_NORMAL;
const Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_MAX = Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_ERROR;
const int Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_Name(Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType>(
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType {
  Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_MIN = Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_NORMAL;
const Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_MAX = Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_ERROR;
const int Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_Name(Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType>(
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType {
  Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_NO_WARNING = 0,
  Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_WARNING = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_MIN = Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_NO_WARNING;
const Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_MAX = Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_WARNING;
const int Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Name(Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType>(
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType {
  Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_CRUISECONTROLOOFF = 0,
  Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_ACTIVE = 1,
  Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_STANDBY = 2,
  Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_ERROR = 3
};
bool Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_MIN = Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_CRUISECONTROLOOFF;
const Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_MAX = Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Name(Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType>(
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType {
  Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_NO_DRIVE = 0,
  Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_DRIVE_MODE = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_MIN = Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_NO_DRIVE;
const Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_MAX = Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_DRIVE_MODE;
const int Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Name(Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType>(
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType {
  Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_INVALID = 0,
  Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_EV = 1,
  Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_HEV = 2,
  Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_FUEL = 3
};
bool Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_MIN = Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_INVALID;
const Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_MAX = Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_FUEL;
const int Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Name(Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType>(
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType {
  Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_INVALID = 0,
  Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_STOPCHARGE = 1,
  Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_DRIVECHARGE = 2,
  Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_NOCHARGE = 3,
  Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_CHARGECOMPLETED = 4
};
bool Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_MIN = Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_INVALID;
const Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_MAX = Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_CHARGECOMPLETED;
const int Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Name(Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType>(
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType {
  Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_INVALID = 0,
  Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_START = 1,
  Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_OFF = 2,
  Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_OTHER = 3
};
bool Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_MIN = Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_INVALID;
const Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_MAX = Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_OTHER;
const int Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Name(Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType>(
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_NO = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL1 = 1,
  Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL2 = 2,
  Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL3 = 3
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_NO;
const Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL3;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_NO_WARNING = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_PLEASE_SET_GEARPOSITION_TO_PARK = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_NO_WARNING;
const Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_PLEASE_SET_GEARPOSITION_TO_PARK;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_descriptor(), name, value);
}
enum Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType {
  Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_NORMAL = 0,
  Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_ERROR = 1
};
bool Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_IsValid(int value);
const Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_MIN = Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_NORMAL;
const Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_MAX = Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_ERROR;
const int Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_ARRAYSIZE = Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_descriptor();
inline const ::std::string& Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Name(Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_descriptor(), value);
}
inline bool Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Parse(
    const ::std::string& name, Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType>(
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_descriptor(), name, value);
}
// ===================================================================

class Epb_status_0x152_152 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Epb_status_0x152_152) */ {
 public:
  Epb_status_0x152_152();
  virtual ~Epb_status_0x152_152();

  Epb_status_0x152_152(const Epb_status_0x152_152& from);

  inline Epb_status_0x152_152& operator=(const Epb_status_0x152_152& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Epb_status_0x152_152& default_instance();

  static inline const Epb_status_0x152_152* internal_default_instance() {
    return reinterpret_cast<const Epb_status_0x152_152*>(
               &_Epb_status_0x152_152_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Epb_status_0x152_152* other);

  // implements Message ----------------------------------------------

  inline Epb_status_0x152_152* New() const PROTOBUF_FINAL { return New(NULL); }

  Epb_status_0x152_152* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Epb_status_0x152_152& from);
  void MergeFrom(const Epb_status_0x152_152& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Epb_status_0x152_152* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Epb_status_0x152_152_Epb_brakelampreqType Epb_brakelampreqType;
  static const Epb_brakelampreqType EPB_BRAKELAMPREQ_BRAKE_LAMP_OFF =
    Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_OFF;
  static const Epb_brakelampreqType EPB_BRAKELAMPREQ_BRAKE_LAMP_ON =
    Epb_status_0x152_152_Epb_brakelampreqType_EPB_BRAKELAMPREQ_BRAKE_LAMP_ON;
  static inline bool Epb_brakelampreqType_IsValid(int value) {
    return Epb_status_0x152_152_Epb_brakelampreqType_IsValid(value);
  }
  static const Epb_brakelampreqType Epb_brakelampreqType_MIN =
    Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_MIN;
  static const Epb_brakelampreqType Epb_brakelampreqType_MAX =
    Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_MAX;
  static const int Epb_brakelampreqType_ARRAYSIZE =
    Epb_status_0x152_152_Epb_brakelampreqType_Epb_brakelampreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_brakelampreqType_descriptor() {
    return Epb_status_0x152_152_Epb_brakelampreqType_descriptor();
  }
  static inline const ::std::string& Epb_brakelampreqType_Name(Epb_brakelampreqType value) {
    return Epb_status_0x152_152_Epb_brakelampreqType_Name(value);
  }
  static inline bool Epb_brakelampreqType_Parse(const ::std::string& name,
      Epb_brakelampreqType* value) {
    return Epb_status_0x152_152_Epb_brakelampreqType_Parse(name, value);
  }

  typedef Epb_status_0x152_152_Epb_sysfaultstatusType Epb_sysfaultstatusType;
  static const Epb_sysfaultstatusType EPB_SYSFAULTSTATUS_NO_FAULT =
    Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_NO_FAULT;
  static const Epb_sysfaultstatusType EPB_SYSFAULTSTATUS_WARNING =
    Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_WARNING;
  static const Epb_sysfaultstatusType EPB_SYSFAULTSTATUS_FAULT =
    Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_FAULT;
  static const Epb_sysfaultstatusType EPB_SYSFAULTSTATUS_RESEVED =
    Epb_status_0x152_152_Epb_sysfaultstatusType_EPB_SYSFAULTSTATUS_RESEVED;
  static inline bool Epb_sysfaultstatusType_IsValid(int value) {
    return Epb_status_0x152_152_Epb_sysfaultstatusType_IsValid(value);
  }
  static const Epb_sysfaultstatusType Epb_sysfaultstatusType_MIN =
    Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_MIN;
  static const Epb_sysfaultstatusType Epb_sysfaultstatusType_MAX =
    Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_MAX;
  static const int Epb_sysfaultstatusType_ARRAYSIZE =
    Epb_status_0x152_152_Epb_sysfaultstatusType_Epb_sysfaultstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_sysfaultstatusType_descriptor() {
    return Epb_status_0x152_152_Epb_sysfaultstatusType_descriptor();
  }
  static inline const ::std::string& Epb_sysfaultstatusType_Name(Epb_sysfaultstatusType value) {
    return Epb_status_0x152_152_Epb_sysfaultstatusType_Name(value);
  }
  static inline bool Epb_sysfaultstatusType_Parse(const ::std::string& name,
      Epb_sysfaultstatusType* value) {
    return Epb_status_0x152_152_Epb_sysfaultstatusType_Parse(name, value);
  }

  typedef Epb_status_0x152_152_Epb_parkingstatusType Epb_parkingstatusType;
  static const Epb_parkingstatusType EPB_PARKINGSTATUS_RELEASED =
    Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_RELEASED;
  static const Epb_parkingstatusType EPB_PARKINGSTATUS_RELEASE_ONGOING =
    Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_RELEASE_ONGOING;
  static const Epb_parkingstatusType EPB_PARKINGSTATUS_PARK_ONGOING =
    Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_PARK_ONGOING;
  static const Epb_parkingstatusType EPB_PARKINGSTATUS_PARKED =
    Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_PARKED;
  static const Epb_parkingstatusType EPB_PARKINGSTATUS_UNKOWN =
    Epb_status_0x152_152_Epb_parkingstatusType_EPB_PARKINGSTATUS_UNKOWN;
  static inline bool Epb_parkingstatusType_IsValid(int value) {
    return Epb_status_0x152_152_Epb_parkingstatusType_IsValid(value);
  }
  static const Epb_parkingstatusType Epb_parkingstatusType_MIN =
    Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_MIN;
  static const Epb_parkingstatusType Epb_parkingstatusType_MAX =
    Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_MAX;
  static const int Epb_parkingstatusType_ARRAYSIZE =
    Epb_status_0x152_152_Epb_parkingstatusType_Epb_parkingstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_parkingstatusType_descriptor() {
    return Epb_status_0x152_152_Epb_parkingstatusType_descriptor();
  }
  static inline const ::std::string& Epb_parkingstatusType_Name(Epb_parkingstatusType value) {
    return Epb_status_0x152_152_Epb_parkingstatusType_Name(value);
  }
  static inline bool Epb_parkingstatusType_Parse(const ::std::string& name,
      Epb_parkingstatusType* value) {
    return Epb_status_0x152_152_Epb_parkingstatusType_Parse(name, value);
  }

  typedef Epb_status_0x152_152_Epb_switchstatusType Epb_switchstatusType;
  static const Epb_switchstatusType EPB_SWITCHSTATUS_NO_ACTION_ON_SWITCH =
    Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_NO_ACTION_ON_SWITCH;
  static const Epb_switchstatusType EPB_SWITCHSTATUS_SWITCH_TO_RELEASE =
    Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_SWITCH_TO_RELEASE;
  static const Epb_switchstatusType EPB_SWITCHSTATUS_SWITCH_TO_PARK =
    Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_SWITCH_TO_PARK;
  static const Epb_switchstatusType EPB_SWITCHSTATUS_RESERVED =
    Epb_status_0x152_152_Epb_switchstatusType_EPB_SWITCHSTATUS_RESERVED;
  static inline bool Epb_switchstatusType_IsValid(int value) {
    return Epb_status_0x152_152_Epb_switchstatusType_IsValid(value);
  }
  static const Epb_switchstatusType Epb_switchstatusType_MIN =
    Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_MIN;
  static const Epb_switchstatusType Epb_switchstatusType_MAX =
    Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_MAX;
  static const int Epb_switchstatusType_ARRAYSIZE =
    Epb_status_0x152_152_Epb_switchstatusType_Epb_switchstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_switchstatusType_descriptor() {
    return Epb_status_0x152_152_Epb_switchstatusType_descriptor();
  }
  static inline const ::std::string& Epb_switchstatusType_Name(Epb_switchstatusType value) {
    return Epb_status_0x152_152_Epb_switchstatusType_Name(value);
  }
  static inline bool Epb_switchstatusType_Parse(const ::std::string& name,
      Epb_switchstatusType* value) {
    return Epb_status_0x152_152_Epb_switchstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x152 = 1;
  bool has_checksum_0x152() const;
  void clear_checksum_0x152();
  static const int kChecksum0X152FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x152() const;
  void set_checksum_0x152(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x152 = 2;
  bool has_rolling_counter_0x152() const;
  void clear_rolling_counter_0x152();
  static const int kRollingCounter0X152FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x152() const;
  void set_rolling_counter_0x152(::google::protobuf::int32 value);

  // optional int32 epb_faultcode = 3;
  bool has_epb_faultcode() const;
  void clear_epb_faultcode();
  static const int kEpbFaultcodeFieldNumber = 3;
  ::google::protobuf::int32 epb_faultcode() const;
  void set_epb_faultcode(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_brakelampreqType epb_brakelampreq = 4;
  bool has_epb_brakelampreq() const;
  void clear_epb_brakelampreq();
  static const int kEpbBrakelampreqFieldNumber = 4;
  ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType epb_brakelampreq() const;
  void set_epb_brakelampreq(::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType value);

  // optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_sysfaultstatusType epb_sysfaultstatus = 5;
  bool has_epb_sysfaultstatus() const;
  void clear_epb_sysfaultstatus();
  static const int kEpbSysfaultstatusFieldNumber = 5;
  ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType epb_sysfaultstatus() const;
  void set_epb_sysfaultstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType value);

  // optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_parkingstatusType epb_parkingstatus = 6;
  bool has_epb_parkingstatus() const;
  void clear_epb_parkingstatus();
  static const int kEpbParkingstatusFieldNumber = 6;
  ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType epb_parkingstatus() const;
  void set_epb_parkingstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType value);

  // optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_switchstatusType epb_switchstatus = 7;
  bool has_epb_switchstatus() const;
  void clear_epb_switchstatus();
  static const int kEpbSwitchstatusFieldNumber = 7;
  ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType epb_switchstatus() const;
  void set_epb_switchstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Epb_status_0x152_152)
 private:
  void set_has_checksum_0x152();
  void clear_has_checksum_0x152();
  void set_has_rolling_counter_0x152();
  void clear_has_rolling_counter_0x152();
  void set_has_epb_faultcode();
  void clear_has_epb_faultcode();
  void set_has_epb_brakelampreq();
  void clear_has_epb_brakelampreq();
  void set_has_epb_sysfaultstatus();
  void clear_has_epb_sysfaultstatus();
  void set_has_epb_parkingstatus();
  void clear_has_epb_parkingstatus();
  void set_has_epb_switchstatus();
  void clear_has_epb_switchstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x152_;
  ::google::protobuf::int32 rolling_counter_0x152_;
  ::google::protobuf::int32 epb_faultcode_;
  int epb_brakelampreq_;
  int epb_sysfaultstatus_;
  int epb_parkingstatus_;
  int epb_switchstatus_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_abs_0x211_211 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_abs_0x211_211) */ {
 public:
  Gw_abs_0x211_211();
  virtual ~Gw_abs_0x211_211();

  Gw_abs_0x211_211(const Gw_abs_0x211_211& from);

  inline Gw_abs_0x211_211& operator=(const Gw_abs_0x211_211& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_abs_0x211_211& default_instance();

  static inline const Gw_abs_0x211_211* internal_default_instance() {
    return reinterpret_cast<const Gw_abs_0x211_211*>(
               &_Gw_abs_0x211_211_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Gw_abs_0x211_211* other);

  // implements Message ----------------------------------------------

  inline Gw_abs_0x211_211* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_abs_0x211_211* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_abs_0x211_211& from);
  void MergeFrom(const Gw_abs_0x211_211& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_abs_0x211_211* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_abs_0x211_211_Abs_whlspdreristatusType Abs_whlspdreristatusType;
  static const Abs_whlspdreristatusType ABS_WHLSPDRERISTATUS_VALID =
    Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID;
  static const Abs_whlspdreristatusType ABS_WHLSPDRERISTATUS_INVALID =
    Gw_abs_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID;
  static inline bool Abs_whlspdreristatusType_IsValid(int value) {
    return Gw_abs_0x211_211_Abs_whlspdreristatusType_IsValid(value);
  }
  static const Abs_whlspdreristatusType Abs_whlspdreristatusType_MIN =
    Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MIN;
  static const Abs_whlspdreristatusType Abs_whlspdreristatusType_MAX =
    Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX;
  static const int Abs_whlspdreristatusType_ARRAYSIZE =
    Gw_abs_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdreristatusType_descriptor() {
    return Gw_abs_0x211_211_Abs_whlspdreristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdreristatusType_Name(Abs_whlspdreristatusType value) {
    return Gw_abs_0x211_211_Abs_whlspdreristatusType_Name(value);
  }
  static inline bool Abs_whlspdreristatusType_Parse(const ::std::string& name,
      Abs_whlspdreristatusType* value) {
    return Gw_abs_0x211_211_Abs_whlspdreristatusType_Parse(name, value);
  }

  typedef Gw_abs_0x211_211_Abs_whlspdrelestatusType Abs_whlspdrelestatusType;
  static const Abs_whlspdrelestatusType ABS_WHLSPDRELESTATUS_VALID =
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID;
  static const Abs_whlspdrelestatusType ABS_WHLSPDRELESTATUS_INVALID =
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID;
  static inline bool Abs_whlspdrelestatusType_IsValid(int value) {
    return Gw_abs_0x211_211_Abs_whlspdrelestatusType_IsValid(value);
  }
  static const Abs_whlspdrelestatusType Abs_whlspdrelestatusType_MIN =
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MIN;
  static const Abs_whlspdrelestatusType Abs_whlspdrelestatusType_MAX =
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX;
  static const int Abs_whlspdrelestatusType_ARRAYSIZE =
    Gw_abs_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdrelestatusType_descriptor() {
    return Gw_abs_0x211_211_Abs_whlspdrelestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdrelestatusType_Name(Abs_whlspdrelestatusType value) {
    return Gw_abs_0x211_211_Abs_whlspdrelestatusType_Name(value);
  }
  static inline bool Abs_whlspdrelestatusType_Parse(const ::std::string& name,
      Abs_whlspdrelestatusType* value) {
    return Gw_abs_0x211_211_Abs_whlspdrelestatusType_Parse(name, value);
  }

  typedef Gw_abs_0x211_211_Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType;
  static const Abs_whlspdfrntristatusType ABS_WHLSPDFRNTRISTATUS_VALID =
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID;
  static const Abs_whlspdfrntristatusType ABS_WHLSPDFRNTRISTATUS_INVALID =
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID;
  static inline bool Abs_whlspdfrntristatusType_IsValid(int value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntristatusType_IsValid(value);
  }
  static const Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType_MIN =
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MIN;
  static const Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType_MAX =
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX;
  static const int Abs_whlspdfrntristatusType_ARRAYSIZE =
    Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdfrntristatusType_descriptor() {
    return Gw_abs_0x211_211_Abs_whlspdfrntristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdfrntristatusType_Name(Abs_whlspdfrntristatusType value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Name(value);
  }
  static inline bool Abs_whlspdfrntristatusType_Parse(const ::std::string& name,
      Abs_whlspdfrntristatusType* value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntristatusType_Parse(name, value);
  }

  typedef Gw_abs_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType;
  static const Abs_whlspdfrntlestatusType ABS_WHLSPDFRNTLESTATUS_VALID =
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID;
  static const Abs_whlspdfrntlestatusType ABS_WHLSPDFRNTLESTATUS_INVALID =
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID;
  static inline bool Abs_whlspdfrntlestatusType_IsValid(int value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value);
  }
  static const Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType_MIN =
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MIN;
  static const Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType_MAX =
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX;
  static const int Abs_whlspdfrntlestatusType_ARRAYSIZE =
    Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdfrntlestatusType_descriptor() {
    return Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdfrntlestatusType_Name(Abs_whlspdfrntlestatusType value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Name(value);
  }
  static inline bool Abs_whlspdfrntlestatusType_Parse(const ::std::string& name,
      Abs_whlspdfrntlestatusType* value) {
    return Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x211 = 1;
  bool has_checksum_0x211() const;
  void clear_checksum_0x211();
  static const int kChecksum0X211FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x211() const;
  void set_checksum_0x211(::google::protobuf::int32 value);

  // optional int32 rollingcounter_0x211 = 2;
  bool has_rollingcounter_0x211() const;
  void clear_rollingcounter_0x211();
  static const int kRollingcounter0X211FieldNumber = 2;
  ::google::protobuf::int32 rollingcounter_0x211() const;
  void set_rollingcounter_0x211(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 3;
  bool has_abs_whlspdreristatus() const;
  void clear_abs_whlspdreristatus();
  static const int kAbsWhlspdreristatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType abs_whlspdreristatus() const;
  void set_abs_whlspdreristatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType value);

  // optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 4;
  bool has_abs_whlspdrelestatus() const;
  void clear_abs_whlspdrelestatus();
  static const int kAbsWhlspdrelestatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType abs_whlspdrelestatus() const;
  void set_abs_whlspdrelestatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType value);

  // optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 5;
  bool has_abs_whlspdfrntristatus() const;
  void clear_abs_whlspdfrntristatus();
  static const int kAbsWhlspdfrntristatusFieldNumber = 5;
  ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType abs_whlspdfrntristatus() const;
  void set_abs_whlspdfrntristatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType value);

  // optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 6;
  bool has_abs_whlspdfrntlestatus() const;
  void clear_abs_whlspdfrntlestatus();
  static const int kAbsWhlspdfrntlestatusFieldNumber = 6;
  ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus() const;
  void set_abs_whlspdfrntlestatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType value);

  // optional double abs_whlspdreri = 7;
  bool has_abs_whlspdreri() const;
  void clear_abs_whlspdreri();
  static const int kAbsWhlspdreriFieldNumber = 7;
  double abs_whlspdreri() const;
  void set_abs_whlspdreri(double value);

  // optional double abs_whlspdrele = 8;
  bool has_abs_whlspdrele() const;
  void clear_abs_whlspdrele();
  static const int kAbsWhlspdreleFieldNumber = 8;
  double abs_whlspdrele() const;
  void set_abs_whlspdrele(double value);

  // optional double abs_whlspdfrntri = 9;
  bool has_abs_whlspdfrntri() const;
  void clear_abs_whlspdfrntri();
  static const int kAbsWhlspdfrntriFieldNumber = 9;
  double abs_whlspdfrntri() const;
  void set_abs_whlspdfrntri(double value);

  // optional double abs_whlspdfrntle = 10;
  bool has_abs_whlspdfrntle() const;
  void clear_abs_whlspdfrntle();
  static const int kAbsWhlspdfrntleFieldNumber = 10;
  double abs_whlspdfrntle() const;
  void set_abs_whlspdfrntle(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_abs_0x211_211)
 private:
  void set_has_checksum_0x211();
  void clear_has_checksum_0x211();
  void set_has_rollingcounter_0x211();
  void clear_has_rollingcounter_0x211();
  void set_has_abs_whlspdreristatus();
  void clear_has_abs_whlspdreristatus();
  void set_has_abs_whlspdrelestatus();
  void clear_has_abs_whlspdrelestatus();
  void set_has_abs_whlspdfrntristatus();
  void clear_has_abs_whlspdfrntristatus();
  void set_has_abs_whlspdfrntlestatus();
  void clear_has_abs_whlspdfrntlestatus();
  void set_has_abs_whlspdreri();
  void clear_has_abs_whlspdreri();
  void set_has_abs_whlspdrele();
  void clear_has_abs_whlspdrele();
  void set_has_abs_whlspdfrntri();
  void clear_has_abs_whlspdfrntri();
  void set_has_abs_whlspdfrntle();
  void clear_has_abs_whlspdfrntle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x211_;
  ::google::protobuf::int32 rollingcounter_0x211_;
  int abs_whlspdreristatus_;
  int abs_whlspdrelestatus_;
  int abs_whlspdfrntristatus_;
  int abs_whlspdfrntlestatus_;
  double abs_whlspdreri_;
  double abs_whlspdrele_;
  double abs_whlspdfrntri_;
  double abs_whlspdfrntle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bcm_door_0x310_310 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Bcm_door_0x310_310) */ {
 public:
  Bcm_door_0x310_310();
  virtual ~Bcm_door_0x310_310();

  Bcm_door_0x310_310(const Bcm_door_0x310_310& from);

  inline Bcm_door_0x310_310& operator=(const Bcm_door_0x310_310& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bcm_door_0x310_310& default_instance();

  static inline const Bcm_door_0x310_310* internal_default_instance() {
    return reinterpret_cast<const Bcm_door_0x310_310*>(
               &_Bcm_door_0x310_310_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Bcm_door_0x310_310* other);

  // implements Message ----------------------------------------------

  inline Bcm_door_0x310_310* New() const PROTOBUF_FINAL { return New(NULL); }

  Bcm_door_0x310_310* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bcm_door_0x310_310& from);
  void MergeFrom(const Bcm_door_0x310_310& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bcm_door_0x310_310* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bcm_door_0x310_310_Bcm_rearwiperstsType Bcm_rearwiperstsType;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_NO_USED =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_OFF =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_OFF;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_ON =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_ON;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_RESERVED =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED;
  static inline bool Bcm_rearwiperstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value);
  }
  static const Bcm_rearwiperstsType Bcm_rearwiperstsType_MIN =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MIN;
  static const Bcm_rearwiperstsType Bcm_rearwiperstsType_MAX =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX;
  static const int Bcm_rearwiperstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rearwiperstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
  }
  static inline const ::std::string& Bcm_rearwiperstsType_Name(Bcm_rearwiperstsType value) {
    return Bcm_door_0x310_310_Bcm_rearwiperstsType_Name(value);
  }
  static inline bool Bcm_rearwiperstsType_Parse(const ::std::string& name,
      Bcm_rearwiperstsType* value) {
    return Bcm_door_0x310_310_Bcm_rearwiperstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_frontwiperstsType Bcm_frontwiperstsType;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_NO_USED =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_OFF =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_OFF;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_LOW =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_LOW;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_HIGH =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH;
  static inline bool Bcm_frontwiperstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value);
  }
  static const Bcm_frontwiperstsType Bcm_frontwiperstsType_MIN =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MIN;
  static const Bcm_frontwiperstsType Bcm_frontwiperstsType_MAX =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX;
  static const int Bcm_frontwiperstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_frontwiperstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
  }
  static inline const ::std::string& Bcm_frontwiperstsType_Name(Bcm_frontwiperstsType value) {
    return Bcm_door_0x310_310_Bcm_frontwiperstsType_Name(value);
  }
  static inline bool Bcm_frontwiperstsType_Parse(const ::std::string& name,
      Bcm_frontwiperstsType* value) {
    return Bcm_door_0x310_310_Bcm_frontwiperstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_chargeplugstsType Bcm_chargeplugstsType;
  static const Bcm_chargeplugstsType BCM_CHARGEPLUGSTS_NO_USED =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_NO_USED;
  static const Bcm_chargeplugstsType BCM_CHARGEPLUGSTS_CLOSED =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_CLOSED;
  static const Bcm_chargeplugstsType BCM_CHARGEPLUGSTS_OPEN =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_OPEN;
  static const Bcm_chargeplugstsType BCM_CHARGEPLUGSTS_FAULT =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_BCM_CHARGEPLUGSTS_FAULT;
  static inline bool Bcm_chargeplugstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_chargeplugstsType_IsValid(value);
  }
  static const Bcm_chargeplugstsType Bcm_chargeplugstsType_MIN =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_MIN;
  static const Bcm_chargeplugstsType Bcm_chargeplugstsType_MAX =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_MAX;
  static const int Bcm_chargeplugstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_chargeplugstsType_Bcm_chargeplugstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_chargeplugstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_chargeplugstsType_descriptor();
  }
  static inline const ::std::string& Bcm_chargeplugstsType_Name(Bcm_chargeplugstsType value) {
    return Bcm_door_0x310_310_Bcm_chargeplugstsType_Name(value);
  }
  static inline bool Bcm_chargeplugstsType_Parse(const ::std::string& name,
      Bcm_chargeplugstsType* value) {
    return Bcm_door_0x310_310_Bcm_chargeplugstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_enginehoodstsType Bcm_enginehoodstsType;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_NO_USED =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_CLOSED =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_CLOSED;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_OPEN =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_OPEN;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_FAULT =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT;
  static inline bool Bcm_enginehoodstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value);
  }
  static const Bcm_enginehoodstsType Bcm_enginehoodstsType_MIN =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MIN;
  static const Bcm_enginehoodstsType Bcm_enginehoodstsType_MAX =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX;
  static const int Bcm_enginehoodstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_enginehoodstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
  }
  static inline const ::std::string& Bcm_enginehoodstsType_Name(Bcm_enginehoodstsType value) {
    return Bcm_door_0x310_310_Bcm_enginehoodstsType_Name(value);
  }
  static inline bool Bcm_enginehoodstsType_Parse(const ::std::string& name,
      Bcm_enginehoodstsType* value) {
    return Bcm_door_0x310_310_Bcm_enginehoodstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType;
  static const Bcm_trunkdoorpreunlockstsType BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION =
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION;
  static const Bcm_trunkdoorpreunlockstsType BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED =
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED;
  static inline bool Bcm_trunkdoorpreunlockstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value);
  }
  static const Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType_MIN =
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MIN;
  static const Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType_MAX =
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX;
  static const int Bcm_trunkdoorpreunlockstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_trunkdoorpreunlockstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
  }
  static inline const ::std::string& Bcm_trunkdoorpreunlockstsType_Name(Bcm_trunkdoorpreunlockstsType value) {
    return Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Name(value);
  }
  static inline bool Bcm_trunkdoorpreunlockstsType_Parse(const ::std::string& name,
      Bcm_trunkdoorpreunlockstsType* value) {
    return Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_antitheftstsType Bcm_antitheftstsType;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_RELIEVE_ANTI_THEFT =
    Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_RELIEVE_ANTI_THEFT;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_ANTI_THEFT =
    Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_ANTI_THEFT_PASS =
    Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT_PASS;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_ANTI_THEFT_FAULT_ALARM =
    Bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ANTI_THEFT_FAULT_ALARM;
  static inline bool Bcm_antitheftstsType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value);
  }
  static const Bcm_antitheftstsType Bcm_antitheftstsType_MIN =
    Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MIN;
  static const Bcm_antitheftstsType Bcm_antitheftstsType_MAX =
    Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX;
  static const int Bcm_antitheftstsType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_antitheftstsType_descriptor() {
    return Bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
  }
  static inline const ::std::string& Bcm_antitheftstsType_Name(Bcm_antitheftstsType value) {
    return Bcm_door_0x310_310_Bcm_antitheftstsType_Name(value);
  }
  static inline bool Bcm_antitheftstsType_Parse(const ::std::string& name,
      Bcm_antitheftstsType* value) {
    return Bcm_door_0x310_310_Bcm_antitheftstsType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_LOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK_D6_D8_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK_D6_D8_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK_BB_FA_B3_D7_C9_CF_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK_BB_FA_B3_D7_C9_CF_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK_BF_D8_D7_AF_BB_C0 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK_BF_D8_D7_AF_BB_C0;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK_D6_E2_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK_D6_E2_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK_BB_FA_B3_E2_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK_BB_FA_B3_E2_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK_C5_F6_BD_E2_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK_C5_F6_BD_E2_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK_B0_CE_B3_E2_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK_B0_CE_B3_E2_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK_BB_F0_BD_E2_CB_F8 =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK_BB_F0_BD_E2_CB_F8;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK;
  static inline bool Bcm_lockunlockfeedbackType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value);
  }
  static const Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType_MIN =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MIN;
  static const Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType_MAX =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX;
  static const int Bcm_lockunlockfeedbackType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_lockunlockfeedbackType_descriptor() {
    return Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
  }
  static inline const ::std::string& Bcm_lockunlockfeedbackType_Name(Bcm_lockunlockfeedbackType value) {
    return Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Name(value);
  }
  static inline bool Bcm_lockunlockfeedbackType_Parse(const ::std::string& name,
      Bcm_lockunlockfeedbackType* value) {
    return Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorlockststrunkType Bcm_doorlockststrunkType;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_NO_USED =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_LOCKED =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_LOCKED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_UNLOCKED =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_UNLOCKED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_FAULT =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT;
  static inline bool Bcm_doorlockststrunkType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value);
  }
  static const Bcm_doorlockststrunkType Bcm_doorlockststrunkType_MIN =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MIN;
  static const Bcm_doorlockststrunkType Bcm_doorlockststrunkType_MAX =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX;
  static const int Bcm_doorlockststrunkType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockststrunkType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockststrunkType_Name(Bcm_doorlockststrunkType value) {
    return Bcm_door_0x310_310_Bcm_doorlockststrunkType_Name(value);
  }
  static inline bool Bcm_doorlockststrunkType_Parse(const ::std::string& name,
      Bcm_doorlockststrunkType* value) {
    return Bcm_door_0x310_310_Bcm_doorlockststrunkType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorststrunkType Bcm_doorststrunkType;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_NO_USED =
    Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_CLOSED =
    Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_CLOSED;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_OPEN =
    Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_OPEN;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_FAULT =
    Bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT;
  static inline bool Bcm_doorststrunkType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value);
  }
  static const Bcm_doorststrunkType Bcm_doorststrunkType_MIN =
    Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MIN;
  static const Bcm_doorststrunkType Bcm_doorststrunkType_MAX =
    Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX;
  static const int Bcm_doorststrunkType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorststrunkType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
  }
  static inline const ::std::string& Bcm_doorststrunkType_Name(Bcm_doorststrunkType value) {
    return Bcm_door_0x310_310_Bcm_doorststrunkType_Name(value);
  }
  static inline bool Bcm_doorststrunkType_Parse(const ::std::string& name,
      Bcm_doorststrunkType* value) {
    return Bcm_door_0x310_310_Bcm_doorststrunkType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_NO_USED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_LOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_LOCKED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_UNLOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_UNLOCKED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_FAULT =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT;
  static inline bool Bcm_doorlockstsrearriType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value);
  }
  static const Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType_MIN =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MIN;
  static const Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType_MAX =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX;
  static const int Bcm_doorlockstsrearriType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsrearriType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsrearriType_Name(Bcm_doorlockstsrearriType value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Name(value);
  }
  static inline bool Bcm_doorlockstsrearriType_Parse(const ::std::string& name,
      Bcm_doorlockstsrearriType* value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearriType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_NO_USED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_LOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_LOCKED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_UNLOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_UNLOCKED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_FAULT =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT;
  static inline bool Bcm_doorlockstsrearleType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value);
  }
  static const Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType_MIN =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MIN;
  static const Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType_MAX =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX;
  static const int Bcm_doorlockstsrearleType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsrearleType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsrearleType_Name(Bcm_doorlockstsrearleType value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Name(value);
  }
  static inline bool Bcm_doorlockstsrearleType_Parse(const ::std::string& name,
      Bcm_doorlockstsrearleType* value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsrearleType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_NO_USED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_LOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_LOCKED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_UNLOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_UNLOCKED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_FAULT =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT;
  static inline bool Bcm_doorlockstsfrntriType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value);
  }
  static const Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType_MIN =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MIN;
  static const Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType_MAX =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX;
  static const int Bcm_doorlockstsfrntriType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsfrntriType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsfrntriType_Name(Bcm_doorlockstsfrntriType value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Name(value);
  }
  static inline bool Bcm_doorlockstsfrntriType_Parse(const ::std::string& name,
      Bcm_doorlockstsfrntriType* value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_NO_USED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_LOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_LOCKED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_UNLOCKED =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_UNLOCKED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_FAULT =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT;
  static inline bool Bcm_doorlockstsfrntleType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value);
  }
  static const Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType_MIN =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MIN;
  static const Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType_MAX =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX;
  static const int Bcm_doorlockstsfrntleType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsfrntleType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsfrntleType_Name(Bcm_doorlockstsfrntleType value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Name(value);
  }
  static inline bool Bcm_doorlockstsfrntleType_Parse(const ::std::string& name,
      Bcm_doorlockstsfrntleType* value) {
    return Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorstsrearriType Bcm_doorstsrearriType;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_NO_USED =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_CLOSED =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_CLOSED;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_OPEN =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_OPEN;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_FAULT =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT;
  static inline bool Bcm_doorstsrearriType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value);
  }
  static const Bcm_doorstsrearriType Bcm_doorstsrearriType_MIN =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MIN;
  static const Bcm_doorstsrearriType Bcm_doorstsrearriType_MAX =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX;
  static const int Bcm_doorstsrearriType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsrearriType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsrearriType_Name(Bcm_doorstsrearriType value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearriType_Name(value);
  }
  static inline bool Bcm_doorstsrearriType_Parse(const ::std::string& name,
      Bcm_doorstsrearriType* value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearriType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorstsrearleType Bcm_doorstsrearleType;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_NO_USED =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_CLOSED =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_CLOSED;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_OPEN =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_OPEN;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_FAULT =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT;
  static inline bool Bcm_doorstsrearleType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value);
  }
  static const Bcm_doorstsrearleType Bcm_doorstsrearleType_MIN =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MIN;
  static const Bcm_doorstsrearleType Bcm_doorstsrearleType_MAX =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX;
  static const int Bcm_doorstsrearleType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsrearleType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsrearleType_Name(Bcm_doorstsrearleType value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearleType_Name(value);
  }
  static inline bool Bcm_doorstsrearleType_Parse(const ::std::string& name,
      Bcm_doorstsrearleType* value) {
    return Bcm_door_0x310_310_Bcm_doorstsrearleType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorstsfrntriType Bcm_doorstsfrntriType;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_NO_USED =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_CLOSED =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_CLOSED;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_OPEN =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_OPEN;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_FAULT =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT;
  static inline bool Bcm_doorstsfrntriType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value);
  }
  static const Bcm_doorstsfrntriType Bcm_doorstsfrntriType_MIN =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MIN;
  static const Bcm_doorstsfrntriType Bcm_doorstsfrntriType_MAX =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX;
  static const int Bcm_doorstsfrntriType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsfrntriType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsfrntriType_Name(Bcm_doorstsfrntriType value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntriType_Name(value);
  }
  static inline bool Bcm_doorstsfrntriType_Parse(const ::std::string& name,
      Bcm_doorstsfrntriType* value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntriType_Parse(name, value);
  }

  typedef Bcm_door_0x310_310_Bcm_doorstsfrntleType Bcm_doorstsfrntleType;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_NO_USED =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_CLOSED =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_CLOSED;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_OPEN =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_OPEN;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_FAULT =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT;
  static inline bool Bcm_doorstsfrntleType_IsValid(int value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value);
  }
  static const Bcm_doorstsfrntleType Bcm_doorstsfrntleType_MIN =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MIN;
  static const Bcm_doorstsfrntleType Bcm_doorstsfrntleType_MAX =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX;
  static const int Bcm_doorstsfrntleType_ARRAYSIZE =
    Bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsfrntleType_descriptor() {
    return Bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsfrntleType_Name(Bcm_doorstsfrntleType value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntleType_Name(value);
  }
  static inline bool Bcm_doorstsfrntleType_Parse(const ::std::string& name,
      Bcm_doorstsfrntleType* value) {
    return Bcm_door_0x310_310_Bcm_doorstsfrntleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 bcm_checksum_0x310 = 1;
  bool has_bcm_checksum_0x310() const;
  void clear_bcm_checksum_0x310();
  static const int kBcmChecksum0X310FieldNumber = 1;
  ::google::protobuf::int32 bcm_checksum_0x310() const;
  void set_bcm_checksum_0x310(::google::protobuf::int32 value);

  // optional int32 bcm_rolling_counter_0x310 = 2;
  bool has_bcm_rolling_counter_0x310() const;
  void clear_bcm_rolling_counter_0x310();
  static const int kBcmRollingCounter0X310FieldNumber = 2;
  ::google::protobuf::int32 bcm_rolling_counter_0x310() const;
  void set_bcm_rolling_counter_0x310(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 3;
  bool has_bcm_rearwipersts() const;
  void clear_bcm_rearwipersts();
  static const int kBcmRearwiperstsFieldNumber = 3;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType bcm_rearwipersts() const;
  void set_bcm_rearwipersts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 4;
  bool has_bcm_frontwipersts() const;
  void clear_bcm_frontwipersts();
  static const int kBcmFrontwiperstsFieldNumber = 4;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType bcm_frontwipersts() const;
  void set_bcm_frontwipersts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_chargeplugstsType bcm_chargeplugsts = 5;
  bool has_bcm_chargeplugsts() const;
  void clear_bcm_chargeplugsts();
  static const int kBcmChargeplugstsFieldNumber = 5;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType bcm_chargeplugsts() const;
  void set_bcm_chargeplugsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 6;
  bool has_bcm_enginehoodsts() const;
  void clear_bcm_enginehoodsts();
  static const int kBcmEnginehoodstsFieldNumber = 6;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType bcm_enginehoodsts() const;
  void set_bcm_enginehoodsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 7;
  bool has_bcm_trunkdoorpreunlocksts() const;
  void clear_bcm_trunkdoorpreunlocksts();
  static const int kBcmTrunkdoorpreunlockstsFieldNumber = 7;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts() const;
  void set_bcm_trunkdoorpreunlocksts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 8;
  bool has_bcm_antitheftsts() const;
  void clear_bcm_antitheftsts();
  static const int kBcmAntitheftstsFieldNumber = 8;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType bcm_antitheftsts() const;
  void set_bcm_antitheftsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 9;
  bool has_bcm_lockunlockfeedback() const;
  void clear_bcm_lockunlockfeedback();
  static const int kBcmLockunlockfeedbackFieldNumber = 9;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType bcm_lockunlockfeedback() const;
  void set_bcm_lockunlockfeedback(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 10;
  bool has_bcm_doorlockststrunk() const;
  void clear_bcm_doorlockststrunk();
  static const int kBcmDoorlockststrunkFieldNumber = 10;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType bcm_doorlockststrunk() const;
  void set_bcm_doorlockststrunk(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 11;
  bool has_bcm_doorststrunk() const;
  void clear_bcm_doorststrunk();
  static const int kBcmDoorststrunkFieldNumber = 11;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType bcm_doorststrunk() const;
  void set_bcm_doorststrunk(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 12;
  bool has_bcm_doorlockstsrearri() const;
  void clear_bcm_doorlockstsrearri();
  static const int kBcmDoorlockstsrearriFieldNumber = 12;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType bcm_doorlockstsrearri() const;
  void set_bcm_doorlockstsrearri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 13;
  bool has_bcm_doorlockstsrearle() const;
  void clear_bcm_doorlockstsrearle();
  static const int kBcmDoorlockstsrearleFieldNumber = 13;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType bcm_doorlockstsrearle() const;
  void set_bcm_doorlockstsrearle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 14;
  bool has_bcm_doorlockstsfrntri() const;
  void clear_bcm_doorlockstsfrntri();
  static const int kBcmDoorlockstsfrntriFieldNumber = 14;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri() const;
  void set_bcm_doorlockstsfrntri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 15;
  bool has_bcm_doorlockstsfrntle() const;
  void clear_bcm_doorlockstsfrntle();
  static const int kBcmDoorlockstsfrntleFieldNumber = 15;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle() const;
  void set_bcm_doorlockstsfrntle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 16;
  bool has_bcm_doorstsrearri() const;
  void clear_bcm_doorstsrearri();
  static const int kBcmDoorstsrearriFieldNumber = 16;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType bcm_doorstsrearri() const;
  void set_bcm_doorstsrearri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 17;
  bool has_bcm_doorstsrearle() const;
  void clear_bcm_doorstsrearle();
  static const int kBcmDoorstsrearleFieldNumber = 17;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType bcm_doorstsrearle() const;
  void set_bcm_doorstsrearle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 18;
  bool has_bcm_doorstsfrntri() const;
  void clear_bcm_doorstsfrntri();
  static const int kBcmDoorstsfrntriFieldNumber = 18;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType bcm_doorstsfrntri() const;
  void set_bcm_doorstsfrntri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType value);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 19;
  bool has_bcm_doorstsfrntle() const;
  void clear_bcm_doorstsfrntle();
  static const int kBcmDoorstsfrntleFieldNumber = 19;
  ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType bcm_doorstsfrntle() const;
  void set_bcm_doorstsfrntle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Bcm_door_0x310_310)
 private:
  void set_has_bcm_checksum_0x310();
  void clear_has_bcm_checksum_0x310();
  void set_has_bcm_rolling_counter_0x310();
  void clear_has_bcm_rolling_counter_0x310();
  void set_has_bcm_rearwipersts();
  void clear_has_bcm_rearwipersts();
  void set_has_bcm_frontwipersts();
  void clear_has_bcm_frontwipersts();
  void set_has_bcm_chargeplugsts();
  void clear_has_bcm_chargeplugsts();
  void set_has_bcm_enginehoodsts();
  void clear_has_bcm_enginehoodsts();
  void set_has_bcm_trunkdoorpreunlocksts();
  void clear_has_bcm_trunkdoorpreunlocksts();
  void set_has_bcm_antitheftsts();
  void clear_has_bcm_antitheftsts();
  void set_has_bcm_lockunlockfeedback();
  void clear_has_bcm_lockunlockfeedback();
  void set_has_bcm_doorlockststrunk();
  void clear_has_bcm_doorlockststrunk();
  void set_has_bcm_doorststrunk();
  void clear_has_bcm_doorststrunk();
  void set_has_bcm_doorlockstsrearri();
  void clear_has_bcm_doorlockstsrearri();
  void set_has_bcm_doorlockstsrearle();
  void clear_has_bcm_doorlockstsrearle();
  void set_has_bcm_doorlockstsfrntri();
  void clear_has_bcm_doorlockstsfrntri();
  void set_has_bcm_doorlockstsfrntle();
  void clear_has_bcm_doorlockstsfrntle();
  void set_has_bcm_doorstsrearri();
  void clear_has_bcm_doorstsrearri();
  void set_has_bcm_doorstsrearle();
  void clear_has_bcm_doorstsrearle();
  void set_has_bcm_doorstsfrntri();
  void clear_has_bcm_doorstsfrntri();
  void set_has_bcm_doorstsfrntle();
  void clear_has_bcm_doorstsfrntle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 bcm_checksum_0x310_;
  ::google::protobuf::int32 bcm_rolling_counter_0x310_;
  int bcm_rearwipersts_;
  int bcm_frontwipersts_;
  int bcm_chargeplugsts_;
  int bcm_enginehoodsts_;
  int bcm_trunkdoorpreunlocksts_;
  int bcm_antitheftsts_;
  int bcm_lockunlockfeedback_;
  int bcm_doorlockststrunk_;
  int bcm_doorststrunk_;
  int bcm_doorlockstsrearri_;
  int bcm_doorlockstsrearle_;
  int bcm_doorlockstsfrntri_;
  int bcm_doorlockstsfrntle_;
  int bcm_doorstsrearri_;
  int bcm_doorstsrearle_;
  int bcm_doorstsfrntri_;
  int bcm_doorstsfrntle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_sts_0x218_218 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_sts_0x218_218) */ {
 public:
  Gw_vcu_sts_0x218_218();
  virtual ~Gw_vcu_sts_0x218_218();

  Gw_vcu_sts_0x218_218(const Gw_vcu_sts_0x218_218& from);

  inline Gw_vcu_sts_0x218_218& operator=(const Gw_vcu_sts_0x218_218& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_sts_0x218_218& default_instance();

  static inline const Gw_vcu_sts_0x218_218* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_sts_0x218_218*>(
               &_Gw_vcu_sts_0x218_218_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Gw_vcu_sts_0x218_218* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_sts_0x218_218* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_sts_0x218_218* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_sts_0x218_218& from);
  void MergeFrom(const Gw_vcu_sts_0x218_218& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_sts_0x218_218* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_sts_0x218_218_Vcu_nlockrequestType Vcu_nlockrequestType;
  static const Vcu_nlockrequestType VCU_NLOCKREQUEST_NO_USE =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_NO_USE;
  static const Vcu_nlockrequestType VCU_NLOCKREQUEST_LOCK =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_LOCK;
  static const Vcu_nlockrequestType VCU_NLOCKREQUEST_UNLOCK =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_UNLOCK;
  static const Vcu_nlockrequestType VCU_NLOCKREQUEST_INVALID =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_VCU_NLOCKREQUEST_INVALID;
  static inline bool Vcu_nlockrequestType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_IsValid(value);
  }
  static const Vcu_nlockrequestType Vcu_nlockrequestType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_MIN;
  static const Vcu_nlockrequestType Vcu_nlockrequestType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_MAX;
  static const int Vcu_nlockrequestType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Vcu_nlockrequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_nlockrequestType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_descriptor();
  }
  static inline const ::std::string& Vcu_nlockrequestType_Name(Vcu_nlockrequestType value) {
    return Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Name(value);
  }
  static inline bool Vcu_nlockrequestType_Parse(const ::std::string& name,
      Vcu_nlockrequestType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_plockrequestType Vcu_plockrequestType;
  static const Vcu_plockrequestType VCU_PLOCKREQUEST_NO_USE =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_NO_USE;
  static const Vcu_plockrequestType VCU_PLOCKREQUEST_LOCK =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_LOCK;
  static const Vcu_plockrequestType VCU_PLOCKREQUEST_UNLOCK =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_UNLOCK;
  static const Vcu_plockrequestType VCU_PLOCKREQUEST_INVALID =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_VCU_PLOCKREQUEST_INVALID;
  static inline bool Vcu_plockrequestType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_plockrequestType_IsValid(value);
  }
  static const Vcu_plockrequestType Vcu_plockrequestType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_MIN;
  static const Vcu_plockrequestType Vcu_plockrequestType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_MAX;
  static const int Vcu_plockrequestType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Vcu_plockrequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_plockrequestType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_plockrequestType_descriptor();
  }
  static inline const ::std::string& Vcu_plockrequestType_Name(Vcu_plockrequestType value) {
    return Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Name(value);
  }
  static inline bool Vcu_plockrequestType_Parse(const ::std::string& name,
      Vcu_plockrequestType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_plockrequestType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType Vcu_vehicle_modeType;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_STANDBY_IG_OFF_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_STANDBY_IG_OFF_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_VEHICLE_RESET_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_VEHICLE_RESET_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_HV_ACTIVATION_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_HV_ACTIVATION_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_DRIVING_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_DRIVING_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_HV_TERMINATION_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_HV_TERMINATION_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_CHARGING_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_CHARGING_MODE;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_RESERVED =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_RESERVED;
  static const Vcu_vehicle_modeType VCU_VEHICLE_MODE_EMER_DRIVING_MODE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_VCU_VEHICLE_MODE_EMER_DRIVING_MODE;
  static inline bool Vcu_vehicle_modeType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_IsValid(value);
  }
  static const Vcu_vehicle_modeType Vcu_vehicle_modeType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_MIN;
  static const Vcu_vehicle_modeType Vcu_vehicle_modeType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_MAX;
  static const int Vcu_vehicle_modeType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Vcu_vehicle_modeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_vehicle_modeType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_descriptor();
  }
  static inline const ::std::string& Vcu_vehicle_modeType_Name(Vcu_vehicle_modeType value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Name(value);
  }
  static inline bool Vcu_vehicle_modeType_Parse(const ::std::string& name,
      Vcu_vehicle_modeType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType Vcu_engaddfuel_rqType;
  static const Vcu_engaddfuel_rqType VCU_ENGADDFUEL_RQ_NO_RQ =
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_NO_RQ;
  static const Vcu_engaddfuel_rqType VCU_ENGADDFUEL_RQ_RQ =
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_VCU_ENGADDFUEL_RQ_RQ;
  static inline bool Vcu_engaddfuel_rqType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_IsValid(value);
  }
  static const Vcu_engaddfuel_rqType Vcu_engaddfuel_rqType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_MIN;
  static const Vcu_engaddfuel_rqType Vcu_engaddfuel_rqType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_MAX;
  static const int Vcu_engaddfuel_rqType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Vcu_engaddfuel_rqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_engaddfuel_rqType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_descriptor();
  }
  static inline const ::std::string& Vcu_engaddfuel_rqType_Name(Vcu_engaddfuel_rqType value) {
    return Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Name(value);
  }
  static inline bool Vcu_engaddfuel_rqType_Parse(const ::std::string& name,
      Vcu_engaddfuel_rqType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_fan_rqType Vcu_fan_rqType;
  static const Vcu_fan_rqType VCU_FAN_RQ_NO_RQ =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_NO_RQ;
  static const Vcu_fan_rqType VCU_FAN_RQ_FAN_LOW_RQ =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_FAN_LOW_RQ;
  static const Vcu_fan_rqType VCU_FAN_RQ_FAN_HIGH_RQ =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_VCU_FAN_RQ_FAN_HIGH_RQ;
  static inline bool Vcu_fan_rqType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_fan_rqType_IsValid(value);
  }
  static const Vcu_fan_rqType Vcu_fan_rqType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_MIN;
  static const Vcu_fan_rqType Vcu_fan_rqType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_MAX;
  static const int Vcu_fan_rqType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Vcu_fan_rqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_fan_rqType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_fan_rqType_descriptor();
  }
  static inline const ::std::string& Vcu_fan_rqType_Name(Vcu_fan_rqType value) {
    return Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Name(value);
  }
  static inline bool Vcu_fan_rqType_Parse(const ::std::string& name,
      Vcu_fan_rqType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_fan_rqType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_engstart_rqType Vcu_engstart_rqType;
  static const Vcu_engstart_rqType VCU_ENGSTART_RQ_NO_RQ =
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_NO_RQ;
  static const Vcu_engstart_rqType VCU_ENGSTART_RQ_RQ =
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_VCU_ENGSTART_RQ_RQ;
  static inline bool Vcu_engstart_rqType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_IsValid(value);
  }
  static const Vcu_engstart_rqType Vcu_engstart_rqType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_MIN;
  static const Vcu_engstart_rqType Vcu_engstart_rqType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_MAX;
  static const int Vcu_engstart_rqType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Vcu_engstart_rqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_engstart_rqType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_descriptor();
  }
  static inline const ::std::string& Vcu_engstart_rqType_Name(Vcu_engstart_rqType value) {
    return Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Name(value);
  }
  static inline bool Vcu_engstart_rqType_Parse(const ::std::string& name,
      Vcu_engstart_rqType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType Vcu_dcu_parkrequestType;
  static const Vcu_dcu_parkrequestType VCU_DCU_PARKREQUEST_OFF =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_OFF;
  static const Vcu_dcu_parkrequestType VCU_DCU_PARKREQUEST_PARK =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_PARK;
  static const Vcu_dcu_parkrequestType VCU_DCU_PARKREQUEST_UNPARK =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_UNPARK;
  static const Vcu_dcu_parkrequestType VCU_DCU_PARKREQUEST_INVALID =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_VCU_DCU_PARKREQUEST_INVALID;
  static inline bool Vcu_dcu_parkrequestType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_IsValid(value);
  }
  static const Vcu_dcu_parkrequestType Vcu_dcu_parkrequestType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_MIN;
  static const Vcu_dcu_parkrequestType Vcu_dcu_parkrequestType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_MAX;
  static const int Vcu_dcu_parkrequestType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Vcu_dcu_parkrequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_dcu_parkrequestType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_descriptor();
  }
  static inline const ::std::string& Vcu_dcu_parkrequestType_Name(Vcu_dcu_parkrequestType value) {
    return Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Name(value);
  }
  static inline bool Vcu_dcu_parkrequestType_Parse(const ::std::string& name,
      Vcu_dcu_parkrequestType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType Vcu_actualgearlevelpositionvalidType;
  static const Vcu_actualgearlevelpositionvalidType VCU_ACTUALGEARLEVELPOSITIONVALID_VALID =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_VALID;
  static const Vcu_actualgearlevelpositionvalidType VCU_ACTUALGEARLEVELPOSITIONVALID_INVALID =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_VCU_ACTUALGEARLEVELPOSITIONVALID_INVALID;
  static inline bool Vcu_actualgearlevelpositionvalidType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_IsValid(value);
  }
  static const Vcu_actualgearlevelpositionvalidType Vcu_actualgearlevelpositionvalidType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_MIN;
  static const Vcu_actualgearlevelpositionvalidType Vcu_actualgearlevelpositionvalidType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_MAX;
  static const int Vcu_actualgearlevelpositionvalidType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Vcu_actualgearlevelpositionvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_actualgearlevelpositionvalidType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_descriptor();
  }
  static inline const ::std::string& Vcu_actualgearlevelpositionvalidType_Name(Vcu_actualgearlevelpositionvalidType value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Name(value);
  }
  static inline bool Vcu_actualgearlevelpositionvalidType_Parse(const ::std::string& name,
      Vcu_actualgearlevelpositionvalidType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType Vcu_actualgearlevelpositionType;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_INITIAL =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INITIAL;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_P_PARK =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_P_PARK;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_R_REVERSE =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_R_REVERSE;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_N_NEUTRAL =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_N_NEUTRAL;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_D_DRIVE =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_D_DRIVE;
  static const Vcu_actualgearlevelpositionType VCU_ACTUALGEARLEVELPOSITION_INVALID =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_VCU_ACTUALGEARLEVELPOSITION_INVALID;
  static inline bool Vcu_actualgearlevelpositionType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_IsValid(value);
  }
  static const Vcu_actualgearlevelpositionType Vcu_actualgearlevelpositionType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_MIN;
  static const Vcu_actualgearlevelpositionType Vcu_actualgearlevelpositionType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_MAX;
  static const int Vcu_actualgearlevelpositionType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Vcu_actualgearlevelpositionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_actualgearlevelpositionType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_descriptor();
  }
  static inline const ::std::string& Vcu_actualgearlevelpositionType_Name(Vcu_actualgearlevelpositionType value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Name(value);
  }
  static inline bool Vcu_actualgearlevelpositionType_Parse(const ::std::string& name,
      Vcu_actualgearlevelpositionType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType Vcu_bms_chgstart_alwType;
  static const Vcu_bms_chgstart_alwType VCU_BMS_CHGSTART_ALW_FORBID =
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_FORBID;
  static const Vcu_bms_chgstart_alwType VCU_BMS_CHGSTART_ALW_ALLOW =
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_VCU_BMS_CHGSTART_ALW_ALLOW;
  static inline bool Vcu_bms_chgstart_alwType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_IsValid(value);
  }
  static const Vcu_bms_chgstart_alwType Vcu_bms_chgstart_alwType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_MIN;
  static const Vcu_bms_chgstart_alwType Vcu_bms_chgstart_alwType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_MAX;
  static const int Vcu_bms_chgstart_alwType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Vcu_bms_chgstart_alwType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_bms_chgstart_alwType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_descriptor();
  }
  static inline const ::std::string& Vcu_bms_chgstart_alwType_Name(Vcu_bms_chgstart_alwType value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Name(value);
  }
  static inline bool Vcu_bms_chgstart_alwType_Parse(const ::std::string& name,
      Vcu_bms_chgstart_alwType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType Vcu_bms_hvonoff_reqType;
  static const Vcu_bms_hvonoff_reqType VCU_BMS_HVONOFF_REQ_FORBID =
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_FORBID;
  static const Vcu_bms_hvonoff_reqType VCU_BMS_HVONOFF_REQ_ALLOW =
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_VCU_BMS_HVONOFF_REQ_ALLOW;
  static inline bool Vcu_bms_hvonoff_reqType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_IsValid(value);
  }
  static const Vcu_bms_hvonoff_reqType Vcu_bms_hvonoff_reqType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_MIN;
  static const Vcu_bms_hvonoff_reqType Vcu_bms_hvonoff_reqType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_MAX;
  static const int Vcu_bms_hvonoff_reqType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Vcu_bms_hvonoff_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_bms_hvonoff_reqType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_descriptor();
  }
  static inline const ::std::string& Vcu_bms_hvonoff_reqType_Name(Vcu_bms_hvonoff_reqType value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Name(value);
  }
  static inline bool Vcu_bms_hvonoff_reqType_Parse(const ::std::string& name,
      Vcu_bms_hvonoff_reqType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType Vcu_vehfailgrade_errType;
  static const Vcu_vehfailgrade_errType VCU_VEHFAILGRADE_ERR_NORMAL =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_NORMAL;
  static const Vcu_vehfailgrade_errType VCU_VEHFAILGRADE_ERR_LEVEL1 =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL1;
  static const Vcu_vehfailgrade_errType VCU_VEHFAILGRADE_ERR_LEVEL2 =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL2;
  static const Vcu_vehfailgrade_errType VCU_VEHFAILGRADE_ERR_LEVEL3 =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_VCU_VEHFAILGRADE_ERR_LEVEL3;
  static inline bool Vcu_vehfailgrade_errType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_IsValid(value);
  }
  static const Vcu_vehfailgrade_errType Vcu_vehfailgrade_errType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_MIN;
  static const Vcu_vehfailgrade_errType Vcu_vehfailgrade_errType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_MAX;
  static const int Vcu_vehfailgrade_errType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Vcu_vehfailgrade_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_vehfailgrade_errType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_descriptor();
  }
  static inline const ::std::string& Vcu_vehfailgrade_errType_Name(Vcu_vehfailgrade_errType value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Name(value);
  }
  static inline bool Vcu_vehfailgrade_errType_Parse(const ::std::string& name,
      Vcu_vehfailgrade_errType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_running_modeType Vcu_running_modeType;
  static const Vcu_running_modeType VCU_RUNNING_MODE_STANDBY =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_STANDBY;
  static const Vcu_running_modeType VCU_RUNNING_MODE_EV_MODE =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_EV_MODE;
  static const Vcu_running_modeType VCU_RUNNING_MODE_HYBIRD_MODE =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_VCU_RUNNING_MODE_HYBIRD_MODE;
  static inline bool Vcu_running_modeType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_running_modeType_IsValid(value);
  }
  static const Vcu_running_modeType Vcu_running_modeType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_MIN;
  static const Vcu_running_modeType Vcu_running_modeType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_MAX;
  static const int Vcu_running_modeType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_running_modeType_Vcu_running_modeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_running_modeType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_running_modeType_descriptor();
  }
  static inline const ::std::string& Vcu_running_modeType_Name(Vcu_running_modeType value) {
    return Gw_vcu_sts_0x218_218_Vcu_running_modeType_Name(value);
  }
  static inline bool Vcu_running_modeType_Parse(const ::std::string& name,
      Vcu_running_modeType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_running_modeType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType Vcu_bp_sleep_allowedType;
  static const Vcu_bp_sleep_allowedType VCU_BP_SLEEP_ALLOWED_NOT_ALLOWED =
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_NOT_ALLOWED;
  static const Vcu_bp_sleep_allowedType VCU_BP_SLEEP_ALLOWED_ALLOWED =
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_VCU_BP_SLEEP_ALLOWED_ALLOWED;
  static inline bool Vcu_bp_sleep_allowedType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_IsValid(value);
  }
  static const Vcu_bp_sleep_allowedType Vcu_bp_sleep_allowedType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_MIN;
  static const Vcu_bp_sleep_allowedType Vcu_bp_sleep_allowedType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_MAX;
  static const int Vcu_bp_sleep_allowedType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Vcu_bp_sleep_allowedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_bp_sleep_allowedType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_descriptor();
  }
  static inline const ::std::string& Vcu_bp_sleep_allowedType_Name(Vcu_bp_sleep_allowedType value) {
    return Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Name(value);
  }
  static inline bool Vcu_bp_sleep_allowedType_Parse(const ::std::string& name,
      Vcu_bp_sleep_allowedType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_hvil_inType Vcu_hvil_inType;
  static const Vcu_hvil_inType VCU_HVIL_IN_OFF =
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_OFF;
  static const Vcu_hvil_inType VCU_HVIL_IN_ON =
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_VCU_HVIL_IN_ON;
  static inline bool Vcu_hvil_inType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_inType_IsValid(value);
  }
  static const Vcu_hvil_inType Vcu_hvil_inType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_MIN;
  static const Vcu_hvil_inType Vcu_hvil_inType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_MAX;
  static const int Vcu_hvil_inType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Vcu_hvil_inType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_hvil_inType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_inType_descriptor();
  }
  static inline const ::std::string& Vcu_hvil_inType_Name(Vcu_hvil_inType value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Name(value);
  }
  static inline bool Vcu_hvil_inType_Parse(const ::std::string& name,
      Vcu_hvil_inType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_inType_Parse(name, value);
  }

  typedef Gw_vcu_sts_0x218_218_Vcu_hvil_outType Vcu_hvil_outType;
  static const Vcu_hvil_outType VCU_HVIL_OUT_OFF =
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_OFF;
  static const Vcu_hvil_outType VCU_HVIL_OUT_ON =
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_VCU_HVIL_OUT_ON;
  static inline bool Vcu_hvil_outType_IsValid(int value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_outType_IsValid(value);
  }
  static const Vcu_hvil_outType Vcu_hvil_outType_MIN =
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_MIN;
  static const Vcu_hvil_outType Vcu_hvil_outType_MAX =
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_MAX;
  static const int Vcu_hvil_outType_ARRAYSIZE =
    Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Vcu_hvil_outType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_hvil_outType_descriptor() {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_outType_descriptor();
  }
  static inline const ::std::string& Vcu_hvil_outType_Name(Vcu_hvil_outType value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Name(value);
  }
  static inline bool Vcu_hvil_outType_Parse(const ::std::string& name,
      Vcu_hvil_outType* value) {
    return Gw_vcu_sts_0x218_218_Vcu_hvil_outType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x218 = 1;
  bool has_checksum_0x218() const;
  void clear_checksum_0x218();
  static const int kChecksum0X218FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x218() const;
  void set_checksum_0x218(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x218 = 2;
  bool has_rolling_counter_0x218() const;
  void clear_rolling_counter_0x218();
  static const int kRollingCounter0X218FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x218() const;
  void set_rolling_counter_0x218(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_nlockrequestType vcu_nlockrequest = 3;
  bool has_vcu_nlockrequest() const;
  void clear_vcu_nlockrequest();
  static const int kVcuNlockrequestFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType vcu_nlockrequest() const;
  void set_vcu_nlockrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_plockrequestType vcu_plockrequest = 4;
  bool has_vcu_plockrequest() const;
  void clear_vcu_plockrequest();
  static const int kVcuPlockrequestFieldNumber = 4;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType vcu_plockrequest() const;
  void set_vcu_plockrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_engaddfuel_rqType vcu_engaddfuel_rq = 6;
  bool has_vcu_engaddfuel_rq() const;
  void clear_vcu_engaddfuel_rq();
  static const int kVcuEngaddfuelRqFieldNumber = 6;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType vcu_engaddfuel_rq() const;
  void set_vcu_engaddfuel_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_fan_rqType vcu_fan_rq = 7;
  bool has_vcu_fan_rq() const;
  void clear_vcu_fan_rq();
  static const int kVcuFanRqFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType vcu_fan_rq() const;
  void set_vcu_fan_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_engstart_rqType vcu_engstart_rq = 8;
  bool has_vcu_engstart_rq() const;
  void clear_vcu_engstart_rq();
  static const int kVcuEngstartRqFieldNumber = 8;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType vcu_engstart_rq() const;
  void set_vcu_engstart_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_dcu_parkrequestType vcu_dcu_parkrequest = 9;
  bool has_vcu_dcu_parkrequest() const;
  void clear_vcu_dcu_parkrequest();
  static const int kVcuDcuParkrequestFieldNumber = 9;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType vcu_dcu_parkrequest() const;
  void set_vcu_dcu_parkrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_actualgearlevelpositionvalidType vcu_actualgearlevelpositionvalid = 10;
  bool has_vcu_actualgearlevelpositionvalid() const;
  void clear_vcu_actualgearlevelpositionvalid();
  static const int kVcuActualgearlevelpositionvalidFieldNumber = 10;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType vcu_actualgearlevelpositionvalid() const;
  void set_vcu_actualgearlevelpositionvalid(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_actualgearlevelpositionType vcu_actualgearlevelposition = 11;
  bool has_vcu_actualgearlevelposition() const;
  void clear_vcu_actualgearlevelposition();
  static const int kVcuActualgearlevelpositionFieldNumber = 11;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType vcu_actualgearlevelposition() const;
  void set_vcu_actualgearlevelposition(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bms_chgstart_alwType vcu_bms_chgstart_alw = 12;
  bool has_vcu_bms_chgstart_alw() const;
  void clear_vcu_bms_chgstart_alw();
  static const int kVcuBmsChgstartAlwFieldNumber = 12;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType vcu_bms_chgstart_alw() const;
  void set_vcu_bms_chgstart_alw(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bms_hvonoff_reqType vcu_bms_hvonoff_req = 13;
  bool has_vcu_bms_hvonoff_req() const;
  void clear_vcu_bms_hvonoff_req();
  static const int kVcuBmsHvonoffReqFieldNumber = 13;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType vcu_bms_hvonoff_req() const;
  void set_vcu_bms_hvonoff_req(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_vehfailgrade_errType vcu_vehfailgrade_err = 14;
  bool has_vcu_vehfailgrade_err() const;
  void clear_vcu_vehfailgrade_err();
  static const int kVcuVehfailgradeErrFieldNumber = 14;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType vcu_vehfailgrade_err() const;
  void set_vcu_vehfailgrade_err(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_running_modeType vcu_running_mode = 15;
  bool has_vcu_running_mode() const;
  void clear_vcu_running_mode();
  static const int kVcuRunningModeFieldNumber = 15;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType vcu_running_mode() const;
  void set_vcu_running_mode(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bp_sleep_allowedType vcu_bp_sleep_allowed = 16;
  bool has_vcu_bp_sleep_allowed() const;
  void clear_vcu_bp_sleep_allowed();
  static const int kVcuBpSleepAllowedFieldNumber = 16;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType vcu_bp_sleep_allowed() const;
  void set_vcu_bp_sleep_allowed(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_hvil_inType vcu_hvil_in = 17;
  bool has_vcu_hvil_in() const;
  void clear_vcu_hvil_in();
  static const int kVcuHvilInFieldNumber = 17;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType vcu_hvil_in() const;
  void set_vcu_hvil_in(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_hvil_outType vcu_hvil_out = 18;
  bool has_vcu_hvil_out() const;
  void clear_vcu_hvil_out();
  static const int kVcuHvilOutFieldNumber = 18;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType vcu_hvil_out() const;
  void set_vcu_hvil_out(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType value);

  // optional int32 vcu_bp_input_cooling_temp = 19;
  bool has_vcu_bp_input_cooling_temp() const;
  void clear_vcu_bp_input_cooling_temp();
  static const int kVcuBpInputCoolingTempFieldNumber = 19;
  ::google::protobuf::int32 vcu_bp_input_cooling_temp() const;
  void set_vcu_bp_input_cooling_temp(::google::protobuf::int32 value);

  // optional int32 vcu_motor_input_cooling_temp = 20;
  bool has_vcu_motor_input_cooling_temp() const;
  void clear_vcu_motor_input_cooling_temp();
  static const int kVcuMotorInputCoolingTempFieldNumber = 20;
  ::google::protobuf::int32 vcu_motor_input_cooling_temp() const;
  void set_vcu_motor_input_cooling_temp(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_vehicle_modeType vcu_vehicle_mode = 5;
  bool has_vcu_vehicle_mode() const;
  void clear_vcu_vehicle_mode();
  static const int kVcuVehicleModeFieldNumber = 5;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType vcu_vehicle_mode() const;
  void set_vcu_vehicle_mode(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_sts_0x218_218)
 private:
  void set_has_checksum_0x218();
  void clear_has_checksum_0x218();
  void set_has_rolling_counter_0x218();
  void clear_has_rolling_counter_0x218();
  void set_has_vcu_nlockrequest();
  void clear_has_vcu_nlockrequest();
  void set_has_vcu_plockrequest();
  void clear_has_vcu_plockrequest();
  void set_has_vcu_vehicle_mode();
  void clear_has_vcu_vehicle_mode();
  void set_has_vcu_engaddfuel_rq();
  void clear_has_vcu_engaddfuel_rq();
  void set_has_vcu_fan_rq();
  void clear_has_vcu_fan_rq();
  void set_has_vcu_engstart_rq();
  void clear_has_vcu_engstart_rq();
  void set_has_vcu_dcu_parkrequest();
  void clear_has_vcu_dcu_parkrequest();
  void set_has_vcu_actualgearlevelpositionvalid();
  void clear_has_vcu_actualgearlevelpositionvalid();
  void set_has_vcu_actualgearlevelposition();
  void clear_has_vcu_actualgearlevelposition();
  void set_has_vcu_bms_chgstart_alw();
  void clear_has_vcu_bms_chgstart_alw();
  void set_has_vcu_bms_hvonoff_req();
  void clear_has_vcu_bms_hvonoff_req();
  void set_has_vcu_vehfailgrade_err();
  void clear_has_vcu_vehfailgrade_err();
  void set_has_vcu_running_mode();
  void clear_has_vcu_running_mode();
  void set_has_vcu_bp_sleep_allowed();
  void clear_has_vcu_bp_sleep_allowed();
  void set_has_vcu_hvil_in();
  void clear_has_vcu_hvil_in();
  void set_has_vcu_hvil_out();
  void clear_has_vcu_hvil_out();
  void set_has_vcu_bp_input_cooling_temp();
  void clear_has_vcu_bp_input_cooling_temp();
  void set_has_vcu_motor_input_cooling_temp();
  void clear_has_vcu_motor_input_cooling_temp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x218_;
  ::google::protobuf::int32 rolling_counter_0x218_;
  int vcu_nlockrequest_;
  int vcu_plockrequest_;
  int vcu_engaddfuel_rq_;
  int vcu_fan_rq_;
  int vcu_engstart_rq_;
  int vcu_dcu_parkrequest_;
  int vcu_actualgearlevelpositionvalid_;
  int vcu_actualgearlevelposition_;
  int vcu_bms_chgstart_alw_;
  int vcu_bms_hvonoff_req_;
  int vcu_vehfailgrade_err_;
  int vcu_running_mode_;
  int vcu_bp_sleep_allowed_;
  int vcu_hvil_in_;
  int vcu_hvil_out_;
  ::google::protobuf::int32 vcu_bp_input_cooling_temp_;
  ::google::protobuf::int32 vcu_motor_input_cooling_temp_;
  int vcu_vehicle_mode_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Adu_controldrive_0x120_120 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Adu_controldrive_0x120_120) */ {
 public:
  Adu_controldrive_0x120_120();
  virtual ~Adu_controldrive_0x120_120();

  Adu_controldrive_0x120_120(const Adu_controldrive_0x120_120& from);

  inline Adu_controldrive_0x120_120& operator=(const Adu_controldrive_0x120_120& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Adu_controldrive_0x120_120& default_instance();

  static inline const Adu_controldrive_0x120_120* internal_default_instance() {
    return reinterpret_cast<const Adu_controldrive_0x120_120*>(
               &_Adu_controldrive_0x120_120_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Adu_controldrive_0x120_120* other);

  // implements Message ----------------------------------------------

  inline Adu_controldrive_0x120_120* New() const PROTOBUF_FINAL { return New(NULL); }

  Adu_controldrive_0x120_120* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Adu_controldrive_0x120_120& from);
  void MergeFrom(const Adu_controldrive_0x120_120& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Adu_controldrive_0x120_120* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Adu_controldrive_0x120_120_Adu_controtorque_rawflagType Adu_controtorque_rawflagType;
  static const Adu_controtorque_rawflagType ADU_CONTROTORQUE_RAWFLAG_NO_FILTERS =
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_NO_FILTERS;
  static const Adu_controtorque_rawflagType ADU_CONTROTORQUE_RAWFLAG_FILTERS =
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_ADU_CONTROTORQUE_RAWFLAG_FILTERS;
  static inline bool Adu_controtorque_rawflagType_IsValid(int value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_IsValid(value);
  }
  static const Adu_controtorque_rawflagType Adu_controtorque_rawflagType_MIN =
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_MIN;
  static const Adu_controtorque_rawflagType Adu_controtorque_rawflagType_MAX =
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_MAX;
  static const int Adu_controtorque_rawflagType_ARRAYSIZE =
    Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Adu_controtorque_rawflagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_controtorque_rawflagType_descriptor() {
    return Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_descriptor();
  }
  static inline const ::std::string& Adu_controtorque_rawflagType_Name(Adu_controtorque_rawflagType value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Name(value);
  }
  static inline bool Adu_controtorque_rawflagType_Parse(const ::std::string& name,
      Adu_controtorque_rawflagType* value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_Parse(name, value);
  }

  typedef Adu_controldrive_0x120_120_Adu_controtorque_enableType Adu_controtorque_enableType;
  static const Adu_controtorque_enableType ADU_CONTROTORQUE_ENABLE_DISABLE =
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_DISABLE;
  static const Adu_controtorque_enableType ADU_CONTROTORQUE_ENABLE_ENABLE =
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_ADU_CONTROTORQUE_ENABLE_ENABLE;
  static inline bool Adu_controtorque_enableType_IsValid(int value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_enableType_IsValid(value);
  }
  static const Adu_controtorque_enableType Adu_controtorque_enableType_MIN =
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_MIN;
  static const Adu_controtorque_enableType Adu_controtorque_enableType_MAX =
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_MAX;
  static const int Adu_controtorque_enableType_ARRAYSIZE =
    Adu_controldrive_0x120_120_Adu_controtorque_enableType_Adu_controtorque_enableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_controtorque_enableType_descriptor() {
    return Adu_controldrive_0x120_120_Adu_controtorque_enableType_descriptor();
  }
  static inline const ::std::string& Adu_controtorque_enableType_Name(Adu_controtorque_enableType value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_enableType_Name(value);
  }
  static inline bool Adu_controtorque_enableType_Parse(const ::std::string& name,
      Adu_controtorque_enableType* value) {
    return Adu_controldrive_0x120_120_Adu_controtorque_enableType_Parse(name, value);
  }

  typedef Adu_controldrive_0x120_120_Adu_targetgear_positionType Adu_targetgear_positionType;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_INITIAL =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INITIAL;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_P_PARK =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_P_PARK;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_R_REVERSE =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_R_REVERSE;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_N_NEUTRAL =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_N_NEUTRAL;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_D_DRIVE =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_D_DRIVE;
  static const Adu_targetgear_positionType ADU_TARGETGEAR_POSITION_INVALID =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_ADU_TARGETGEAR_POSITION_INVALID;
  static inline bool Adu_targetgear_positionType_IsValid(int value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_positionType_IsValid(value);
  }
  static const Adu_targetgear_positionType Adu_targetgear_positionType_MIN =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_MIN;
  static const Adu_targetgear_positionType Adu_targetgear_positionType_MAX =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_MAX;
  static const int Adu_targetgear_positionType_ARRAYSIZE =
    Adu_controldrive_0x120_120_Adu_targetgear_positionType_Adu_targetgear_positionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_targetgear_positionType_descriptor() {
    return Adu_controldrive_0x120_120_Adu_targetgear_positionType_descriptor();
  }
  static inline const ::std::string& Adu_targetgear_positionType_Name(Adu_targetgear_positionType value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_positionType_Name(value);
  }
  static inline bool Adu_targetgear_positionType_Parse(const ::std::string& name,
      Adu_targetgear_positionType* value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_positionType_Parse(name, value);
  }

  typedef Adu_controldrive_0x120_120_Adu_targetgear_enableType Adu_targetgear_enableType;
  static const Adu_targetgear_enableType ADU_TARGETGEAR_ENABLE_DISABLE =
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_DISABLE;
  static const Adu_targetgear_enableType ADU_TARGETGEAR_ENABLE_ENABLE =
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_ADU_TARGETGEAR_ENABLE_ENABLE;
  static inline bool Adu_targetgear_enableType_IsValid(int value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_enableType_IsValid(value);
  }
  static const Adu_targetgear_enableType Adu_targetgear_enableType_MIN =
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_MIN;
  static const Adu_targetgear_enableType Adu_targetgear_enableType_MAX =
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_MAX;
  static const int Adu_targetgear_enableType_ARRAYSIZE =
    Adu_controldrive_0x120_120_Adu_targetgear_enableType_Adu_targetgear_enableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_targetgear_enableType_descriptor() {
    return Adu_controldrive_0x120_120_Adu_targetgear_enableType_descriptor();
  }
  static inline const ::std::string& Adu_targetgear_enableType_Name(Adu_targetgear_enableType value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_enableType_Name(value);
  }
  static inline bool Adu_targetgear_enableType_Parse(const ::std::string& name,
      Adu_targetgear_enableType* value) {
    return Adu_controldrive_0x120_120_Adu_targetgear_enableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x120 = 1;
  bool has_checksum_0x120() const;
  void clear_checksum_0x120();
  static const int kChecksum0X120FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x120() const;
  void set_checksum_0x120(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x120 = 2;
  bool has_rolling_counter_0x120() const;
  void clear_rolling_counter_0x120();
  static const int kRollingCounter0X120FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x120() const;
  void set_rolling_counter_0x120(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_controtorque_rawflagType adu_controtorque_rawflag = 3;
  bool has_adu_controtorque_rawflag() const;
  void clear_adu_controtorque_rawflag();
  static const int kAduControtorqueRawflagFieldNumber = 3;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType adu_controtorque_rawflag() const;
  void set_adu_controtorque_rawflag(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType value);

  // optional int32 adu_targetdrving_torque = 4;
  bool has_adu_targetdrving_torque() const;
  void clear_adu_targetdrving_torque();
  static const int kAduTargetdrvingTorqueFieldNumber = 4;
  ::google::protobuf::int32 adu_targetdrving_torque() const;
  void set_adu_targetdrving_torque(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_controtorque_enableType adu_controtorque_enable = 5;
  bool has_adu_controtorque_enable() const;
  void clear_adu_controtorque_enable();
  static const int kAduControtorqueEnableFieldNumber = 5;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType adu_controtorque_enable() const;
  void set_adu_controtorque_enable(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType value);

  // optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_targetgear_positionType adu_targetgear_position = 6;
  bool has_adu_targetgear_position() const;
  void clear_adu_targetgear_position();
  static const int kAduTargetgearPositionFieldNumber = 6;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType adu_targetgear_position() const;
  void set_adu_targetgear_position(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType value);

  // optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_targetgear_enableType adu_targetgear_enable = 7;
  bool has_adu_targetgear_enable() const;
  void clear_adu_targetgear_enable();
  static const int kAduTargetgearEnableFieldNumber = 7;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType adu_targetgear_enable() const;
  void set_adu_targetgear_enable(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Adu_controldrive_0x120_120)
 private:
  void set_has_checksum_0x120();
  void clear_has_checksum_0x120();
  void set_has_rolling_counter_0x120();
  void clear_has_rolling_counter_0x120();
  void set_has_adu_controtorque_rawflag();
  void clear_has_adu_controtorque_rawflag();
  void set_has_adu_targetdrving_torque();
  void clear_has_adu_targetdrving_torque();
  void set_has_adu_controtorque_enable();
  void clear_has_adu_controtorque_enable();
  void set_has_adu_targetgear_position();
  void clear_has_adu_targetgear_position();
  void set_has_adu_targetgear_enable();
  void clear_has_adu_targetgear_enable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x120_;
  ::google::protobuf::int32 rolling_counter_0x120_;
  int adu_controtorque_rawflag_;
  ::google::protobuf::int32 adu_targetdrving_torque_;
  int adu_controtorque_enable_;
  int adu_targetgear_position_;
  int adu_targetgear_enable_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_control2_0x131_131 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_control2_0x131_131) */ {
 public:
  Gw_vcu_control2_0x131_131();
  virtual ~Gw_vcu_control2_0x131_131();

  Gw_vcu_control2_0x131_131(const Gw_vcu_control2_0x131_131& from);

  inline Gw_vcu_control2_0x131_131& operator=(const Gw_vcu_control2_0x131_131& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_control2_0x131_131& default_instance();

  static inline const Gw_vcu_control2_0x131_131* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_control2_0x131_131*>(
               &_Gw_vcu_control2_0x131_131_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Gw_vcu_control2_0x131_131* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_control2_0x131_131* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_control2_0x131_131* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_control2_0x131_131& from);
  void MergeFrom(const Gw_vcu_control2_0x131_131& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_control2_0x131_131* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_control2_0x131_131_Vcu_sts_vcuType Vcu_sts_vcuType;
  static const Vcu_sts_vcuType VCU_STS_VCU_INITIALIZING =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_INITIALIZING;
  static const Vcu_sts_vcuType VCU_STS_VCU_READY =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_READY;
  static const Vcu_sts_vcuType VCU_STS_VCU_WARNING =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_WARNING;
  static const Vcu_sts_vcuType VCU_STS_VCU_FAULT =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_VCU_STS_VCU_FAULT;
  static inline bool Vcu_sts_vcuType_IsValid(int value) {
    return Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_IsValid(value);
  }
  static const Vcu_sts_vcuType Vcu_sts_vcuType_MIN =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_MIN;
  static const Vcu_sts_vcuType Vcu_sts_vcuType_MAX =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_MAX;
  static const int Vcu_sts_vcuType_ARRAYSIZE =
    Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Vcu_sts_vcuType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_sts_vcuType_descriptor() {
    return Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_descriptor();
  }
  static inline const ::std::string& Vcu_sts_vcuType_Name(Vcu_sts_vcuType value) {
    return Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Name(value);
  }
  static inline bool Vcu_sts_vcuType_Parse(const ::std::string& name,
      Vcu_sts_vcuType* value) {
    return Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_Parse(name, value);
  }

  typedef Gw_vcu_control2_0x131_131_Vcu_brake_flagType Vcu_brake_flagType;
  static const Vcu_brake_flagType VCU_BRAKE_FLAG_NO_ACTIVE =
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_NO_ACTIVE;
  static const Vcu_brake_flagType VCU_BRAKE_FLAG_ACTIVE =
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_VCU_BRAKE_FLAG_ACTIVE;
  static inline bool Vcu_brake_flagType_IsValid(int value) {
    return Gw_vcu_control2_0x131_131_Vcu_brake_flagType_IsValid(value);
  }
  static const Vcu_brake_flagType Vcu_brake_flagType_MIN =
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_MIN;
  static const Vcu_brake_flagType Vcu_brake_flagType_MAX =
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_MAX;
  static const int Vcu_brake_flagType_ARRAYSIZE =
    Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Vcu_brake_flagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_brake_flagType_descriptor() {
    return Gw_vcu_control2_0x131_131_Vcu_brake_flagType_descriptor();
  }
  static inline const ::std::string& Vcu_brake_flagType_Name(Vcu_brake_flagType value) {
    return Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Name(value);
  }
  static inline bool Vcu_brake_flagType_Parse(const ::std::string& name,
      Vcu_brake_flagType* value) {
    return Gw_vcu_control2_0x131_131_Vcu_brake_flagType_Parse(name, value);
  }

  typedef Gw_vcu_control2_0x131_131_Vcu_tractor_flagType Vcu_tractor_flagType;
  static const Vcu_tractor_flagType VCU_TRACTOR_FLAG_NO_ACTIVE =
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_NO_ACTIVE;
  static const Vcu_tractor_flagType VCU_TRACTOR_FLAG_ACTIVE =
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_VCU_TRACTOR_FLAG_ACTIVE;
  static inline bool Vcu_tractor_flagType_IsValid(int value) {
    return Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_IsValid(value);
  }
  static const Vcu_tractor_flagType Vcu_tractor_flagType_MIN =
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_MIN;
  static const Vcu_tractor_flagType Vcu_tractor_flagType_MAX =
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_MAX;
  static const int Vcu_tractor_flagType_ARRAYSIZE =
    Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Vcu_tractor_flagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_tractor_flagType_descriptor() {
    return Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_descriptor();
  }
  static inline const ::std::string& Vcu_tractor_flagType_Name(Vcu_tractor_flagType value) {
    return Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Name(value);
  }
  static inline bool Vcu_tractor_flagType_Parse(const ::std::string& name,
      Vcu_tractor_flagType* value) {
    return Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_Parse(name, value);
  }

  typedef Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType Vcu_pwt_mode_dashType;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_ECOHEV =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_ECOHEV;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_ECO_EV =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_ECO_EV;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_PWRHEV =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_PWRHEV;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_PWREV =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_PWREV;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_EV_ECO =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_EV_ECO;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_EV_POWER =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_EV_POWER;
  static const Vcu_pwt_mode_dashType VCU_PWT_MODE_DASH_RESERVED =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_VCU_PWT_MODE_DASH_RESERVED;
  static inline bool Vcu_pwt_mode_dashType_IsValid(int value) {
    return Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_IsValid(value);
  }
  static const Vcu_pwt_mode_dashType Vcu_pwt_mode_dashType_MIN =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_MIN;
  static const Vcu_pwt_mode_dashType Vcu_pwt_mode_dashType_MAX =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_MAX;
  static const int Vcu_pwt_mode_dashType_ARRAYSIZE =
    Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Vcu_pwt_mode_dashType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_pwt_mode_dashType_descriptor() {
    return Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_descriptor();
  }
  static inline const ::std::string& Vcu_pwt_mode_dashType_Name(Vcu_pwt_mode_dashType value) {
    return Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Name(value);
  }
  static inline bool Vcu_pwt_mode_dashType_Parse(const ::std::string& name,
      Vcu_pwt_mode_dashType* value) {
    return Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_Parse(name, value);
  }

  typedef Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType Vcu_mcu_motor1_capdischarge_reqType;
  static const Vcu_mcu_motor1_capdischarge_reqType VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_NO_REQUEST =
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_NO_REQUEST;
  static const Vcu_mcu_motor1_capdischarge_reqType VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_DISCHARGE =
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_DISCHARGE;
  static inline bool Vcu_mcu_motor1_capdischarge_reqType_IsValid(int value) {
    return Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_IsValid(value);
  }
  static const Vcu_mcu_motor1_capdischarge_reqType Vcu_mcu_motor1_capdischarge_reqType_MIN =
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_MIN;
  static const Vcu_mcu_motor1_capdischarge_reqType Vcu_mcu_motor1_capdischarge_reqType_MAX =
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_MAX;
  static const int Vcu_mcu_motor1_capdischarge_reqType_ARRAYSIZE =
    Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Vcu_mcu_motor1_capdischarge_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_mcu_motor1_capdischarge_reqType_descriptor() {
    return Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_descriptor();
  }
  static inline const ::std::string& Vcu_mcu_motor1_capdischarge_reqType_Name(Vcu_mcu_motor1_capdischarge_reqType value) {
    return Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Name(value);
  }
  static inline bool Vcu_mcu_motor1_capdischarge_reqType_Parse(const ::std::string& name,
      Vcu_mcu_motor1_capdischarge_reqType* value) {
    return Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x131 = 1;
  bool has_checksum_0x131() const;
  void clear_checksum_0x131();
  static const int kChecksum0X131FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x131() const;
  void set_checksum_0x131(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x131 = 2;
  bool has_rolling_counter_0x131() const;
  void clear_rolling_counter_0x131();
  static const int kRollingCounter0X131FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x131() const;
  void set_rolling_counter_0x131(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_sts_vcuType vcu_sts_vcu = 3;
  bool has_vcu_sts_vcu() const;
  void clear_vcu_sts_vcu();
  static const int kVcuStsVcuFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType vcu_sts_vcu() const;
  void set_vcu_sts_vcu(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType value);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_brake_flagType vcu_brake_flag = 4;
  bool has_vcu_brake_flag() const;
  void clear_vcu_brake_flag();
  static const int kVcuBrakeFlagFieldNumber = 4;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType vcu_brake_flag() const;
  void set_vcu_brake_flag(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType value);

  // optional double vcu_brkpedpos_meas_vcu = 6;
  bool has_vcu_brkpedpos_meas_vcu() const;
  void clear_vcu_brkpedpos_meas_vcu();
  static const int kVcuBrkpedposMeasVcuFieldNumber = 6;
  double vcu_brkpedpos_meas_vcu() const;
  void set_vcu_brkpedpos_meas_vcu(double value);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_tractor_flagType vcu_tractor_flag = 5;
  bool has_vcu_tractor_flag() const;
  void clear_vcu_tractor_flag();
  static const int kVcuTractorFlagFieldNumber = 5;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType vcu_tractor_flag() const;
  void set_vcu_tractor_flag(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType value);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_pwt_mode_dashType vcu_pwt_mode_dash = 7;
  bool has_vcu_pwt_mode_dash() const;
  void clear_vcu_pwt_mode_dash();
  static const int kVcuPwtModeDashFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType vcu_pwt_mode_dash() const;
  void set_vcu_pwt_mode_dash(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType value);

  // optional double vcu_mcu_motor1_trq_req = 9;
  bool has_vcu_mcu_motor1_trq_req() const;
  void clear_vcu_mcu_motor1_trq_req();
  static const int kVcuMcuMotor1TrqReqFieldNumber = 9;
  double vcu_mcu_motor1_trq_req() const;
  void set_vcu_mcu_motor1_trq_req(double value);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_mcu_motor1_capdischarge_reqType vcu_mcu_motor1_capdischarge_req = 8;
  bool has_vcu_mcu_motor1_capdischarge_req() const;
  void clear_vcu_mcu_motor1_capdischarge_req();
  static const int kVcuMcuMotor1CapdischargeReqFieldNumber = 8;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType vcu_mcu_motor1_capdischarge_req() const;
  void set_vcu_mcu_motor1_capdischarge_req(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType value);

  // optional int32 vcu_mcu_motor1_spd_req = 10;
  bool has_vcu_mcu_motor1_spd_req() const;
  void clear_vcu_mcu_motor1_spd_req();
  static const int kVcuMcuMotor1SpdReqFieldNumber = 10;
  ::google::protobuf::int32 vcu_mcu_motor1_spd_req() const;
  void set_vcu_mcu_motor1_spd_req(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_control2_0x131_131)
 private:
  void set_has_checksum_0x131();
  void clear_has_checksum_0x131();
  void set_has_rolling_counter_0x131();
  void clear_has_rolling_counter_0x131();
  void set_has_vcu_sts_vcu();
  void clear_has_vcu_sts_vcu();
  void set_has_vcu_brake_flag();
  void clear_has_vcu_brake_flag();
  void set_has_vcu_tractor_flag();
  void clear_has_vcu_tractor_flag();
  void set_has_vcu_brkpedpos_meas_vcu();
  void clear_has_vcu_brkpedpos_meas_vcu();
  void set_has_vcu_pwt_mode_dash();
  void clear_has_vcu_pwt_mode_dash();
  void set_has_vcu_mcu_motor1_capdischarge_req();
  void clear_has_vcu_mcu_motor1_capdischarge_req();
  void set_has_vcu_mcu_motor1_trq_req();
  void clear_has_vcu_mcu_motor1_trq_req();
  void set_has_vcu_mcu_motor1_spd_req();
  void clear_has_vcu_mcu_motor1_spd_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x131_;
  ::google::protobuf::int32 rolling_counter_0x131_;
  int vcu_sts_vcu_;
  int vcu_brake_flag_;
  double vcu_brkpedpos_meas_vcu_;
  int vcu_tractor_flag_;
  int vcu_pwt_mode_dash_;
  double vcu_mcu_motor1_trq_req_;
  int vcu_mcu_motor1_capdischarge_req_;
  ::google::protobuf::int32 vcu_mcu_motor1_spd_req_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_scu_shiftersts_0xc8_c8 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8) */ {
 public:
  Gw_scu_shiftersts_0xc8_c8();
  virtual ~Gw_scu_shiftersts_0xc8_c8();

  Gw_scu_shiftersts_0xc8_c8(const Gw_scu_shiftersts_0xc8_c8& from);

  inline Gw_scu_shiftersts_0xc8_c8& operator=(const Gw_scu_shiftersts_0xc8_c8& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_scu_shiftersts_0xc8_c8& default_instance();

  static inline const Gw_scu_shiftersts_0xc8_c8* internal_default_instance() {
    return reinterpret_cast<const Gw_scu_shiftersts_0xc8_c8*>(
               &_Gw_scu_shiftersts_0xc8_c8_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Gw_scu_shiftersts_0xc8_c8* other);

  // implements Message ----------------------------------------------

  inline Gw_scu_shiftersts_0xc8_c8* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_scu_shiftersts_0xc8_c8* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_scu_shiftersts_0xc8_c8& from);
  void MergeFrom(const Gw_scu_shiftersts_0xc8_c8& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_scu_shiftersts_0xc8_c8* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType Scu_shifterlockstatusType;
  static const Scu_shifterlockstatusType SCU_SHIFTERLOCKSTATUS_UNLOCKED =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_UNLOCKED;
  static const Scu_shifterlockstatusType SCU_SHIFTERLOCKSTATUS_LOCKED =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_LOCKED;
  static const Scu_shifterlockstatusType SCU_SHIFTERLOCKSTATUS_FAULT =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_SCU_SHIFTERLOCKSTATUS_FAULT;
  static inline bool Scu_shifterlockstatusType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_IsValid(value);
  }
  static const Scu_shifterlockstatusType Scu_shifterlockstatusType_MIN =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_MIN;
  static const Scu_shifterlockstatusType Scu_shifterlockstatusType_MAX =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_MAX;
  static const int Scu_shifterlockstatusType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Scu_shifterlockstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scu_shifterlockstatusType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_descriptor();
  }
  static inline const ::std::string& Scu_shifterlockstatusType_Name(Scu_shifterlockstatusType value) {
    return Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Name(value);
  }
  static inline bool Scu_shifterlockstatusType_Parse(const ::std::string& name,
      Scu_shifterlockstatusType* value) {
    return Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_Parse(name, value);
  }

  typedef Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType ShifterlockstatusType;
  static const ShifterlockstatusType SHIFTERLOCKSTATUS_UNLOCKED =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_UNLOCKED;
  static const ShifterlockstatusType SHIFTERLOCKSTATUS_LOCKED =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_LOCKED;
  static const ShifterlockstatusType SHIFTERLOCKSTATUS_FAULT =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_SHIFTERLOCKSTATUS_FAULT;
  static inline bool ShifterlockstatusType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_IsValid(value);
  }
  static const ShifterlockstatusType ShifterlockstatusType_MIN =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_MIN;
  static const ShifterlockstatusType ShifterlockstatusType_MAX =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_MAX;
  static const int ShifterlockstatusType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_ShifterlockstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShifterlockstatusType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_descriptor();
  }
  static inline const ::std::string& ShifterlockstatusType_Name(ShifterlockstatusType value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_Name(value);
  }
  static inline bool ShifterlockstatusType_Parse(const ::std::string& name,
      ShifterlockstatusType* value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_Parse(name, value);
  }

  typedef Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType ShifterpositionfailureType;
  static const ShifterpositionfailureType SHIFTERPOSITIONFAILURE_NOFAULT =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_NOFAULT;
  static const ShifterpositionfailureType SHIFTERPOSITIONFAILURE_MODESELECTORSENSORFAIL =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_MODESELECTORSENSORFAIL;
  static const ShifterpositionfailureType SHIFTERPOSITIONFAILURE_ROTARYPOSITIONSENSORFAIL =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_ROTARYPOSITIONSENSORFAIL;
  static const ShifterpositionfailureType SHIFTERPOSITIONFAILURE_CANBUSCOMMUNICATION =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_CANBUSCOMMUNICATION;
  static const ShifterpositionfailureType SHIFTERPOSITIONFAILURE_SOLENOIDFAIL =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_SHIFTERPOSITIONFAILURE_SOLENOIDFAIL;
  static inline bool ShifterpositionfailureType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_IsValid(value);
  }
  static const ShifterpositionfailureType ShifterpositionfailureType_MIN =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_MIN;
  static const ShifterpositionfailureType ShifterpositionfailureType_MAX =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_MAX;
  static const int ShifterpositionfailureType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_ShifterpositionfailureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShifterpositionfailureType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_descriptor();
  }
  static inline const ::std::string& ShifterpositionfailureType_Name(ShifterpositionfailureType value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_Name(value);
  }
  static inline bool ShifterpositionfailureType_Parse(const ::std::string& name,
      ShifterpositionfailureType* value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_Parse(name, value);
  }

  typedef Gw_scu_shiftersts_0xc8_c8_ShifterpositionType ShifterpositionType;
  static const ShifterpositionType SHIFTERPOSITION_ERROR =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_ERROR;
  static const ShifterpositionType SHIFTERPOSITION_MANUAL_MODE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_MANUAL_MODE;
  static const ShifterpositionType SHIFTERPOSITION_DRIVE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_DRIVE;
  static const ShifterpositionType SHIFTERPOSITION_NEUTRAL =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_NEUTRAL;
  static const ShifterpositionType SHIFTERPOSITION_REVERSE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_REVERSE;
  static const ShifterpositionType SHIFTERPOSITION_PARK =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_PARK;
  static const ShifterpositionType SHIFTERPOSITION_UPSHIFT =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_UPSHIFT;
  static const ShifterpositionType SHIFTERPOSITION_DOWNSHIFT =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_SHIFTERPOSITION_DOWNSHIFT;
  static inline bool ShifterpositionType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_IsValid(value);
  }
  static const ShifterpositionType ShifterpositionType_MIN =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_MIN;
  static const ShifterpositionType ShifterpositionType_MAX =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_MAX;
  static const int ShifterpositionType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_ShifterpositionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShifterpositionType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_descriptor();
  }
  static inline const ::std::string& ShifterpositionType_Name(ShifterpositionType value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_Name(value);
  }
  static inline bool ShifterpositionType_Parse(const ::std::string& name,
      ShifterpositionType* value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_Parse(name, value);
  }

  typedef Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType ShifterpositioninvType;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_DOWNSHIFT =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_DOWNSHIFT;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_UPSHIFT =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_UPSHIFT;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_PARK =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_PARK;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_REVERSE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_REVERSE;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_NEUTRAL =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_NEUTRAL;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_DRIVE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_DRIVE;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_MANUAL_MODE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_MANUAL_MODE;
  static const ShifterpositioninvType SHIFTERPOSITIONINV_ERROR =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_SHIFTERPOSITIONINV_ERROR;
  static inline bool ShifterpositioninvType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_IsValid(value);
  }
  static const ShifterpositioninvType ShifterpositioninvType_MIN =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_MIN;
  static const ShifterpositioninvType ShifterpositioninvType_MAX =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_MAX;
  static const int ShifterpositioninvType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_ShifterpositioninvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShifterpositioninvType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_descriptor();
  }
  static inline const ::std::string& ShifterpositioninvType_Name(ShifterpositioninvType value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_Name(value);
  }
  static inline bool ShifterpositioninvType_Parse(const ::std::string& name,
      ShifterpositioninvType* value) {
    return Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_Parse(name, value);
  }

  typedef Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType Sys_sts_scuType;
  static const Sys_sts_scuType SYS_STS_SCU_INIT =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_INIT;
  static const Sys_sts_scuType SYS_STS_SCU_OK =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_OK;
  static const Sys_sts_scuType SYS_STS_SCU_WARNING =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_WARNING;
  static const Sys_sts_scuType SYS_STS_SCU_FAULT =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_SYS_STS_SCU_FAULT;
  static inline bool Sys_sts_scuType_IsValid(int value) {
    return Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_IsValid(value);
  }
  static const Sys_sts_scuType Sys_sts_scuType_MIN =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_MIN;
  static const Sys_sts_scuType Sys_sts_scuType_MAX =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_MAX;
  static const int Sys_sts_scuType_ARRAYSIZE =
    Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Sys_sts_scuType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sys_sts_scuType_descriptor() {
    return Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_descriptor();
  }
  static inline const ::std::string& Sys_sts_scuType_Name(Sys_sts_scuType value) {
    return Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Name(value);
  }
  static inline bool Sys_sts_scuType_Parse(const ::std::string& name,
      Sys_sts_scuType* value) {
    return Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0xc8 = 1;
  bool has_checksum_0xc8() const;
  void clear_checksum_0xc8();
  static const int kChecksum0Xc8FieldNumber = 1;
  ::google::protobuf::int32 checksum_0xc8() const;
  void set_checksum_0xc8(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0xc8 = 2;
  bool has_rolling_counter_0xc8() const;
  void clear_rolling_counter_0xc8();
  static const int kRollingCounter0Xc8FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0xc8() const;
  void set_rolling_counter_0xc8(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.Scu_shifterlockstatusType scu_shifterlockstatus = 3;
  bool has_scu_shifterlockstatus() const;
  void clear_scu_shifterlockstatus();
  static const int kScuShifterlockstatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType scu_shifterlockstatus() const;
  void set_scu_shifterlockstatus(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterlockstatusType shifterlockstatus = 4;
  bool has_shifterlockstatus() const;
  void clear_shifterlockstatus();
  static const int kShifterlockstatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType shifterlockstatus() const;
  void set_shifterlockstatus(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositionfailureType shifterpositionfailure = 5;
  bool has_shifterpositionfailure() const;
  void clear_shifterpositionfailure();
  static const int kShifterpositionfailureFieldNumber = 5;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType shifterpositionfailure() const;
  void set_shifterpositionfailure(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositionType shifterposition = 6;
  bool has_shifterposition() const;
  void clear_shifterposition();
  static const int kShifterpositionFieldNumber = 6;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType shifterposition() const;
  void set_shifterposition(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.Sys_sts_scuType sys_sts_scu = 8;
  bool has_sys_sts_scu() const;
  void clear_sys_sts_scu();
  static const int kSysStsScuFieldNumber = 8;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType sys_sts_scu() const;
  void set_sys_sts_scu(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType value);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositioninvType shifterpositioninv = 7;
  bool has_shifterpositioninv() const;
  void clear_shifterpositioninv();
  static const int kShifterpositioninvFieldNumber = 7;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType shifterpositioninv() const;
  void set_shifterpositioninv(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8)
 private:
  void set_has_checksum_0xc8();
  void clear_has_checksum_0xc8();
  void set_has_rolling_counter_0xc8();
  void clear_has_rolling_counter_0xc8();
  void set_has_scu_shifterlockstatus();
  void clear_has_scu_shifterlockstatus();
  void set_has_shifterlockstatus();
  void clear_has_shifterlockstatus();
  void set_has_shifterpositionfailure();
  void clear_has_shifterpositionfailure();
  void set_has_shifterposition();
  void clear_has_shifterposition();
  void set_has_shifterpositioninv();
  void clear_has_shifterpositioninv();
  void set_has_sys_sts_scu();
  void clear_has_sys_sts_scu();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0xc8_;
  ::google::protobuf::int32 rolling_counter_0xc8_;
  int scu_shifterlockstatus_;
  int shifterlockstatus_;
  int shifterpositionfailure_;
  int shifterposition_;
  int sys_sts_scu_;
  int shifterpositioninv_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_drivests_0x10a_10a : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a) */ {
 public:
  Gw_vcu_drivests_0x10a_10a();
  virtual ~Gw_vcu_drivests_0x10a_10a();

  Gw_vcu_drivests_0x10a_10a(const Gw_vcu_drivests_0x10a_10a& from);

  inline Gw_vcu_drivests_0x10a_10a& operator=(const Gw_vcu_drivests_0x10a_10a& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_drivests_0x10a_10a& default_instance();

  static inline const Gw_vcu_drivests_0x10a_10a* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_drivests_0x10a_10a*>(
               &_Gw_vcu_drivests_0x10a_10a_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Gw_vcu_drivests_0x10a_10a* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_drivests_0x10a_10a* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_drivests_0x10a_10a* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_drivests_0x10a_10a& from);
  void MergeFrom(const Gw_vcu_drivests_0x10a_10a& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_drivests_0x10a_10a* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType Vcu_vehicleerror_interveneType;
  static const Vcu_vehicleerror_interveneType VCU_VEHICLEERROR_INTERVENE_NOTINTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_NOTINTERVENE;
  static const Vcu_vehicleerror_interveneType VCU_VEHICLEERROR_INTERVENE_INTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_VCU_VEHICLEERROR_INTERVENE_INTERVENE;
  static inline bool Vcu_vehicleerror_interveneType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_IsValid(value);
  }
  static const Vcu_vehicleerror_interveneType Vcu_vehicleerror_interveneType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_MIN;
  static const Vcu_vehicleerror_interveneType Vcu_vehicleerror_interveneType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_MAX;
  static const int Vcu_vehicleerror_interveneType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Vcu_vehicleerror_interveneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_vehicleerror_interveneType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_descriptor();
  }
  static inline const ::std::string& Vcu_vehicleerror_interveneType_Name(Vcu_vehicleerror_interveneType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Name(value);
  }
  static inline bool Vcu_vehicleerror_interveneType_Parse(const ::std::string& name,
      Vcu_vehicleerror_interveneType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType Vcu_torque_controlstatusType;
  static const Vcu_torque_controlstatusType VCU_TORQUE_CONTROLSTATUS_TEMPORARILY_INHIBIT =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_TEMPORARILY_INHIBIT;
  static const Vcu_torque_controlstatusType VCU_TORQUE_CONTROLSTATUS_AVAILABLEFORCONTROL =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_AVAILABLEFORCONTROL;
  static const Vcu_torque_controlstatusType VCU_TORQUE_CONTROLSTATUS_ACTIVE =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_ACTIVE;
  static const Vcu_torque_controlstatusType VCU_TORQUE_CONTROLSTATUS_PERMANENTLY_FAILED =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_VCU_TORQUE_CONTROLSTATUS_PERMANENTLY_FAILED;
  static inline bool Vcu_torque_controlstatusType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_IsValid(value);
  }
  static const Vcu_torque_controlstatusType Vcu_torque_controlstatusType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_MIN;
  static const Vcu_torque_controlstatusType Vcu_torque_controlstatusType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_MAX;
  static const int Vcu_torque_controlstatusType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Vcu_torque_controlstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_torque_controlstatusType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_descriptor();
  }
  static inline const ::std::string& Vcu_torque_controlstatusType_Name(Vcu_torque_controlstatusType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Name(value);
  }
  static inline bool Vcu_torque_controlstatusType_Parse(const ::std::string& name,
      Vcu_torque_controlstatusType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType Vcu_torquedriver_interveneType;
  static const Vcu_torquedriver_interveneType VCU_TORQUEDRIVER_INTERVENE_NOTINTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_NOTINTERVENE;
  static const Vcu_torquedriver_interveneType VCU_TORQUEDRIVER_INTERVENE_INTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_VCU_TORQUEDRIVER_INTERVENE_INTERVENE;
  static inline bool Vcu_torquedriver_interveneType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_IsValid(value);
  }
  static const Vcu_torquedriver_interveneType Vcu_torquedriver_interveneType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_MIN;
  static const Vcu_torquedriver_interveneType Vcu_torquedriver_interveneType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_MAX;
  static const int Vcu_torquedriver_interveneType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Vcu_torquedriver_interveneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_torquedriver_interveneType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_descriptor();
  }
  static inline const ::std::string& Vcu_torquedriver_interveneType_Name(Vcu_torquedriver_interveneType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Name(value);
  }
  static inline bool Vcu_torquedriver_interveneType_Parse(const ::std::string& name,
      Vcu_torquedriver_interveneType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType Vcu_gearpos_controlstatusType;
  static const Vcu_gearpos_controlstatusType VCU_GEARPOS_CONTROLSTATUS_TEMPORARILY_INHIBIT =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_TEMPORARILY_INHIBIT;
  static const Vcu_gearpos_controlstatusType VCU_GEARPOS_CONTROLSTATUS_AVAILABLEFORCONTROL =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_AVAILABLEFORCONTROL;
  static const Vcu_gearpos_controlstatusType VCU_GEARPOS_CONTROLSTATUS_ACTIVE =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_ACTIVE;
  static const Vcu_gearpos_controlstatusType VCU_GEARPOS_CONTROLSTATUS_PERMANENTLY_FAILED =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_VCU_GEARPOS_CONTROLSTATUS_PERMANENTLY_FAILED;
  static inline bool Vcu_gearpos_controlstatusType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_IsValid(value);
  }
  static const Vcu_gearpos_controlstatusType Vcu_gearpos_controlstatusType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_MIN;
  static const Vcu_gearpos_controlstatusType Vcu_gearpos_controlstatusType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_MAX;
  static const int Vcu_gearpos_controlstatusType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Vcu_gearpos_controlstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearpos_controlstatusType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_descriptor();
  }
  static inline const ::std::string& Vcu_gearpos_controlstatusType_Name(Vcu_gearpos_controlstatusType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Name(value);
  }
  static inline bool Vcu_gearpos_controlstatusType_Parse(const ::std::string& name,
      Vcu_gearpos_controlstatusType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType Vcu_gearposdriver_interveneType;
  static const Vcu_gearposdriver_interveneType VCU_GEARPOSDRIVER_INTERVENE_NOTINTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_NOTINTERVENE;
  static const Vcu_gearposdriver_interveneType VCU_GEARPOSDRIVER_INTERVENE_INTERVENE =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_VCU_GEARPOSDRIVER_INTERVENE_INTERVENE;
  static inline bool Vcu_gearposdriver_interveneType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_IsValid(value);
  }
  static const Vcu_gearposdriver_interveneType Vcu_gearposdriver_interveneType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_MIN;
  static const Vcu_gearposdriver_interveneType Vcu_gearposdriver_interveneType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_MAX;
  static const int Vcu_gearposdriver_interveneType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Vcu_gearposdriver_interveneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearposdriver_interveneType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_descriptor();
  }
  static inline const ::std::string& Vcu_gearposdriver_interveneType_Name(Vcu_gearposdriver_interveneType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Name(value);
  }
  static inline bool Vcu_gearposdriver_interveneType_Parse(const ::std::string& name,
      Vcu_gearposdriver_interveneType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType Vcu_veh_stsType;
  static const Vcu_veh_stsType VCU_VEH_STS_NOTREADY =
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_NOTREADY;
  static const Vcu_veh_stsType VCU_VEH_STS_READY =
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_VCU_VEH_STS_READY;
  static inline bool Vcu_veh_stsType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_IsValid(value);
  }
  static const Vcu_veh_stsType Vcu_veh_stsType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_MIN;
  static const Vcu_veh_stsType Vcu_veh_stsType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_MAX;
  static const int Vcu_veh_stsType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Vcu_veh_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_veh_stsType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_descriptor();
  }
  static inline const ::std::string& Vcu_veh_stsType_Name(Vcu_veh_stsType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Name(value);
  }
  static inline bool Vcu_veh_stsType_Parse(const ::std::string& name,
      Vcu_veh_stsType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_Parse(name, value);
  }

  typedef Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType Vcu_axlespdstType;
  static const Vcu_axlespdstType VCU_AXLESPDST_NOERROR =
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_NOERROR;
  static const Vcu_axlespdstType VCU_AXLESPDST_ERROR =
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_VCU_AXLESPDST_ERROR;
  static inline bool Vcu_axlespdstType_IsValid(int value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_IsValid(value);
  }
  static const Vcu_axlespdstType Vcu_axlespdstType_MIN =
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_MIN;
  static const Vcu_axlespdstType Vcu_axlespdstType_MAX =
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_MAX;
  static const int Vcu_axlespdstType_ARRAYSIZE =
    Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Vcu_axlespdstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_axlespdstType_descriptor() {
    return Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_descriptor();
  }
  static inline const ::std::string& Vcu_axlespdstType_Name(Vcu_axlespdstType value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Name(value);
  }
  static inline bool Vcu_axlespdstType_Parse(const ::std::string& name,
      Vcu_axlespdstType* value) {
    return Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x10a = 1;
  bool has_checksum_0x10a() const;
  void clear_checksum_0x10a();
  static const int kChecksum0X10AFieldNumber = 1;
  ::google::protobuf::int32 checksum_0x10a() const;
  void set_checksum_0x10a(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x10a = 2;
  bool has_rolling_counter_0x10a() const;
  void clear_rolling_counter_0x10a();
  static const int kRollingCounter0X10AFieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x10a() const;
  void set_rolling_counter_0x10a(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_vehicleerror_interveneType vcu_vehicleerror_intervene = 3;
  bool has_vcu_vehicleerror_intervene() const;
  void clear_vcu_vehicleerror_intervene();
  static const int kVcuVehicleerrorInterveneFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType vcu_vehicleerror_intervene() const;
  void set_vcu_vehicleerror_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_torque_controlstatusType vcu_torque_controlstatus = 4;
  bool has_vcu_torque_controlstatus() const;
  void clear_vcu_torque_controlstatus();
  static const int kVcuTorqueControlstatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType vcu_torque_controlstatus() const;
  void set_vcu_torque_controlstatus(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_torquedriver_interveneType vcu_torquedriver_intervene = 5;
  bool has_vcu_torquedriver_intervene() const;
  void clear_vcu_torquedriver_intervene();
  static const int kVcuTorquedriverInterveneFieldNumber = 5;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType vcu_torquedriver_intervene() const;
  void set_vcu_torquedriver_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_gearpos_controlstatusType vcu_gearpos_controlstatus = 6;
  bool has_vcu_gearpos_controlstatus() const;
  void clear_vcu_gearpos_controlstatus();
  static const int kVcuGearposControlstatusFieldNumber = 6;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType vcu_gearpos_controlstatus() const;
  void set_vcu_gearpos_controlstatus(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_gearposdriver_interveneType vcu_gearposdriver_intervene = 7;
  bool has_vcu_gearposdriver_intervene() const;
  void clear_vcu_gearposdriver_intervene();
  static const int kVcuGearposdriverInterveneFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType vcu_gearposdriver_intervene() const;
  void set_vcu_gearposdriver_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_veh_stsType vcu_veh_sts = 8;
  bool has_vcu_veh_sts() const;
  void clear_vcu_veh_sts();
  static const int kVcuVehStsFieldNumber = 8;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType vcu_veh_sts() const;
  void set_vcu_veh_sts(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType value);

  // optional double vcu_axlespd = 10;
  bool has_vcu_axlespd() const;
  void clear_vcu_axlespd();
  static const int kVcuAxlespdFieldNumber = 10;
  double vcu_axlespd() const;
  void set_vcu_axlespd(double value);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_axlespdstType vcu_axlespdst = 9;
  bool has_vcu_axlespdst() const;
  void clear_vcu_axlespdst();
  static const int kVcuAxlespdstFieldNumber = 9;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType vcu_axlespdst() const;
  void set_vcu_axlespdst(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a)
 private:
  void set_has_checksum_0x10a();
  void clear_has_checksum_0x10a();
  void set_has_rolling_counter_0x10a();
  void clear_has_rolling_counter_0x10a();
  void set_has_vcu_vehicleerror_intervene();
  void clear_has_vcu_vehicleerror_intervene();
  void set_has_vcu_torque_controlstatus();
  void clear_has_vcu_torque_controlstatus();
  void set_has_vcu_torquedriver_intervene();
  void clear_has_vcu_torquedriver_intervene();
  void set_has_vcu_gearpos_controlstatus();
  void clear_has_vcu_gearpos_controlstatus();
  void set_has_vcu_gearposdriver_intervene();
  void clear_has_vcu_gearposdriver_intervene();
  void set_has_vcu_veh_sts();
  void clear_has_vcu_veh_sts();
  void set_has_vcu_axlespdst();
  void clear_has_vcu_axlespdst();
  void set_has_vcu_axlespd();
  void clear_has_vcu_axlespd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x10a_;
  ::google::protobuf::int32 rolling_counter_0x10a_;
  int vcu_vehicleerror_intervene_;
  int vcu_torque_controlstatus_;
  int vcu_torquedriver_intervene_;
  int vcu_gearpos_controlstatus_;
  int vcu_gearposdriver_intervene_;
  int vcu_veh_sts_;
  double vcu_axlespd_;
  int vcu_axlespdst_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Adu_controlbrake_0x110_110 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Adu_controlbrake_0x110_110) */ {
 public:
  Adu_controlbrake_0x110_110();
  virtual ~Adu_controlbrake_0x110_110();

  Adu_controlbrake_0x110_110(const Adu_controlbrake_0x110_110& from);

  inline Adu_controlbrake_0x110_110& operator=(const Adu_controlbrake_0x110_110& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Adu_controlbrake_0x110_110& default_instance();

  static inline const Adu_controlbrake_0x110_110* internal_default_instance() {
    return reinterpret_cast<const Adu_controlbrake_0x110_110*>(
               &_Adu_controlbrake_0x110_110_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Adu_controlbrake_0x110_110* other);

  // implements Message ----------------------------------------------

  inline Adu_controlbrake_0x110_110* New() const PROTOBUF_FINAL { return New(NULL); }

  Adu_controlbrake_0x110_110* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Adu_controlbrake_0x110_110& from);
  void MergeFrom(const Adu_controlbrake_0x110_110& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Adu_controlbrake_0x110_110* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Adu_controlbrake_0x110_110_Adu_parkrelease_reqType Adu_parkrelease_reqType;
  static const Adu_parkrelease_reqType ADU_PARKRELEASE_REQ_NO_CONTROL =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_NO_CONTROL;
  static const Adu_parkrelease_reqType ADU_PARKRELEASE_REQ_RELEASE =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_RELEASE;
  static const Adu_parkrelease_reqType ADU_PARKRELEASE_REQ_PARK =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_PARK;
  static const Adu_parkrelease_reqType ADU_PARKRELEASE_REQ_RESERVED =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_ADU_PARKRELEASE_REQ_RESERVED;
  static inline bool Adu_parkrelease_reqType_IsValid(int value) {
    return Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_IsValid(value);
  }
  static const Adu_parkrelease_reqType Adu_parkrelease_reqType_MIN =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_MIN;
  static const Adu_parkrelease_reqType Adu_parkrelease_reqType_MAX =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_MAX;
  static const int Adu_parkrelease_reqType_ARRAYSIZE =
    Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Adu_parkrelease_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_parkrelease_reqType_descriptor() {
    return Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_descriptor();
  }
  static inline const ::std::string& Adu_parkrelease_reqType_Name(Adu_parkrelease_reqType value) {
    return Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Name(value);
  }
  static inline bool Adu_parkrelease_reqType_Parse(const ::std::string& name,
      Adu_parkrelease_reqType* value) {
    return Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_Parse(name, value);
  }

  typedef Adu_controlbrake_0x110_110_Adu_controbrk_standstillType Adu_controbrk_standstillType;
  static const Adu_controbrk_standstillType ADU_CONTROBRK_STANDSTILL_NOT_STANDSTILL =
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_NOT_STANDSTILL;
  static const Adu_controbrk_standstillType ADU_CONTROBRK_STANDSTILL_STANDSTILL =
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_ADU_CONTROBRK_STANDSTILL_STANDSTILL;
  static inline bool Adu_controbrk_standstillType_IsValid(int value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_IsValid(value);
  }
  static const Adu_controbrk_standstillType Adu_controbrk_standstillType_MIN =
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_MIN;
  static const Adu_controbrk_standstillType Adu_controbrk_standstillType_MAX =
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_MAX;
  static const int Adu_controbrk_standstillType_ARRAYSIZE =
    Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Adu_controbrk_standstillType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_controbrk_standstillType_descriptor() {
    return Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_descriptor();
  }
  static inline const ::std::string& Adu_controbrk_standstillType_Name(Adu_controbrk_standstillType value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Name(value);
  }
  static inline bool Adu_controbrk_standstillType_Parse(const ::std::string& name,
      Adu_controbrk_standstillType* value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_Parse(name, value);
  }

  typedef Adu_controlbrake_0x110_110_Adu_controbrk_enableType Adu_controbrk_enableType;
  static const Adu_controbrk_enableType ADU_CONTROBRK_ENABLE_DISABLE =
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_DISABLE;
  static const Adu_controbrk_enableType ADU_CONTROBRK_ENABLE_ENABLE =
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_ADU_CONTROBRK_ENABLE_ENABLE;
  static inline bool Adu_controbrk_enableType_IsValid(int value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_enableType_IsValid(value);
  }
  static const Adu_controbrk_enableType Adu_controbrk_enableType_MIN =
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_MIN;
  static const Adu_controbrk_enableType Adu_controbrk_enableType_MAX =
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_MAX;
  static const int Adu_controbrk_enableType_ARRAYSIZE =
    Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Adu_controbrk_enableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_controbrk_enableType_descriptor() {
    return Adu_controlbrake_0x110_110_Adu_controbrk_enableType_descriptor();
  }
  static inline const ::std::string& Adu_controbrk_enableType_Name(Adu_controbrk_enableType value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Name(value);
  }
  static inline bool Adu_controbrk_enableType_Parse(const ::std::string& name,
      Adu_controbrk_enableType* value) {
    return Adu_controlbrake_0x110_110_Adu_controbrk_enableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ic_checksum_0x110 = 1;
  bool has_ic_checksum_0x110() const;
  void clear_ic_checksum_0x110();
  static const int kIcChecksum0X110FieldNumber = 1;
  ::google::protobuf::int32 ic_checksum_0x110() const;
  void set_ic_checksum_0x110(::google::protobuf::int32 value);

  // optional int32 ic_rolling_counter_0x110 = 2;
  bool has_ic_rolling_counter_0x110() const;
  void clear_ic_rolling_counter_0x110();
  static const int kIcRollingCounter0X110FieldNumber = 2;
  ::google::protobuf::int32 ic_rolling_counter_0x110() const;
  void set_ic_rolling_counter_0x110(::google::protobuf::int32 value);

  // optional double adu_tgt_deceleration = 3;
  bool has_adu_tgt_deceleration() const;
  void clear_adu_tgt_deceleration();
  static const int kAduTgtDecelerationFieldNumber = 3;
  double adu_tgt_deceleration() const;
  void set_adu_tgt_deceleration(double value);

  // optional double adu_brktmcposition_req = 4;
  bool has_adu_brktmcposition_req() const;
  void clear_adu_brktmcposition_req();
  static const int kAduBrktmcpositionReqFieldNumber = 4;
  double adu_brktmcposition_req() const;
  void set_adu_brktmcposition_req(double value);

  // optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_parkrelease_reqType adu_parkrelease_req = 5;
  bool has_adu_parkrelease_req() const;
  void clear_adu_parkrelease_req();
  static const int kAduParkreleaseReqFieldNumber = 5;
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType adu_parkrelease_req() const;
  void set_adu_parkrelease_req(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType value);

  // optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_controbrk_standstillType adu_controbrk_standstill = 6;
  bool has_adu_controbrk_standstill() const;
  void clear_adu_controbrk_standstill();
  static const int kAduControbrkStandstillFieldNumber = 6;
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType adu_controbrk_standstill() const;
  void set_adu_controbrk_standstill(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType value);

  // optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_controbrk_enableType adu_controbrk_enable = 7;
  bool has_adu_controbrk_enable() const;
  void clear_adu_controbrk_enable();
  static const int kAduControbrkEnableFieldNumber = 7;
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType adu_controbrk_enable() const;
  void set_adu_controbrk_enable(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType value);

  // optional int32 adu_mastercylinderpressreq = 8;
  bool has_adu_mastercylinderpressreq() const;
  void clear_adu_mastercylinderpressreq();
  static const int kAduMastercylinderpressreqFieldNumber = 8;
  ::google::protobuf::int32 adu_mastercylinderpressreq() const;
  void set_adu_mastercylinderpressreq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Adu_controlbrake_0x110_110)
 private:
  void set_has_ic_checksum_0x110();
  void clear_has_ic_checksum_0x110();
  void set_has_ic_rolling_counter_0x110();
  void clear_has_ic_rolling_counter_0x110();
  void set_has_adu_tgt_deceleration();
  void clear_has_adu_tgt_deceleration();
  void set_has_adu_brktmcposition_req();
  void clear_has_adu_brktmcposition_req();
  void set_has_adu_parkrelease_req();
  void clear_has_adu_parkrelease_req();
  void set_has_adu_controbrk_standstill();
  void clear_has_adu_controbrk_standstill();
  void set_has_adu_controbrk_enable();
  void clear_has_adu_controbrk_enable();
  void set_has_adu_mastercylinderpressreq();
  void clear_has_adu_mastercylinderpressreq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ic_checksum_0x110_;
  ::google::protobuf::int32 ic_rolling_counter_0x110_;
  double adu_tgt_deceleration_;
  double adu_brktmcposition_req_;
  int adu_parkrelease_req_;
  int adu_controbrk_standstill_;
  int adu_controbrk_enable_;
  ::google::protobuf::int32 adu_mastercylinderpressreq_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Eps2_status_0x112_112 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Eps2_status_0x112_112) */ {
 public:
  Eps2_status_0x112_112();
  virtual ~Eps2_status_0x112_112();

  Eps2_status_0x112_112(const Eps2_status_0x112_112& from);

  inline Eps2_status_0x112_112& operator=(const Eps2_status_0x112_112& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Eps2_status_0x112_112& default_instance();

  static inline const Eps2_status_0x112_112* internal_default_instance() {
    return reinterpret_cast<const Eps2_status_0x112_112*>(
               &_Eps2_status_0x112_112_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Eps2_status_0x112_112* other);

  // implements Message ----------------------------------------------

  inline Eps2_status_0x112_112* New() const PROTOBUF_FINAL { return New(NULL); }

  Eps2_status_0x112_112* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Eps2_status_0x112_112& from);
  void MergeFrom(const Eps2_status_0x112_112& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Eps2_status_0x112_112* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Eps2_status_0x112_112_Eps_controlstatusType Eps_controlstatusType;
  static const Eps_controlstatusType EPS_CONTROLSTATUS_TEMPORARILY_INHIBIT =
    Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_TEMPORARILY_INHIBIT;
  static const Eps_controlstatusType EPS_CONTROLSTATUS_AVAILABLE_FOR_CONTROL =
    Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_AVAILABLE_FOR_CONTROL;
  static const Eps_controlstatusType EPS_CONTROLSTATUS_ACTIVE =
    Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_ACTIVE;
  static const Eps_controlstatusType EPS_CONTROLSTATUS_PERMANENTLY_FAILED =
    Eps2_status_0x112_112_Eps_controlstatusType_EPS_CONTROLSTATUS_PERMANENTLY_FAILED;
  static inline bool Eps_controlstatusType_IsValid(int value) {
    return Eps2_status_0x112_112_Eps_controlstatusType_IsValid(value);
  }
  static const Eps_controlstatusType Eps_controlstatusType_MIN =
    Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_MIN;
  static const Eps_controlstatusType Eps_controlstatusType_MAX =
    Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_MAX;
  static const int Eps_controlstatusType_ARRAYSIZE =
    Eps2_status_0x112_112_Eps_controlstatusType_Eps_controlstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_controlstatusType_descriptor() {
    return Eps2_status_0x112_112_Eps_controlstatusType_descriptor();
  }
  static inline const ::std::string& Eps_controlstatusType_Name(Eps_controlstatusType value) {
    return Eps2_status_0x112_112_Eps_controlstatusType_Name(value);
  }
  static inline bool Eps_controlstatusType_Parse(const ::std::string& name,
      Eps_controlstatusType* value) {
    return Eps2_status_0x112_112_Eps_controlstatusType_Parse(name, value);
  }

  typedef Eps2_status_0x112_112_Eps_driver_interveneType Eps_driver_interveneType;
  static const Eps_driver_interveneType EPS_DRIVER_INTERVENE_NOT_INTERVENE =
    Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_NOT_INTERVENE;
  static const Eps_driver_interveneType EPS_DRIVER_INTERVENE_INTERVENE =
    Eps2_status_0x112_112_Eps_driver_interveneType_EPS_DRIVER_INTERVENE_INTERVENE;
  static inline bool Eps_driver_interveneType_IsValid(int value) {
    return Eps2_status_0x112_112_Eps_driver_interveneType_IsValid(value);
  }
  static const Eps_driver_interveneType Eps_driver_interveneType_MIN =
    Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_MIN;
  static const Eps_driver_interveneType Eps_driver_interveneType_MAX =
    Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_MAX;
  static const int Eps_driver_interveneType_ARRAYSIZE =
    Eps2_status_0x112_112_Eps_driver_interveneType_Eps_driver_interveneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_driver_interveneType_descriptor() {
    return Eps2_status_0x112_112_Eps_driver_interveneType_descriptor();
  }
  static inline const ::std::string& Eps_driver_interveneType_Name(Eps_driver_interveneType value) {
    return Eps2_status_0x112_112_Eps_driver_interveneType_Name(value);
  }
  static inline bool Eps_driver_interveneType_Parse(const ::std::string& name,
      Eps_driver_interveneType* value) {
    return Eps2_status_0x112_112_Eps_driver_interveneType_Parse(name, value);
  }

  typedef Eps2_status_0x112_112_Eps_sasfailurestsType Eps_sasfailurestsType;
  static const Eps_sasfailurestsType EPS_SASFAILURESTS_SENSOR_INFORMATION_INVALID__AN_INTERNAL_SENSOR_FAULT_OCCURRED =
    Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_INVALID__AN_INTERNAL_SENSOR_FAULT_OCCURRED;
  static const Eps_sasfailurestsType EPS_SASFAILURESTS_SENSOR_INFORMATION_VALID =
    Eps2_status_0x112_112_Eps_sasfailurestsType_EPS_SASFAILURESTS_SENSOR_INFORMATION_VALID;
  static inline bool Eps_sasfailurestsType_IsValid(int value) {
    return Eps2_status_0x112_112_Eps_sasfailurestsType_IsValid(value);
  }
  static const Eps_sasfailurestsType Eps_sasfailurestsType_MIN =
    Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_MIN;
  static const Eps_sasfailurestsType Eps_sasfailurestsType_MAX =
    Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_MAX;
  static const int Eps_sasfailurestsType_ARRAYSIZE =
    Eps2_status_0x112_112_Eps_sasfailurestsType_Eps_sasfailurestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_sasfailurestsType_descriptor() {
    return Eps2_status_0x112_112_Eps_sasfailurestsType_descriptor();
  }
  static inline const ::std::string& Eps_sasfailurestsType_Name(Eps_sasfailurestsType value) {
    return Eps2_status_0x112_112_Eps_sasfailurestsType_Name(value);
  }
  static inline bool Eps_sasfailurestsType_Parse(const ::std::string& name,
      Eps_sasfailurestsType* value) {
    return Eps2_status_0x112_112_Eps_sasfailurestsType_Parse(name, value);
  }

  typedef Eps2_status_0x112_112_Eps_torsionbartorquedirType Eps_torsionbartorquedirType;
  static const Eps_torsionbartorquedirType EPS_TORSIONBARTORQUEDIR_POSITIVE =
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_POSITIVE;
  static const Eps_torsionbartorquedirType EPS_TORSIONBARTORQUEDIR_NEGATIVE =
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_EPS_TORSIONBARTORQUEDIR_NEGATIVE;
  static inline bool Eps_torsionbartorquedirType_IsValid(int value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquedirType_IsValid(value);
  }
  static const Eps_torsionbartorquedirType Eps_torsionbartorquedirType_MIN =
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_MIN;
  static const Eps_torsionbartorquedirType Eps_torsionbartorquedirType_MAX =
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_MAX;
  static const int Eps_torsionbartorquedirType_ARRAYSIZE =
    Eps2_status_0x112_112_Eps_torsionbartorquedirType_Eps_torsionbartorquedirType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_torsionbartorquedirType_descriptor() {
    return Eps2_status_0x112_112_Eps_torsionbartorquedirType_descriptor();
  }
  static inline const ::std::string& Eps_torsionbartorquedirType_Name(Eps_torsionbartorquedirType value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquedirType_Name(value);
  }
  static inline bool Eps_torsionbartorquedirType_Parse(const ::std::string& name,
      Eps_torsionbartorquedirType* value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquedirType_Parse(name, value);
  }

  typedef Eps2_status_0x112_112_Eps_torsionbartorquevalidType Eps_torsionbartorquevalidType;
  static const Eps_torsionbartorquevalidType EPS_TORSIONBARTORQUEVALID_INVALID =
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_INVALID;
  static const Eps_torsionbartorquevalidType EPS_TORSIONBARTORQUEVALID_VALID =
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_EPS_TORSIONBARTORQUEVALID_VALID;
  static inline bool Eps_torsionbartorquevalidType_IsValid(int value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquevalidType_IsValid(value);
  }
  static const Eps_torsionbartorquevalidType Eps_torsionbartorquevalidType_MIN =
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_MIN;
  static const Eps_torsionbartorquevalidType Eps_torsionbartorquevalidType_MAX =
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_MAX;
  static const int Eps_torsionbartorquevalidType_ARRAYSIZE =
    Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Eps_torsionbartorquevalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_torsionbartorquevalidType_descriptor() {
    return Eps2_status_0x112_112_Eps_torsionbartorquevalidType_descriptor();
  }
  static inline const ::std::string& Eps_torsionbartorquevalidType_Name(Eps_torsionbartorquevalidType value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Name(value);
  }
  static inline bool Eps_torsionbartorquevalidType_Parse(const ::std::string& name,
      Eps_torsionbartorquevalidType* value) {
    return Eps2_status_0x112_112_Eps_torsionbartorquevalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_controlstatusType eps_controlstatus = 1;
  bool has_eps_controlstatus() const;
  void clear_eps_controlstatus();
  static const int kEpsControlstatusFieldNumber = 1;
  ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType eps_controlstatus() const;
  void set_eps_controlstatus(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType value);

  // optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_driver_interveneType eps_driver_intervene = 2;
  bool has_eps_driver_intervene() const;
  void clear_eps_driver_intervene();
  static const int kEpsDriverInterveneFieldNumber = 2;
  ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType eps_driver_intervene() const;
  void set_eps_driver_intervene(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType value);

  // optional double eps_steeringwheelang = 4;
  bool has_eps_steeringwheelang() const;
  void clear_eps_steeringwheelang();
  static const int kEpsSteeringwheelangFieldNumber = 4;
  double eps_steeringwheelang() const;
  void set_eps_steeringwheelang(double value);

  // optional int32 eps_steerwheelrotspd = 3;
  bool has_eps_steerwheelrotspd() const;
  void clear_eps_steerwheelrotspd();
  static const int kEpsSteerwheelrotspdFieldNumber = 3;
  ::google::protobuf::int32 eps_steerwheelrotspd() const;
  void set_eps_steerwheelrotspd(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_sasfailurestsType eps_sasfailurests = 6;
  bool has_eps_sasfailurests() const;
  void clear_eps_sasfailurests();
  static const int kEpsSasfailurestsFieldNumber = 6;
  ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType eps_sasfailurests() const;
  void set_eps_sasfailurests(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType value);

  // optional double eps_torsionbartorque = 5;
  bool has_eps_torsionbartorque() const;
  void clear_eps_torsionbartorque();
  static const int kEpsTorsionbartorqueFieldNumber = 5;
  double eps_torsionbartorque() const;
  void set_eps_torsionbartorque(double value);

  // optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_torsionbartorquedirType eps_torsionbartorquedir = 7;
  bool has_eps_torsionbartorquedir() const;
  void clear_eps_torsionbartorquedir();
  static const int kEpsTorsionbartorquedirFieldNumber = 7;
  ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType eps_torsionbartorquedir() const;
  void set_eps_torsionbartorquedir(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType value);

  // optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_torsionbartorquevalidType eps_torsionbartorquevalid = 8;
  bool has_eps_torsionbartorquevalid() const;
  void clear_eps_torsionbartorquevalid();
  static const int kEpsTorsionbartorquevalidFieldNumber = 8;
  ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType eps_torsionbartorquevalid() const;
  void set_eps_torsionbartorquevalid(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Eps2_status_0x112_112)
 private:
  void set_has_eps_controlstatus();
  void clear_has_eps_controlstatus();
  void set_has_eps_driver_intervene();
  void clear_has_eps_driver_intervene();
  void set_has_eps_steerwheelrotspd();
  void clear_has_eps_steerwheelrotspd();
  void set_has_eps_steeringwheelang();
  void clear_has_eps_steeringwheelang();
  void set_has_eps_torsionbartorque();
  void clear_has_eps_torsionbartorque();
  void set_has_eps_sasfailurests();
  void clear_has_eps_sasfailurests();
  void set_has_eps_torsionbartorquedir();
  void clear_has_eps_torsionbartorquedir();
  void set_has_eps_torsionbartorquevalid();
  void clear_has_eps_torsionbartorquevalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int eps_controlstatus_;
  int eps_driver_intervene_;
  double eps_steeringwheelang_;
  ::google::protobuf::int32 eps_steerwheelrotspd_;
  int eps_sasfailurests_;
  double eps_torsionbartorque_;
  int eps_torsionbartorquedir_;
  int eps_torsionbartorquevalid_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_mcu_power_0x226_226 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_mcu_power_0x226_226) */ {
 public:
  Gw_mcu_power_0x226_226();
  virtual ~Gw_mcu_power_0x226_226();

  Gw_mcu_power_0x226_226(const Gw_mcu_power_0x226_226& from);

  inline Gw_mcu_power_0x226_226& operator=(const Gw_mcu_power_0x226_226& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_mcu_power_0x226_226& default_instance();

  static inline const Gw_mcu_power_0x226_226* internal_default_instance() {
    return reinterpret_cast<const Gw_mcu_power_0x226_226*>(
               &_Gw_mcu_power_0x226_226_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Gw_mcu_power_0x226_226* other);

  // implements Message ----------------------------------------------

  inline Gw_mcu_power_0x226_226* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_mcu_power_0x226_226* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_mcu_power_0x226_226& from);
  void MergeFrom(const Gw_mcu_power_0x226_226& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_mcu_power_0x226_226* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_mcu_power_0x226_226_Mcu_sys_stsType Mcu_sys_stsType;
  static const Mcu_sys_stsType MCU_SYS_STS_INIT =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_INIT;
  static const Mcu_sys_stsType MCU_SYS_STS_OK =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_OK;
  static const Mcu_sys_stsType MCU_SYS_STS_WARNING =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_WARNING;
  static const Mcu_sys_stsType MCU_SYS_STS_FAULT =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_MCU_SYS_STS_FAULT;
  static inline bool Mcu_sys_stsType_IsValid(int value) {
    return Gw_mcu_power_0x226_226_Mcu_sys_stsType_IsValid(value);
  }
  static const Mcu_sys_stsType Mcu_sys_stsType_MIN =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_MIN;
  static const Mcu_sys_stsType Mcu_sys_stsType_MAX =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_MAX;
  static const int Mcu_sys_stsType_ARRAYSIZE =
    Gw_mcu_power_0x226_226_Mcu_sys_stsType_Mcu_sys_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mcu_sys_stsType_descriptor() {
    return Gw_mcu_power_0x226_226_Mcu_sys_stsType_descriptor();
  }
  static inline const ::std::string& Mcu_sys_stsType_Name(Mcu_sys_stsType value) {
    return Gw_mcu_power_0x226_226_Mcu_sys_stsType_Name(value);
  }
  static inline bool Mcu_sys_stsType_Parse(const ::std::string& name,
      Mcu_sys_stsType* value) {
    return Gw_mcu_power_0x226_226_Mcu_sys_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x226 = 1;
  bool has_checksum_0x226() const;
  void clear_checksum_0x226();
  static const int kChecksum0X226FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x226() const;
  void set_checksum_0x226(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x226 = 2;
  bool has_rolling_counter_0x226() const;
  void clear_rolling_counter_0x226();
  static const int kRollingCounter0X226FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x226() const;
  void set_rolling_counter_0x226(::google::protobuf::int32 value);

  // optional bool mcu_serialnum_est = 3;
  bool has_mcu_serialnum_est() const;
  void clear_mcu_serialnum_est();
  static const int kMcuSerialnumEstFieldNumber = 3;
  bool mcu_serialnum_est() const;
  void set_mcu_serialnum_est(bool value);

  // optional int32 mcu_tm04_trqmindyn = 4;
  bool has_mcu_tm04_trqmindyn() const;
  void clear_mcu_tm04_trqmindyn();
  static const int kMcuTm04TrqmindynFieldNumber = 4;
  ::google::protobuf::int32 mcu_tm04_trqmindyn() const;
  void set_mcu_tm04_trqmindyn(::google::protobuf::int32 value);

  // optional int32 mcu_tm04_trqmaxdyn = 5;
  bool has_mcu_tm04_trqmaxdyn() const;
  void clear_mcu_tm04_trqmaxdyn();
  static const int kMcuTm04TrqmaxdynFieldNumber = 5;
  ::google::protobuf::int32 mcu_tm04_trqmaxdyn() const;
  void set_mcu_tm04_trqmaxdyn(::google::protobuf::int32 value);

  // optional int32 mcu_maxtrq_est = 6;
  bool has_mcu_maxtrq_est() const;
  void clear_mcu_maxtrq_est();
  static const int kMcuMaxtrqEstFieldNumber = 6;
  ::google::protobuf::int32 mcu_maxtrq_est() const;
  void set_mcu_maxtrq_est(::google::protobuf::int32 value);

  // optional int32 mcu_mintrq_est = 7;
  bool has_mcu_mintrq_est() const;
  void clear_mcu_mintrq_est();
  static const int kMcuMintrqEstFieldNumber = 7;
  ::google::protobuf::int32 mcu_mintrq_est() const;
  void set_mcu_mintrq_est(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_mcu_power_0x226_226.Mcu_sys_stsType mcu_sys_sts = 8;
  bool has_mcu_sys_sts() const;
  void clear_mcu_sys_sts();
  static const int kMcuSysStsFieldNumber = 8;
  ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType mcu_sys_sts() const;
  void set_mcu_sys_sts(::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_mcu_power_0x226_226)
 private:
  void set_has_checksum_0x226();
  void clear_has_checksum_0x226();
  void set_has_rolling_counter_0x226();
  void clear_has_rolling_counter_0x226();
  void set_has_mcu_serialnum_est();
  void clear_has_mcu_serialnum_est();
  void set_has_mcu_tm04_trqmindyn();
  void clear_has_mcu_tm04_trqmindyn();
  void set_has_mcu_tm04_trqmaxdyn();
  void clear_has_mcu_tm04_trqmaxdyn();
  void set_has_mcu_maxtrq_est();
  void clear_has_mcu_maxtrq_est();
  void set_has_mcu_mintrq_est();
  void clear_has_mcu_mintrq_est();
  void set_has_mcu_sys_sts();
  void clear_has_mcu_sys_sts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x226_;
  ::google::protobuf::int32 rolling_counter_0x226_;
  bool mcu_serialnum_est_;
  ::google::protobuf::int32 mcu_tm04_trqmindyn_;
  ::google::protobuf::int32 mcu_tm04_trqmaxdyn_;
  ::google::protobuf::int32 mcu_maxtrq_est_;
  ::google::protobuf::int32 mcu_mintrq_est_;
  int mcu_sys_sts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Adu_controleps2_0x100_100 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Adu_controleps2_0x100_100) */ {
 public:
  Adu_controleps2_0x100_100();
  virtual ~Adu_controleps2_0x100_100();

  Adu_controleps2_0x100_100(const Adu_controleps2_0x100_100& from);

  inline Adu_controleps2_0x100_100& operator=(const Adu_controleps2_0x100_100& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Adu_controleps2_0x100_100& default_instance();

  static inline const Adu_controleps2_0x100_100* internal_default_instance() {
    return reinterpret_cast<const Adu_controleps2_0x100_100*>(
               &_Adu_controleps2_0x100_100_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Adu_controleps2_0x100_100* other);

  // implements Message ----------------------------------------------

  inline Adu_controleps2_0x100_100* New() const PROTOBUF_FINAL { return New(NULL); }

  Adu_controleps2_0x100_100* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Adu_controleps2_0x100_100& from);
  void MergeFrom(const Adu_controleps2_0x100_100& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Adu_controleps2_0x100_100* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Adu_controleps2_0x100_100_Adu_controepsenableType Adu_controepsenableType;
  static const Adu_controepsenableType ADU_CONTROEPSENABLE_DISABLE =
    Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_DISABLE;
  static const Adu_controepsenableType ADU_CONTROEPSENABLE_ENABLE =
    Adu_controleps2_0x100_100_Adu_controepsenableType_ADU_CONTROEPSENABLE_ENABLE;
  static inline bool Adu_controepsenableType_IsValid(int value) {
    return Adu_controleps2_0x100_100_Adu_controepsenableType_IsValid(value);
  }
  static const Adu_controepsenableType Adu_controepsenableType_MIN =
    Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_MIN;
  static const Adu_controepsenableType Adu_controepsenableType_MAX =
    Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_MAX;
  static const int Adu_controepsenableType_ARRAYSIZE =
    Adu_controleps2_0x100_100_Adu_controepsenableType_Adu_controepsenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_controepsenableType_descriptor() {
    return Adu_controleps2_0x100_100_Adu_controepsenableType_descriptor();
  }
  static inline const ::std::string& Adu_controepsenableType_Name(Adu_controepsenableType value) {
    return Adu_controleps2_0x100_100_Adu_controepsenableType_Name(value);
  }
  static inline bool Adu_controepsenableType_Parse(const ::std::string& name,
      Adu_controepsenableType* value) {
    return Adu_controleps2_0x100_100_Adu_controepsenableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 adu_100h_messagechecksum = 1;
  bool has_adu_100h_messagechecksum() const;
  void clear_adu_100h_messagechecksum();
  static const int kAdu100HMessagechecksumFieldNumber = 1;
  ::google::protobuf::int32 adu_100h_messagechecksum() const;
  void set_adu_100h_messagechecksum(::google::protobuf::int32 value);

  // optional int32 adu_100h_messagecounter = 2;
  bool has_adu_100h_messagecounter() const;
  void clear_adu_100h_messagecounter();
  static const int kAdu100HMessagecounterFieldNumber = 2;
  ::google::protobuf::int32 adu_100h_messagecounter() const;
  void set_adu_100h_messagecounter(::google::protobuf::int32 value);

  // optional double adu_controsteeringwheelangle = 4;
  bool has_adu_controsteeringwheelangle() const;
  void clear_adu_controsteeringwheelangle();
  static const int kAduControsteeringwheelangleFieldNumber = 4;
  double adu_controsteeringwheelangle() const;
  void set_adu_controsteeringwheelangle(double value);

  // optional int32 adu_ctrsteeringwheelanglespeed = 3;
  bool has_adu_ctrsteeringwheelanglespeed() const;
  void clear_adu_ctrsteeringwheelanglespeed();
  static const int kAduCtrsteeringwheelanglespeedFieldNumber = 3;
  ::google::protobuf::int32 adu_ctrsteeringwheelanglespeed() const;
  void set_adu_ctrsteeringwheelanglespeed(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Adu_controleps2_0x100_100.Adu_controepsenableType adu_controepsenable = 5;
  bool has_adu_controepsenable() const;
  void clear_adu_controepsenable();
  static const int kAduControepsenableFieldNumber = 5;
  ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType adu_controepsenable() const;
  void set_adu_controepsenable(::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Adu_controleps2_0x100_100)
 private:
  void set_has_adu_100h_messagechecksum();
  void clear_has_adu_100h_messagechecksum();
  void set_has_adu_100h_messagecounter();
  void clear_has_adu_100h_messagecounter();
  void set_has_adu_ctrsteeringwheelanglespeed();
  void clear_has_adu_ctrsteeringwheelanglespeed();
  void set_has_adu_controsteeringwheelangle();
  void clear_has_adu_controsteeringwheelangle();
  void set_has_adu_controepsenable();
  void clear_has_adu_controepsenable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 adu_100h_messagechecksum_;
  ::google::protobuf::int32 adu_100h_messagecounter_;
  double adu_controsteeringwheelangle_;
  ::google::protobuf::int32 adu_ctrsteeringwheelanglespeed_;
  int adu_controepsenable_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_mcu_output_0x225_225 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_mcu_output_0x225_225) */ {
 public:
  Gw_mcu_output_0x225_225();
  virtual ~Gw_mcu_output_0x225_225();

  Gw_mcu_output_0x225_225(const Gw_mcu_output_0x225_225& from);

  inline Gw_mcu_output_0x225_225& operator=(const Gw_mcu_output_0x225_225& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_mcu_output_0x225_225& default_instance();

  static inline const Gw_mcu_output_0x225_225* internal_default_instance() {
    return reinterpret_cast<const Gw_mcu_output_0x225_225*>(
               &_Gw_mcu_output_0x225_225_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Gw_mcu_output_0x225_225* other);

  // implements Message ----------------------------------------------

  inline Gw_mcu_output_0x225_225* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_mcu_output_0x225_225* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_mcu_output_0x225_225& from);
  void MergeFrom(const Gw_mcu_output_0x225_225& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_mcu_output_0x225_225* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_mcu_output_0x225_225_Mcu_work_stsType Mcu_work_stsType;
  static const Mcu_work_stsType MCU_WORK_STS_CONSUM =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_CONSUM;
  static const Mcu_work_stsType MCU_WORK_STS_GENERATE =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_GENERATE;
  static const Mcu_work_stsType MCU_WORK_STS_OFF =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_OFF;
  static const Mcu_work_stsType MCU_WORK_STS_READY =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_READY;
  static const Mcu_work_stsType MCU_WORK_STS_INVALID =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_MCU_WORK_STS_INVALID;
  static inline bool Mcu_work_stsType_IsValid(int value) {
    return Gw_mcu_output_0x225_225_Mcu_work_stsType_IsValid(value);
  }
  static const Mcu_work_stsType Mcu_work_stsType_MIN =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_MIN;
  static const Mcu_work_stsType Mcu_work_stsType_MAX =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_MAX;
  static const int Mcu_work_stsType_ARRAYSIZE =
    Gw_mcu_output_0x225_225_Mcu_work_stsType_Mcu_work_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mcu_work_stsType_descriptor() {
    return Gw_mcu_output_0x225_225_Mcu_work_stsType_descriptor();
  }
  static inline const ::std::string& Mcu_work_stsType_Name(Mcu_work_stsType value) {
    return Gw_mcu_output_0x225_225_Mcu_work_stsType_Name(value);
  }
  static inline bool Mcu_work_stsType_Parse(const ::std::string& name,
      Mcu_work_stsType* value) {
    return Gw_mcu_output_0x225_225_Mcu_work_stsType_Parse(name, value);
  }

  typedef Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType Mcu_ctrmode_stsType;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_INITIALIZATION =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_INITIALIZATION;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_PRECHARGE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_PRECHARGE;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_DISABLE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_DISABLE;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_STANDBY =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_STANDBY;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_ANTISLIP =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ANTISLIP;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_ALOFFSETCAL =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ALOFFSETCAL;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_NCTLINT =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_NCTLINT;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_TRQCT =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_TRQCT;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_ASCACTIVE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_ASCACTIVE;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_AFTERRUN =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_AFTERRUN;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_PREFAILURE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_PREFAILURE;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_FAILURE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_FAILURE;
  static const Mcu_ctrmode_stsType MCU_CTRMODE_STS_DISCHARGE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_MCU_CTRMODE_STS_DISCHARGE;
  static inline bool Mcu_ctrmode_stsType_IsValid(int value) {
    return Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_IsValid(value);
  }
  static const Mcu_ctrmode_stsType Mcu_ctrmode_stsType_MIN =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_MIN;
  static const Mcu_ctrmode_stsType Mcu_ctrmode_stsType_MAX =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_MAX;
  static const int Mcu_ctrmode_stsType_ARRAYSIZE =
    Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Mcu_ctrmode_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mcu_ctrmode_stsType_descriptor() {
    return Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_descriptor();
  }
  static inline const ::std::string& Mcu_ctrmode_stsType_Name(Mcu_ctrmode_stsType value) {
    return Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Name(value);
  }
  static inline bool Mcu_ctrmode_stsType_Parse(const ::std::string& name,
      Mcu_ctrmode_stsType* value) {
    return Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_Parse(name, value);
  }

  typedef Gw_mcu_output_0x225_225_Mcu_capacitor_stsType Mcu_capacitor_stsType;
  static const Mcu_capacitor_stsType MCU_CAPACITOR_STS_FORBIDCHARGE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_FORBIDCHARGE;
  static const Mcu_capacitor_stsType MCU_CAPACITOR_STS_WAITCHARGE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_WAITCHARGE;
  static const Mcu_capacitor_stsType MCU_CAPACITOR_STS_ALLOWDISCHARGE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_ALLOWDISCHARGE;
  static const Mcu_capacitor_stsType MCU_CAPACITOR_STS_FORBIDDISCHARGE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_FORBIDDISCHARGE;
  static const Mcu_capacitor_stsType MCU_CAPACITOR_STS_ERRORDISCHARGE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_MCU_CAPACITOR_STS_ERRORDISCHARGE;
  static inline bool Mcu_capacitor_stsType_IsValid(int value) {
    return Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_IsValid(value);
  }
  static const Mcu_capacitor_stsType Mcu_capacitor_stsType_MIN =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_MIN;
  static const Mcu_capacitor_stsType Mcu_capacitor_stsType_MAX =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_MAX;
  static const int Mcu_capacitor_stsType_ARRAYSIZE =
    Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Mcu_capacitor_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mcu_capacitor_stsType_descriptor() {
    return Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_descriptor();
  }
  static inline const ::std::string& Mcu_capacitor_stsType_Name(Mcu_capacitor_stsType value) {
    return Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Name(value);
  }
  static inline bool Mcu_capacitor_stsType_Parse(const ::std::string& name,
      Mcu_capacitor_stsType* value) {
    return Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x225 = 1;
  bool has_checksum_0x225() const;
  void clear_checksum_0x225();
  static const int kChecksum0X225FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x225() const;
  void set_checksum_0x225(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x225 = 2;
  bool has_rolling_counter_0x225() const;
  void clear_rolling_counter_0x225();
  static const int kRollingCounter0X225FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x225() const;
  void set_rolling_counter_0x225(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_work_stsType mcu_work_sts = 3;
  bool has_mcu_work_sts() const;
  void clear_mcu_work_sts();
  static const int kMcuWorkStsFieldNumber = 3;
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType mcu_work_sts() const;
  void set_mcu_work_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType value);

  // optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_ctrmode_stsType mcu_ctrmode_sts = 4;
  bool has_mcu_ctrmode_sts() const;
  void clear_mcu_ctrmode_sts();
  static const int kMcuCtrmodeStsFieldNumber = 4;
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType mcu_ctrmode_sts() const;
  void set_mcu_ctrmode_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType value);

  // optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_capacitor_stsType mcu_capacitor_sts = 5;
  bool has_mcu_capacitor_sts() const;
  void clear_mcu_capacitor_sts();
  static const int kMcuCapacitorStsFieldNumber = 5;
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType mcu_capacitor_sts() const;
  void set_mcu_capacitor_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType value);

  // optional int32 mcu_spd_meas = 6;
  bool has_mcu_spd_meas() const;
  void clear_mcu_spd_meas();
  static const int kMcuSpdMeasFieldNumber = 6;
  ::google::protobuf::int32 mcu_spd_meas() const;
  void set_mcu_spd_meas(::google::protobuf::int32 value);

  // optional int32 mcu_trq_meas = 7;
  bool has_mcu_trq_meas() const;
  void clear_mcu_trq_meas();
  static const int kMcuTrqMeasFieldNumber = 7;
  ::google::protobuf::int32 mcu_trq_meas() const;
  void set_mcu_trq_meas(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_mcu_output_0x225_225)
 private:
  void set_has_checksum_0x225();
  void clear_has_checksum_0x225();
  void set_has_rolling_counter_0x225();
  void clear_has_rolling_counter_0x225();
  void set_has_mcu_work_sts();
  void clear_has_mcu_work_sts();
  void set_has_mcu_ctrmode_sts();
  void clear_has_mcu_ctrmode_sts();
  void set_has_mcu_capacitor_sts();
  void clear_has_mcu_capacitor_sts();
  void set_has_mcu_spd_meas();
  void clear_has_mcu_spd_meas();
  void set_has_mcu_trq_meas();
  void clear_has_mcu_trq_meas();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x225_;
  ::google::protobuf::int32 rolling_counter_0x225_;
  int mcu_work_sts_;
  int mcu_ctrmode_sts_;
  int mcu_capacitor_sts_;
  ::google::protobuf::int32 mcu_spd_meas_;
  ::google::protobuf::int32 mcu_trq_meas_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_abs_sts_0x221_221 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_abs_sts_0x221_221) */ {
 public:
  Gw_abs_sts_0x221_221();
  virtual ~Gw_abs_sts_0x221_221();

  Gw_abs_sts_0x221_221(const Gw_abs_sts_0x221_221& from);

  inline Gw_abs_sts_0x221_221& operator=(const Gw_abs_sts_0x221_221& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_abs_sts_0x221_221& default_instance();

  static inline const Gw_abs_sts_0x221_221* internal_default_instance() {
    return reinterpret_cast<const Gw_abs_sts_0x221_221*>(
               &_Gw_abs_sts_0x221_221_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Gw_abs_sts_0x221_221* other);

  // implements Message ----------------------------------------------

  inline Gw_abs_sts_0x221_221* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_abs_sts_0x221_221* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_abs_sts_0x221_221& from);
  void MergeFrom(const Gw_abs_sts_0x221_221& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_abs_sts_0x221_221* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType;
  static const Abs_whlmilgfrntlestatusType ABS_WHLMILGFRNTLESTATUS_VALID =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID;
  static const Abs_whlmilgfrntlestatusType ABS_WHLMILGFRNTLESTATUS_INVALID =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID;
  static inline bool Abs_whlmilgfrntlestatusType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value);
  }
  static const Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType_MIN =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MIN;
  static const Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType_MAX =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX;
  static const int Abs_whlmilgfrntlestatusType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlmilgfrntlestatusType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlmilgfrntlestatusType_Name(Abs_whlmilgfrntlestatusType value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Name(value);
  }
  static inline bool Abs_whlmilgfrntlestatusType_Parse(const ::std::string& name,
      Abs_whlmilgfrntlestatusType* value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType;
  static const Abs_whlmilgfrntristatusType ABS_WHLMILGFRNTRISTATUS_VALID =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID;
  static const Abs_whlmilgfrntristatusType ABS_WHLMILGFRNTRISTATUS_INVALID =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID;
  static inline bool Abs_whlmilgfrntristatusType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value);
  }
  static const Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType_MIN =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MIN;
  static const Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType_MAX =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX;
  static const int Abs_whlmilgfrntristatusType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlmilgfrntristatusType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlmilgfrntristatusType_Name(Abs_whlmilgfrntristatusType value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Name(value);
  }
  static inline bool Abs_whlmilgfrntristatusType_Parse(const ::std::string& name,
      Abs_whlmilgfrntristatusType* value) {
    return Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_VALID =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_INVALID =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INVALID;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_INIT =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT;
  static inline bool Abs_vehspdlgtstatusType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value);
  }
  static const Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType_MIN =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MIN;
  static const Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType_MAX =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX;
  static const int Abs_vehspdlgtstatusType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_vehspdlgtstatusType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
  }
  static inline const ::std::string& Abs_vehspdlgtstatusType_Name(Abs_vehspdlgtstatusType value) {
    return Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Name(value);
  }
  static inline bool Abs_vehspdlgtstatusType_Parse(const ::std::string& name,
      Abs_vehspdlgtstatusType* value) {
    return Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_vehspddirectionType Abs_vehspddirectionType;
  static const Abs_vehspddirectionType ABS_VEHSPDDIRECTION_FORWARD =
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD;
  static const Abs_vehspddirectionType ABS_VEHSPDDIRECTION_BACKWARD =
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD;
  static inline bool Abs_vehspddirectionType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value);
  }
  static const Abs_vehspddirectionType Abs_vehspddirectionType_MIN =
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MIN;
  static const Abs_vehspddirectionType Abs_vehspddirectionType_MAX =
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX;
  static const int Abs_vehspddirectionType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_vehspddirectionType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
  }
  static inline const ::std::string& Abs_vehspddirectionType_Name(Abs_vehspddirectionType value) {
    return Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Name(value);
  }
  static inline bool Abs_vehspddirectionType_Parse(const ::std::string& name,
      Abs_vehspddirectionType* value) {
    return Gw_abs_sts_0x221_221_Abs_vehspddirectionType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_ebdflgfltType Abs_ebdflgfltType;
  static const Abs_ebdflgfltType ABS_EBDFLGFLT_NO_FAILURE =
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE;
  static const Abs_ebdflgfltType ABS_EBDFLGFLT_FAILURE =
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE;
  static inline bool Abs_ebdflgfltType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value);
  }
  static const Abs_ebdflgfltType Abs_ebdflgfltType_MIN =
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MIN;
  static const Abs_ebdflgfltType Abs_ebdflgfltType_MAX =
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX;
  static const int Abs_ebdflgfltType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_ebdflgfltType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
  }
  static inline const ::std::string& Abs_ebdflgfltType_Name(Abs_ebdflgfltType value) {
    return Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Name(value);
  }
  static inline bool Abs_ebdflgfltType_Parse(const ::std::string& name,
      Abs_ebdflgfltType* value) {
    return Gw_abs_sts_0x221_221_Abs_ebdflgfltType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_absflgfltType Abs_absflgfltType;
  static const Abs_absflgfltType ABS_ABSFLGFLT_NO_FAILURE =
    Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE;
  static const Abs_absflgfltType ABS_ABSFLGFLT_FAILURE =
    Gw_abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE;
  static inline bool Abs_absflgfltType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_absflgfltType_IsValid(value);
  }
  static const Abs_absflgfltType Abs_absflgfltType_MIN =
    Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MIN;
  static const Abs_absflgfltType Abs_absflgfltType_MAX =
    Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX;
  static const int Abs_absflgfltType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_absflgfltType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_absflgfltType_descriptor();
  }
  static inline const ::std::string& Abs_absflgfltType_Name(Abs_absflgfltType value) {
    return Gw_abs_sts_0x221_221_Abs_absflgfltType_Name(value);
  }
  static inline bool Abs_absflgfltType_Parse(const ::std::string& name,
      Abs_absflgfltType* value) {
    return Gw_abs_sts_0x221_221_Abs_absflgfltType_Parse(name, value);
  }

  typedef Gw_abs_sts_0x221_221_Abs_absctrlactvType Abs_absctrlactvType;
  static const Abs_absctrlactvType ABS_ABSCTRLACTV_NOT_ACTIVE =
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE;
  static const Abs_absctrlactvType ABS_ABSCTRLACTV_ACTIVE =
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE;
  static inline bool Abs_absctrlactvType_IsValid(int value) {
    return Gw_abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value);
  }
  static const Abs_absctrlactvType Abs_absctrlactvType_MIN =
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MIN;
  static const Abs_absctrlactvType Abs_absctrlactvType_MAX =
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX;
  static const int Abs_absctrlactvType_ARRAYSIZE =
    Gw_abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_absctrlactvType_descriptor() {
    return Gw_abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
  }
  static inline const ::std::string& Abs_absctrlactvType_Name(Abs_absctrlactvType value) {
    return Gw_abs_sts_0x221_221_Abs_absctrlactvType_Name(value);
  }
  static inline bool Abs_absctrlactvType_Parse(const ::std::string& name,
      Abs_absctrlactvType* value) {
    return Gw_abs_sts_0x221_221_Abs_absctrlactvType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x221 = 1;
  bool has_checksum_0x221() const;
  void clear_checksum_0x221();
  static const int kChecksum0X221FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x221() const;
  void set_checksum_0x221(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x221 = 2;
  bool has_rolling_counter_0x221() const;
  void clear_rolling_counter_0x221();
  static const int kRollingCounter0X221FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x221() const;
  void set_rolling_counter_0x221(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 3;
  bool has_abs_whlmilgfrntlestatus() const;
  void clear_abs_whlmilgfrntlestatus();
  static const int kAbsWhlmilgfrntlestatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus() const;
  void set_abs_whlmilgfrntlestatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 4;
  bool has_abs_whlmilgfrntristatus() const;
  void clear_abs_whlmilgfrntristatus();
  static const int kAbsWhlmilgfrntristatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus() const;
  void set_abs_whlmilgfrntristatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 5;
  bool has_abs_vehspdlgtstatus() const;
  void clear_abs_vehspdlgtstatus();
  static const int kAbsVehspdlgtstatusFieldNumber = 5;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType abs_vehspdlgtstatus() const;
  void set_abs_vehspdlgtstatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 6;
  bool has_abs_vehspddirection() const;
  void clear_abs_vehspddirection();
  static const int kAbsVehspddirectionFieldNumber = 6;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType abs_vehspddirection() const;
  void set_abs_vehspddirection(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType value);

  // optional double abs_vehspdlgt = 7;
  bool has_abs_vehspdlgt() const;
  void clear_abs_vehspdlgt();
  static const int kAbsVehspdlgtFieldNumber = 7;
  double abs_vehspdlgt() const;
  void set_abs_vehspdlgt(double value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 8;
  bool has_abs_ebdflgflt() const;
  void clear_abs_ebdflgflt();
  static const int kAbsEbdflgfltFieldNumber = 8;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType abs_ebdflgflt() const;
  void set_abs_ebdflgflt(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 9;
  bool has_abs_absflgflt() const;
  void clear_abs_absflgflt();
  static const int kAbsAbsflgfltFieldNumber = 9;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType abs_absflgflt() const;
  void set_abs_absflgflt(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType value);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 10;
  bool has_abs_absctrlactv() const;
  void clear_abs_absctrlactv();
  static const int kAbsAbsctrlactvFieldNumber = 10;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType abs_absctrlactv() const;
  void set_abs_absctrlactv(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType value);

  // optional int32 abs_whlmilgfrntri = 11;
  bool has_abs_whlmilgfrntri() const;
  void clear_abs_whlmilgfrntri();
  static const int kAbsWhlmilgfrntriFieldNumber = 11;
  ::google::protobuf::int32 abs_whlmilgfrntri() const;
  void set_abs_whlmilgfrntri(::google::protobuf::int32 value);

  // optional int32 abs_whlmilgfrntle = 12;
  bool has_abs_whlmilgfrntle() const;
  void clear_abs_whlmilgfrntle();
  static const int kAbsWhlmilgfrntleFieldNumber = 12;
  ::google::protobuf::int32 abs_whlmilgfrntle() const;
  void set_abs_whlmilgfrntle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_abs_sts_0x221_221)
 private:
  void set_has_checksum_0x221();
  void clear_has_checksum_0x221();
  void set_has_rolling_counter_0x221();
  void clear_has_rolling_counter_0x221();
  void set_has_abs_whlmilgfrntlestatus();
  void clear_has_abs_whlmilgfrntlestatus();
  void set_has_abs_whlmilgfrntristatus();
  void clear_has_abs_whlmilgfrntristatus();
  void set_has_abs_vehspdlgtstatus();
  void clear_has_abs_vehspdlgtstatus();
  void set_has_abs_vehspddirection();
  void clear_has_abs_vehspddirection();
  void set_has_abs_vehspdlgt();
  void clear_has_abs_vehspdlgt();
  void set_has_abs_ebdflgflt();
  void clear_has_abs_ebdflgflt();
  void set_has_abs_absflgflt();
  void clear_has_abs_absflgflt();
  void set_has_abs_absctrlactv();
  void clear_has_abs_absctrlactv();
  void set_has_abs_whlmilgfrntri();
  void clear_has_abs_whlmilgfrntri();
  void set_has_abs_whlmilgfrntle();
  void clear_has_abs_whlmilgfrntle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x221_;
  ::google::protobuf::int32 rolling_counter_0x221_;
  int abs_whlmilgfrntlestatus_;
  int abs_whlmilgfrntristatus_;
  int abs_vehspdlgtstatus_;
  int abs_vehspddirection_;
  double abs_vehspdlgt_;
  int abs_ebdflgflt_;
  int abs_absflgflt_;
  int abs_absctrlactv_;
  ::google::protobuf::int32 abs_whlmilgfrntri_;
  ::google::protobuf::int32 abs_whlmilgfrntle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ibc_status_0x122_122 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ibc_status_0x122_122) */ {
 public:
  Ibc_status_0x122_122();
  virtual ~Ibc_status_0x122_122();

  Ibc_status_0x122_122(const Ibc_status_0x122_122& from);

  inline Ibc_status_0x122_122& operator=(const Ibc_status_0x122_122& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ibc_status_0x122_122& default_instance();

  static inline const Ibc_status_0x122_122* internal_default_instance() {
    return reinterpret_cast<const Ibc_status_0x122_122*>(
               &_Ibc_status_0x122_122_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Ibc_status_0x122_122* other);

  // implements Message ----------------------------------------------

  inline Ibc_status_0x122_122* New() const PROTOBUF_FINAL { return New(NULL); }

  Ibc_status_0x122_122* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ibc_status_0x122_122& from);
  void MergeFrom(const Ibc_status_0x122_122& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ibc_status_0x122_122* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ibc_status_0x122_122_Ibc_parkrelease_reqType Ibc_parkrelease_reqType;
  static const Ibc_parkrelease_reqType IBC_PARKRELEASE_REQ_NO_CONTROL =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_NO_CONTROL;
  static const Ibc_parkrelease_reqType IBC_PARKRELEASE_REQ_RELEASE =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_RELEASE;
  static const Ibc_parkrelease_reqType IBC_PARKRELEASE_REQ_PARK =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_PARK;
  static const Ibc_parkrelease_reqType IBC_PARKRELEASE_REQ_DYNAMIC_PARKING =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_IBC_PARKRELEASE_REQ_DYNAMIC_PARKING;
  static inline bool Ibc_parkrelease_reqType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_parkrelease_reqType_IsValid(value);
  }
  static const Ibc_parkrelease_reqType Ibc_parkrelease_reqType_MIN =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_MIN;
  static const Ibc_parkrelease_reqType Ibc_parkrelease_reqType_MAX =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_MAX;
  static const int Ibc_parkrelease_reqType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_parkrelease_reqType_Ibc_parkrelease_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_parkrelease_reqType_descriptor() {
    return Ibc_status_0x122_122_Ibc_parkrelease_reqType_descriptor();
  }
  static inline const ::std::string& Ibc_parkrelease_reqType_Name(Ibc_parkrelease_reqType value) {
    return Ibc_status_0x122_122_Ibc_parkrelease_reqType_Name(value);
  }
  static inline bool Ibc_parkrelease_reqType_Parse(const ::std::string& name,
      Ibc_parkrelease_reqType* value) {
    return Ibc_status_0x122_122_Ibc_parkrelease_reqType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType Ibc_mastercylinderpressvalidType;
  static const Ibc_mastercylinderpressvalidType IBC_MASTERCYLINDERPRESSVALID_INVAILD =
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_INVAILD;
  static const Ibc_mastercylinderpressvalidType IBC_MASTERCYLINDERPRESSVALID_VALID =
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IBC_MASTERCYLINDERPRESSVALID_VALID;
  static inline bool Ibc_mastercylinderpressvalidType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IsValid(value);
  }
  static const Ibc_mastercylinderpressvalidType Ibc_mastercylinderpressvalidType_MIN =
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_MIN;
  static const Ibc_mastercylinderpressvalidType Ibc_mastercylinderpressvalidType_MAX =
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_MAX;
  static const int Ibc_mastercylinderpressvalidType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Ibc_mastercylinderpressvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_mastercylinderpressvalidType_descriptor() {
    return Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_descriptor();
  }
  static inline const ::std::string& Ibc_mastercylinderpressvalidType_Name(Ibc_mastercylinderpressvalidType value) {
    return Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Name(value);
  }
  static inline bool Ibc_mastercylinderpressvalidType_Parse(const ::std::string& name,
      Ibc_mastercylinderpressvalidType* value) {
    return Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_brakeactiveType Ibc_brakeactiveType;
  static const Ibc_brakeactiveType IBC_BRAKEACTIVE_BRAKE_INACTIVE =
    Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_INACTIVE;
  static const Ibc_brakeactiveType IBC_BRAKEACTIVE_BRAKE_ACTIVE =
    Ibc_status_0x122_122_Ibc_brakeactiveType_IBC_BRAKEACTIVE_BRAKE_ACTIVE;
  static inline bool Ibc_brakeactiveType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_brakeactiveType_IsValid(value);
  }
  static const Ibc_brakeactiveType Ibc_brakeactiveType_MIN =
    Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_MIN;
  static const Ibc_brakeactiveType Ibc_brakeactiveType_MAX =
    Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_MAX;
  static const int Ibc_brakeactiveType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_brakeactiveType_Ibc_brakeactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_brakeactiveType_descriptor() {
    return Ibc_status_0x122_122_Ibc_brakeactiveType_descriptor();
  }
  static inline const ::std::string& Ibc_brakeactiveType_Name(Ibc_brakeactiveType value) {
    return Ibc_status_0x122_122_Ibc_brakeactiveType_Name(value);
  }
  static inline bool Ibc_brakeactiveType_Parse(const ::std::string& name,
      Ibc_brakeactiveType* value) {
    return Ibc_status_0x122_122_Ibc_brakeactiveType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_brakereqavailabeType Ibc_brakereqavailabeType;
  static const Ibc_brakereqavailabeType IBC_BRAKEREQAVAILABE_BRAKE_NOT_AVAILABLE =
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_NOT_AVAILABLE;
  static const Ibc_brakereqavailabeType IBC_BRAKEREQAVAILABE_BRAKE_AVAILABLE =
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_IBC_BRAKEREQAVAILABE_BRAKE_AVAILABLE;
  static inline bool Ibc_brakereqavailabeType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_brakereqavailabeType_IsValid(value);
  }
  static const Ibc_brakereqavailabeType Ibc_brakereqavailabeType_MIN =
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_MIN;
  static const Ibc_brakereqavailabeType Ibc_brakereqavailabeType_MAX =
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_MAX;
  static const int Ibc_brakereqavailabeType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_brakereqavailabeType_Ibc_brakereqavailabeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_brakereqavailabeType_descriptor() {
    return Ibc_status_0x122_122_Ibc_brakereqavailabeType_descriptor();
  }
  static inline const ::std::string& Ibc_brakereqavailabeType_Name(Ibc_brakereqavailabeType value) {
    return Ibc_status_0x122_122_Ibc_brakereqavailabeType_Name(value);
  }
  static inline bool Ibc_brakereqavailabeType_Parse(const ::std::string& name,
      Ibc_brakereqavailabeType* value) {
    return Ibc_status_0x122_122_Ibc_brakereqavailabeType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_brakepressurereqackType Ibc_brakepressurereqackType;
  static const Ibc_brakepressurereqackType IBC_BRAKEPRESSUREREQACK_NOT_ACK =
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_NOT_ACK;
  static const Ibc_brakepressurereqackType IBC_BRAKEPRESSUREREQACK_ACK =
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_IBC_BRAKEPRESSUREREQACK_ACK;
  static inline bool Ibc_brakepressurereqackType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_brakepressurereqackType_IsValid(value);
  }
  static const Ibc_brakepressurereqackType Ibc_brakepressurereqackType_MIN =
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_MIN;
  static const Ibc_brakepressurereqackType Ibc_brakepressurereqackType_MAX =
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_MAX;
  static const int Ibc_brakepressurereqackType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_brakepressurereqackType_Ibc_brakepressurereqackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_brakepressurereqackType_descriptor() {
    return Ibc_status_0x122_122_Ibc_brakepressurereqackType_descriptor();
  }
  static inline const ::std::string& Ibc_brakepressurereqackType_Name(Ibc_brakepressurereqackType value) {
    return Ibc_status_0x122_122_Ibc_brakepressurereqackType_Name(value);
  }
  static inline bool Ibc_brakepressurereqackType_Parse(const ::std::string& name,
      Ibc_brakepressurereqackType* value) {
    return Ibc_status_0x122_122_Ibc_brakepressurereqackType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_controlstatusType Ibc_controlstatusType;
  static const Ibc_controlstatusType IBC_CONTROLSTATUS_TEMPORARILY_INHIBIT =
    Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_TEMPORARILY_INHIBIT;
  static const Ibc_controlstatusType IBC_CONTROLSTATUS_AVAILABLE_FOR_CONTROL =
    Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_AVAILABLE_FOR_CONTROL;
  static const Ibc_controlstatusType IBC_CONTROLSTATUS_ACTIVE =
    Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_ACTIVE;
  static const Ibc_controlstatusType IBC_CONTROLSTATUS_PERMANENTLY_FAILED =
    Ibc_status_0x122_122_Ibc_controlstatusType_IBC_CONTROLSTATUS_PERMANENTLY_FAILED;
  static inline bool Ibc_controlstatusType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_controlstatusType_IsValid(value);
  }
  static const Ibc_controlstatusType Ibc_controlstatusType_MIN =
    Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_MIN;
  static const Ibc_controlstatusType Ibc_controlstatusType_MAX =
    Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_MAX;
  static const int Ibc_controlstatusType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_controlstatusType_Ibc_controlstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_controlstatusType_descriptor() {
    return Ibc_status_0x122_122_Ibc_controlstatusType_descriptor();
  }
  static inline const ::std::string& Ibc_controlstatusType_Name(Ibc_controlstatusType value) {
    return Ibc_status_0x122_122_Ibc_controlstatusType_Name(value);
  }
  static inline bool Ibc_controlstatusType_Parse(const ::std::string& name,
      Ibc_controlstatusType* value) {
    return Ibc_status_0x122_122_Ibc_controlstatusType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_driver_interveneType Ibc_driver_interveneType;
  static const Ibc_driver_interveneType IBC_DRIVER_INTERVENE_NOT_INTERVENE =
    Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_NOT_INTERVENE;
  static const Ibc_driver_interveneType IBC_DRIVER_INTERVENE_INTERVENE =
    Ibc_status_0x122_122_Ibc_driver_interveneType_IBC_DRIVER_INTERVENE_INTERVENE;
  static inline bool Ibc_driver_interveneType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_driver_interveneType_IsValid(value);
  }
  static const Ibc_driver_interveneType Ibc_driver_interveneType_MIN =
    Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_MIN;
  static const Ibc_driver_interveneType Ibc_driver_interveneType_MAX =
    Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_MAX;
  static const int Ibc_driver_interveneType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_driver_interveneType_Ibc_driver_interveneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_driver_interveneType_descriptor() {
    return Ibc_status_0x122_122_Ibc_driver_interveneType_descriptor();
  }
  static inline const ::std::string& Ibc_driver_interveneType_Name(Ibc_driver_interveneType value) {
    return Ibc_status_0x122_122_Ibc_driver_interveneType_Name(value);
  }
  static inline bool Ibc_driver_interveneType_Parse(const ::std::string& name,
      Ibc_driver_interveneType* value) {
    return Ibc_status_0x122_122_Ibc_driver_interveneType_Parse(name, value);
  }

  typedef Ibc_status_0x122_122_Ibc_systemstatusType Ibc_systemstatusType;
  static const Ibc_systemstatusType IBC_SYSTEMSTATUS_SYSTEM_NO_FAULT =
    Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_NO_FAULT;
  static const Ibc_systemstatusType IBC_SYSTEMSTATUS_SYSTEM_WARING =
    Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_WARING;
  static const Ibc_systemstatusType IBC_SYSTEMSTATUS_SYSTEM_FAULT =
    Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_SYSTEM_FAULT;
  static const Ibc_systemstatusType IBC_SYSTEMSTATUS_RESERVED =
    Ibc_status_0x122_122_Ibc_systemstatusType_IBC_SYSTEMSTATUS_RESERVED;
  static inline bool Ibc_systemstatusType_IsValid(int value) {
    return Ibc_status_0x122_122_Ibc_systemstatusType_IsValid(value);
  }
  static const Ibc_systemstatusType Ibc_systemstatusType_MIN =
    Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_MIN;
  static const Ibc_systemstatusType Ibc_systemstatusType_MAX =
    Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_MAX;
  static const int Ibc_systemstatusType_ARRAYSIZE =
    Ibc_status_0x122_122_Ibc_systemstatusType_Ibc_systemstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_systemstatusType_descriptor() {
    return Ibc_status_0x122_122_Ibc_systemstatusType_descriptor();
  }
  static inline const ::std::string& Ibc_systemstatusType_Name(Ibc_systemstatusType value) {
    return Ibc_status_0x122_122_Ibc_systemstatusType_Name(value);
  }
  static inline bool Ibc_systemstatusType_Parse(const ::std::string& name,
      Ibc_systemstatusType* value) {
    return Ibc_status_0x122_122_Ibc_systemstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x122 = 1;
  bool has_checksum_0x122() const;
  void clear_checksum_0x122();
  static const int kChecksum0X122FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x122() const;
  void set_checksum_0x122(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x122 = 2;
  bool has_rolling_counter_0x122() const;
  void clear_rolling_counter_0x122();
  static const int kRollingCounter0X122FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x122() const;
  void set_rolling_counter_0x122(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_parkrelease_reqType ibc_parkrelease_req = 3;
  bool has_ibc_parkrelease_req() const;
  void clear_ibc_parkrelease_req();
  static const int kIbcParkreleaseReqFieldNumber = 3;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType ibc_parkrelease_req() const;
  void set_ibc_parkrelease_req(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType value);

  // optional int32 ibc_faultcode = 4;
  bool has_ibc_faultcode() const;
  void clear_ibc_faultcode();
  static const int kIbcFaultcodeFieldNumber = 4;
  ::google::protobuf::int32 ibc_faultcode() const;
  void set_ibc_faultcode(::google::protobuf::int32 value);

  // optional double ibc_brkpedalrawposition = 5;
  bool has_ibc_brkpedalrawposition() const;
  void clear_ibc_brkpedalrawposition();
  static const int kIbcBrkpedalrawpositionFieldNumber = 5;
  double ibc_brkpedalrawposition() const;
  void set_ibc_brkpedalrawposition(double value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_mastercylinderpressvalidType ibc_mastercylinderpressvalid = 6;
  bool has_ibc_mastercylinderpressvalid() const;
  void clear_ibc_mastercylinderpressvalid();
  static const int kIbcMastercylinderpressvalidFieldNumber = 6;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType ibc_mastercylinderpressvalid() const;
  void set_ibc_mastercylinderpressvalid(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType value);

  // optional int32 ibc_mastercylinderpress = 7;
  bool has_ibc_mastercylinderpress() const;
  void clear_ibc_mastercylinderpress();
  static const int kIbcMastercylinderpressFieldNumber = 7;
  ::google::protobuf::int32 ibc_mastercylinderpress() const;
  void set_ibc_mastercylinderpress(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakeactiveType ibc_brakeactive = 8;
  bool has_ibc_brakeactive() const;
  void clear_ibc_brakeactive();
  static const int kIbcBrakeactiveFieldNumber = 8;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType ibc_brakeactive() const;
  void set_ibc_brakeactive(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakereqavailabeType ibc_brakereqavailabe = 9;
  bool has_ibc_brakereqavailabe() const;
  void clear_ibc_brakereqavailabe();
  static const int kIbcBrakereqavailabeFieldNumber = 9;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType ibc_brakereqavailabe() const;
  void set_ibc_brakereqavailabe(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakepressurereqackType ibc_brakepressurereqack = 10;
  bool has_ibc_brakepressurereqack() const;
  void clear_ibc_brakepressurereqack();
  static const int kIbcBrakepressurereqackFieldNumber = 10;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType ibc_brakepressurereqack() const;
  void set_ibc_brakepressurereqack(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_controlstatusType ibc_controlstatus = 11;
  bool has_ibc_controlstatus() const;
  void clear_ibc_controlstatus();
  static const int kIbcControlstatusFieldNumber = 11;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType ibc_controlstatus() const;
  void set_ibc_controlstatus(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_driver_interveneType ibc_driver_intervene = 12;
  bool has_ibc_driver_intervene() const;
  void clear_ibc_driver_intervene();
  static const int kIbcDriverInterveneFieldNumber = 12;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType ibc_driver_intervene() const;
  void set_ibc_driver_intervene(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType value);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_systemstatusType ibc_systemstatus = 13;
  bool has_ibc_systemstatus() const;
  void clear_ibc_systemstatus();
  static const int kIbcSystemstatusFieldNumber = 13;
  ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType ibc_systemstatus() const;
  void set_ibc_systemstatus(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ibc_status_0x122_122)
 private:
  void set_has_checksum_0x122();
  void clear_has_checksum_0x122();
  void set_has_rolling_counter_0x122();
  void clear_has_rolling_counter_0x122();
  void set_has_ibc_parkrelease_req();
  void clear_has_ibc_parkrelease_req();
  void set_has_ibc_faultcode();
  void clear_has_ibc_faultcode();
  void set_has_ibc_brkpedalrawposition();
  void clear_has_ibc_brkpedalrawposition();
  void set_has_ibc_mastercylinderpressvalid();
  void clear_has_ibc_mastercylinderpressvalid();
  void set_has_ibc_mastercylinderpress();
  void clear_has_ibc_mastercylinderpress();
  void set_has_ibc_brakeactive();
  void clear_has_ibc_brakeactive();
  void set_has_ibc_brakereqavailabe();
  void clear_has_ibc_brakereqavailabe();
  void set_has_ibc_brakepressurereqack();
  void clear_has_ibc_brakepressurereqack();
  void set_has_ibc_controlstatus();
  void clear_has_ibc_controlstatus();
  void set_has_ibc_driver_intervene();
  void clear_has_ibc_driver_intervene();
  void set_has_ibc_systemstatus();
  void clear_has_ibc_systemstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x122_;
  ::google::protobuf::int32 rolling_counter_0x122_;
  int ibc_parkrelease_req_;
  ::google::protobuf::int32 ibc_faultcode_;
  double ibc_brkpedalrawposition_;
  int ibc_mastercylinderpressvalid_;
  ::google::protobuf::int32 ibc_mastercylinderpress_;
  int ibc_brakeactive_;
  int ibc_brakereqavailabe_;
  int ibc_brakepressurereqack_;
  int ibc_controlstatus_;
  int ibc_driver_intervene_;
  int ibc_systemstatus_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_whltq_0x107_107 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_whltq_0x107_107) */ {
 public:
  Gw_vcu_whltq_0x107_107();
  virtual ~Gw_vcu_whltq_0x107_107();

  Gw_vcu_whltq_0x107_107(const Gw_vcu_whltq_0x107_107& from);

  inline Gw_vcu_whltq_0x107_107& operator=(const Gw_vcu_whltq_0x107_107& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_whltq_0x107_107& default_instance();

  static inline const Gw_vcu_whltq_0x107_107* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_whltq_0x107_107*>(
               &_Gw_vcu_whltq_0x107_107_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Gw_vcu_whltq_0x107_107* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_whltq_0x107_107* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_whltq_0x107_107* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_whltq_0x107_107& from);
  void MergeFrom(const Gw_vcu_whltq_0x107_107& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_whltq_0x107_107* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_whltq_0x107_107_Vcu_kickdownType Vcu_kickdownType;
  static const Vcu_kickdownType VCU_KICKDOWN_NOTACTIVE =
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_NOTACTIVE;
  static const Vcu_kickdownType VCU_KICKDOWN_ACTIVE =
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_VCU_KICKDOWN_ACTIVE;
  static inline bool Vcu_kickdownType_IsValid(int value) {
    return Gw_vcu_whltq_0x107_107_Vcu_kickdownType_IsValid(value);
  }
  static const Vcu_kickdownType Vcu_kickdownType_MIN =
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_MIN;
  static const Vcu_kickdownType Vcu_kickdownType_MAX =
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_MAX;
  static const int Vcu_kickdownType_ARRAYSIZE =
    Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Vcu_kickdownType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_kickdownType_descriptor() {
    return Gw_vcu_whltq_0x107_107_Vcu_kickdownType_descriptor();
  }
  static inline const ::std::string& Vcu_kickdownType_Name(Vcu_kickdownType value) {
    return Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Name(value);
  }
  static inline bool Vcu_kickdownType_Parse(const ::std::string& name,
      Vcu_kickdownType* value) {
    return Gw_vcu_whltq_0x107_107_Vcu_kickdownType_Parse(name, value);
  }

  typedef Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType Vcu_accpedalratioerrorType;
  static const Vcu_accpedalratioerrorType VCU_ACCPEDALRATIOERROR_NOERROR =
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_NOERROR;
  static const Vcu_accpedalratioerrorType VCU_ACCPEDALRATIOERROR_ERROR =
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_VCU_ACCPEDALRATIOERROR_ERROR;
  static inline bool Vcu_accpedalratioerrorType_IsValid(int value) {
    return Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_IsValid(value);
  }
  static const Vcu_accpedalratioerrorType Vcu_accpedalratioerrorType_MIN =
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_MIN;
  static const Vcu_accpedalratioerrorType Vcu_accpedalratioerrorType_MAX =
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_MAX;
  static const int Vcu_accpedalratioerrorType_ARRAYSIZE =
    Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Vcu_accpedalratioerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_accpedalratioerrorType_descriptor() {
    return Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_descriptor();
  }
  static inline const ::std::string& Vcu_accpedalratioerrorType_Name(Vcu_accpedalratioerrorType value) {
    return Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Name(value);
  }
  static inline bool Vcu_accpedalratioerrorType_Parse(const ::std::string& name,
      Vcu_accpedalratioerrorType* value) {
    return Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_Parse(name, value);
  }

  typedef Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType Vcu_brkpedalstasusType;
  static const Vcu_brkpedalstasusType VCU_BRKPEDALSTASUS_NOTPRESSED =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_NOTPRESSED;
  static const Vcu_brkpedalstasusType VCU_BRKPEDALSTASUS_PRESSED =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_PRESSED;
  static const Vcu_brkpedalstasusType VCU_BRKPEDALSTASUS_RESERVED =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_RESERVED;
  static const Vcu_brkpedalstasusType VCU_BRKPEDALSTASUS_ERROR =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_VCU_BRKPEDALSTASUS_ERROR;
  static inline bool Vcu_brkpedalstasusType_IsValid(int value) {
    return Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_IsValid(value);
  }
  static const Vcu_brkpedalstasusType Vcu_brkpedalstasusType_MIN =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_MIN;
  static const Vcu_brkpedalstasusType Vcu_brkpedalstasusType_MAX =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_MAX;
  static const int Vcu_brkpedalstasusType_ARRAYSIZE =
    Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Vcu_brkpedalstasusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_brkpedalstasusType_descriptor() {
    return Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_descriptor();
  }
  static inline const ::std::string& Vcu_brkpedalstasusType_Name(Vcu_brkpedalstasusType value) {
    return Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Name(value);
  }
  static inline bool Vcu_brkpedalstasusType_Parse(const ::std::string& name,
      Vcu_brkpedalstasusType* value) {
    return Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x107 = 1;
  bool has_checksum_0x107() const;
  void clear_checksum_0x107();
  static const int kChecksum0X107FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x107() const;
  void set_checksum_0x107(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x107 = 2;
  bool has_rolling_counter_0x107() const;
  void clear_rolling_counter_0x107();
  static const int kRollingCounter0X107FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x107() const;
  void set_rolling_counter_0x107(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_kickdownType vcu_kickdown = 3;
  bool has_vcu_kickdown() const;
  void clear_vcu_kickdown();
  static const int kVcuKickdownFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType vcu_kickdown() const;
  void set_vcu_kickdown(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType value);

  // optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_accpedalratioerrorType vcu_accpedalratioerror = 4;
  bool has_vcu_accpedalratioerror() const;
  void clear_vcu_accpedalratioerror();
  static const int kVcuAccpedalratioerrorFieldNumber = 4;
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType vcu_accpedalratioerror() const;
  void set_vcu_accpedalratioerror(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType value);

  // optional double vcu_accpedalratio = 5;
  bool has_vcu_accpedalratio() const;
  void clear_vcu_accpedalratio();
  static const int kVcuAccpedalratioFieldNumber = 5;
  double vcu_accpedalratio() const;
  void set_vcu_accpedalratio(double value);

  // optional double vcu_accrawpedalratio = 6;
  bool has_vcu_accrawpedalratio() const;
  void clear_vcu_accrawpedalratio();
  static const int kVcuAccrawpedalratioFieldNumber = 6;
  double vcu_accrawpedalratio() const;
  void set_vcu_accrawpedalratio(double value);

  // optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_brkpedalstasusType vcu_brkpedalstasus = 7;
  bool has_vcu_brkpedalstasus() const;
  void clear_vcu_brkpedalstasus();
  static const int kVcuBrkpedalstasusFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType vcu_brkpedalstasus() const;
  void set_vcu_brkpedalstasus(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType value);

  // optional int32 vcu_minindicatedtorqwhl = 8;
  bool has_vcu_minindicatedtorqwhl() const;
  void clear_vcu_minindicatedtorqwhl();
  static const int kVcuMinindicatedtorqwhlFieldNumber = 8;
  ::google::protobuf::int32 vcu_minindicatedtorqwhl() const;
  void set_vcu_minindicatedtorqwhl(::google::protobuf::int32 value);

  // optional int32 vcu_maxindicatedtorqwhl = 9;
  bool has_vcu_maxindicatedtorqwhl() const;
  void clear_vcu_maxindicatedtorqwhl();
  static const int kVcuMaxindicatedtorqwhlFieldNumber = 9;
  ::google::protobuf::int32 vcu_maxindicatedtorqwhl() const;
  void set_vcu_maxindicatedtorqwhl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_whltq_0x107_107)
 private:
  void set_has_checksum_0x107();
  void clear_has_checksum_0x107();
  void set_has_rolling_counter_0x107();
  void clear_has_rolling_counter_0x107();
  void set_has_vcu_kickdown();
  void clear_has_vcu_kickdown();
  void set_has_vcu_accpedalratioerror();
  void clear_has_vcu_accpedalratioerror();
  void set_has_vcu_accpedalratio();
  void clear_has_vcu_accpedalratio();
  void set_has_vcu_accrawpedalratio();
  void clear_has_vcu_accrawpedalratio();
  void set_has_vcu_brkpedalstasus();
  void clear_has_vcu_brkpedalstasus();
  void set_has_vcu_minindicatedtorqwhl();
  void clear_has_vcu_minindicatedtorqwhl();
  void set_has_vcu_maxindicatedtorqwhl();
  void clear_has_vcu_maxindicatedtorqwhl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x107_;
  ::google::protobuf::int32 rolling_counter_0x107_;
  int vcu_kickdown_;
  int vcu_accpedalratioerror_;
  double vcu_accpedalratio_;
  double vcu_accrawpedalratio_;
  int vcu_brkpedalstasus_;
  ::google::protobuf::int32 vcu_minindicatedtorqwhl_;
  ::google::protobuf::int32 vcu_maxindicatedtorqwhl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bcm_bodysts_0x344_344 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Bcm_bodysts_0x344_344) */ {
 public:
  Bcm_bodysts_0x344_344();
  virtual ~Bcm_bodysts_0x344_344();

  Bcm_bodysts_0x344_344(const Bcm_bodysts_0x344_344& from);

  inline Bcm_bodysts_0x344_344& operator=(const Bcm_bodysts_0x344_344& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bcm_bodysts_0x344_344& default_instance();

  static inline const Bcm_bodysts_0x344_344* internal_default_instance() {
    return reinterpret_cast<const Bcm_bodysts_0x344_344*>(
               &_Bcm_bodysts_0x344_344_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Bcm_bodysts_0x344_344* other);

  // implements Message ----------------------------------------------

  inline Bcm_bodysts_0x344_344* New() const PROTOBUF_FINAL { return New(NULL); }

  Bcm_bodysts_0x344_344* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bcm_bodysts_0x344_344& from);
  void MergeFrom(const Bcm_bodysts_0x344_344& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bcm_bodysts_0x344_344* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bcm_bodysts_0x344_344_Bcm_brakelampstatusType Bcm_brakelampstatusType;
  static const Bcm_brakelampstatusType BCM_BRAKELAMPSTATUS_BRAKE_LAMP_INACTIVE =
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_INACTIVE;
  static const Bcm_brakelampstatusType BCM_BRAKELAMPSTATUS_BRAKE_LAMP_ACTIVE =
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_BCM_BRAKELAMPSTATUS_BRAKE_LAMP_ACTIVE;
  static inline bool Bcm_brakelampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_IsValid(value);
  }
  static const Bcm_brakelampstatusType Bcm_brakelampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_MIN;
  static const Bcm_brakelampstatusType Bcm_brakelampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_MAX;
  static const int Bcm_brakelampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Bcm_brakelampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_brakelampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_brakelampstatusType_Name(Bcm_brakelampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Name(value);
  }
  static inline bool Bcm_brakelampstatusType_Parse(const ::std::string& name,
      Bcm_brakelampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType Bcm_rearfoglampstatusType;
  static const Bcm_rearfoglampstatusType BCM_REARFOGLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_INVALID;
  static const Bcm_rearfoglampstatusType BCM_REARFOGLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_OFF;
  static const Bcm_rearfoglampstatusType BCM_REARFOGLAMPSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_ON;
  static const Bcm_rearfoglampstatusType BCM_REARFOGLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_BCM_REARFOGLAMPSTATUS_RESERVED;
  static inline bool Bcm_rearfoglampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_IsValid(value);
  }
  static const Bcm_rearfoglampstatusType Bcm_rearfoglampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_MIN;
  static const Bcm_rearfoglampstatusType Bcm_rearfoglampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_MAX;
  static const int Bcm_rearfoglampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Bcm_rearfoglampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rearfoglampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_rearfoglampstatusType_Name(Bcm_rearfoglampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Name(value);
  }
  static inline bool Bcm_rearfoglampstatusType_Parse(const ::std::string& name,
      Bcm_rearfoglampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType Bcm_frontfoglampstatusType;
  static const Bcm_frontfoglampstatusType BCM_FRONTFOGLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_INVALID;
  static const Bcm_frontfoglampstatusType BCM_FRONTFOGLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_OFF;
  static const Bcm_frontfoglampstatusType BCM_FRONTFOGLAMPSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_ON;
  static const Bcm_frontfoglampstatusType BCM_FRONTFOGLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_BCM_FRONTFOGLAMPSTATUS_RESERVED;
  static inline bool Bcm_frontfoglampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_IsValid(value);
  }
  static const Bcm_frontfoglampstatusType Bcm_frontfoglampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_MIN;
  static const Bcm_frontfoglampstatusType Bcm_frontfoglampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_MAX;
  static const int Bcm_frontfoglampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Bcm_frontfoglampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_frontfoglampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_frontfoglampstatusType_Name(Bcm_frontfoglampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Name(value);
  }
  static inline bool Bcm_frontfoglampstatusType_Parse(const ::std::string& name,
      Bcm_frontfoglampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_washerstatusType Bcm_washerstatusType;
  static const Bcm_washerstatusType BCM_WASHERSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_INVALID;
  static const Bcm_washerstatusType BCM_WASHERSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_OFF;
  static const Bcm_washerstatusType BCM_WASHERSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_ON;
  static const Bcm_washerstatusType BCM_WASHERSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_BCM_WASHERSTATUS_RESERVED;
  static inline bool Bcm_washerstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_washerstatusType_IsValid(value);
  }
  static const Bcm_washerstatusType Bcm_washerstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_MIN;
  static const Bcm_washerstatusType Bcm_washerstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_MAX;
  static const int Bcm_washerstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_washerstatusType_Bcm_washerstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_washerstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_washerstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_washerstatusType_Name(Bcm_washerstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_washerstatusType_Name(value);
  }
  static inline bool Bcm_washerstatusType_Parse(const ::std::string& name,
      Bcm_washerstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_washerstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_wiperstatusType Bcm_wiperstatusType;
  static const Bcm_wiperstatusType BCM_WIPERSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_INVALID;
  static const Bcm_wiperstatusType BCM_WIPERSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_OFF;
  static const Bcm_wiperstatusType BCM_WIPERSTATUS_LOW_SPEED =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_LOW_SPEED;
  static const Bcm_wiperstatusType BCM_WIPERSTATUS_HIGH_SPEED =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_HIGH_SPEED;
  static const Bcm_wiperstatusType BCM_WIPERSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_BCM_WIPERSTATUS_RESERVED;
  static inline bool Bcm_wiperstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_wiperstatusType_IsValid(value);
  }
  static const Bcm_wiperstatusType Bcm_wiperstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_MIN;
  static const Bcm_wiperstatusType Bcm_wiperstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_MAX;
  static const int Bcm_wiperstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Bcm_wiperstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_wiperstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_wiperstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_wiperstatusType_Name(Bcm_wiperstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Name(value);
  }
  static inline bool Bcm_wiperstatusType_Parse(const ::std::string& name,
      Bcm_wiperstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_wiperstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType Bcm_doorlockfeedbackType;
  static const Bcm_doorlockfeedbackType BCM_DOORLOCKFEEDBACK_INVALID =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_INVALID;
  static const Bcm_doorlockfeedbackType BCM_DOORLOCKFEEDBACK_LOCK_ACTION =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_LOCK_ACTION;
  static const Bcm_doorlockfeedbackType BCM_DOORLOCKFEEDBACK_UNLOCK_ACTION =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_UNLOCK_ACTION;
  static const Bcm_doorlockfeedbackType BCM_DOORLOCKFEEDBACK_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_BCM_DOORLOCKFEEDBACK_RESERVED;
  static inline bool Bcm_doorlockfeedbackType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_IsValid(value);
  }
  static const Bcm_doorlockfeedbackType Bcm_doorlockfeedbackType_MIN =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_MIN;
  static const Bcm_doorlockfeedbackType Bcm_doorlockfeedbackType_MAX =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_MAX;
  static const int Bcm_doorlockfeedbackType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Bcm_doorlockfeedbackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockfeedbackType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockfeedbackType_Name(Bcm_doorlockfeedbackType value) {
    return Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Name(value);
  }
  static inline bool Bcm_doorlockfeedbackType_Parse(const ::std::string& name,
      Bcm_doorlockfeedbackType* value) {
    return Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_hornstatusType Bcm_hornstatusType;
  static const Bcm_hornstatusType BCM_HORNSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_INVALID;
  static const Bcm_hornstatusType BCM_HORNSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_OFF;
  static const Bcm_hornstatusType BCM_HORNSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_ON;
  static const Bcm_hornstatusType BCM_HORNSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_BCM_HORNSTATUS_RESERVED;
  static inline bool Bcm_hornstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_hornstatusType_IsValid(value);
  }
  static const Bcm_hornstatusType Bcm_hornstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_MIN;
  static const Bcm_hornstatusType Bcm_hornstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_MAX;
  static const int Bcm_hornstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_hornstatusType_Bcm_hornstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_hornstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_hornstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_hornstatusType_Name(Bcm_hornstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_hornstatusType_Name(value);
  }
  static inline bool Bcm_hornstatusType_Parse(const ::std::string& name,
      Bcm_hornstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_hornstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType Bcm_highbeamlampstatusType;
  static const Bcm_highbeamlampstatusType BCM_HIGHBEAMLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_INVALID;
  static const Bcm_highbeamlampstatusType BCM_HIGHBEAMLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_OFF;
  static const Bcm_highbeamlampstatusType BCM_HIGHBEAMLAMPSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_ON;
  static const Bcm_highbeamlampstatusType BCM_HIGHBEAMLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_BCM_HIGHBEAMLAMPSTATUS_RESERVED;
  static inline bool Bcm_highbeamlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_IsValid(value);
  }
  static const Bcm_highbeamlampstatusType Bcm_highbeamlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_MIN;
  static const Bcm_highbeamlampstatusType Bcm_highbeamlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_MAX;
  static const int Bcm_highbeamlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Bcm_highbeamlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_highbeamlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_highbeamlampstatusType_Name(Bcm_highbeamlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Name(value);
  }
  static inline bool Bcm_highbeamlampstatusType_Parse(const ::std::string& name,
      Bcm_highbeamlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType Bcm_lowbeamlampstatusType;
  static const Bcm_lowbeamlampstatusType BCM_LOWBEAMLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_INVALID;
  static const Bcm_lowbeamlampstatusType BCM_LOWBEAMLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_OFF;
  static const Bcm_lowbeamlampstatusType BCM_LOWBEAMLAMPSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_ON;
  static const Bcm_lowbeamlampstatusType BCM_LOWBEAMLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_BCM_LOWBEAMLAMPSTATUS_RESERVED;
  static inline bool Bcm_lowbeamlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_IsValid(value);
  }
  static const Bcm_lowbeamlampstatusType Bcm_lowbeamlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_MIN;
  static const Bcm_lowbeamlampstatusType Bcm_lowbeamlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_MAX;
  static const int Bcm_lowbeamlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Bcm_lowbeamlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_lowbeamlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_lowbeamlampstatusType_Name(Bcm_lowbeamlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Name(value);
  }
  static inline bool Bcm_lowbeamlampstatusType_Parse(const ::std::string& name,
      Bcm_lowbeamlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_positionlampstatusType Bcm_positionlampstatusType;
  static const Bcm_positionlampstatusType BCM_POSITIONLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_INVALID;
  static const Bcm_positionlampstatusType BCM_POSITIONLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_OFF;
  static const Bcm_positionlampstatusType BCM_POSITIONLAMPSTATUS_ON =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_ON;
  static const Bcm_positionlampstatusType BCM_POSITIONLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_BCM_POSITIONLAMPSTATUS_RESERVED;
  static inline bool Bcm_positionlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_IsValid(value);
  }
  static const Bcm_positionlampstatusType Bcm_positionlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_MIN;
  static const Bcm_positionlampstatusType Bcm_positionlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_MAX;
  static const int Bcm_positionlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Bcm_positionlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_positionlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_positionlampstatusType_Name(Bcm_positionlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Name(value);
  }
  static inline bool Bcm_positionlampstatusType_Parse(const ::std::string& name,
      Bcm_positionlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType Bcm_hazardlampstatusType;
  static const Bcm_hazardlampstatusType BCM_HAZARDLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_INVALID;
  static const Bcm_hazardlampstatusType BCM_HAZARDLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_OFF;
  static const Bcm_hazardlampstatusType BCM_HAZARDLAMPSTATUS_BLINK =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_BLINK;
  static const Bcm_hazardlampstatusType BCM_HAZARDLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_BCM_HAZARDLAMPSTATUS_RESERVED;
  static inline bool Bcm_hazardlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_IsValid(value);
  }
  static const Bcm_hazardlampstatusType Bcm_hazardlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_MIN;
  static const Bcm_hazardlampstatusType Bcm_hazardlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_MAX;
  static const int Bcm_hazardlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Bcm_hazardlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_hazardlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_hazardlampstatusType_Name(Bcm_hazardlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Name(value);
  }
  static inline bool Bcm_hazardlampstatusType_Parse(const ::std::string& name,
      Bcm_hazardlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType Bcm_rightturnlampstatusType;
  static const Bcm_rightturnlampstatusType BCM_RIGHTTURNLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_INVALID;
  static const Bcm_rightturnlampstatusType BCM_RIGHTTURNLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_OFF;
  static const Bcm_rightturnlampstatusType BCM_RIGHTTURNLAMPSTATUS_BLINK =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_BLINK;
  static const Bcm_rightturnlampstatusType BCM_RIGHTTURNLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_BCM_RIGHTTURNLAMPSTATUS_RESERVED;
  static inline bool Bcm_rightturnlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_IsValid(value);
  }
  static const Bcm_rightturnlampstatusType Bcm_rightturnlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_MIN;
  static const Bcm_rightturnlampstatusType Bcm_rightturnlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_MAX;
  static const int Bcm_rightturnlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Bcm_rightturnlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rightturnlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_rightturnlampstatusType_Name(Bcm_rightturnlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Name(value);
  }
  static inline bool Bcm_rightturnlampstatusType_Parse(const ::std::string& name,
      Bcm_rightturnlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_Parse(name, value);
  }

  typedef Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType Bcm_leftturnlampstatusType;
  static const Bcm_leftturnlampstatusType BCM_LEFTTURNLAMPSTATUS_INVALID =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_INVALID;
  static const Bcm_leftturnlampstatusType BCM_LEFTTURNLAMPSTATUS_OFF =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_OFF;
  static const Bcm_leftturnlampstatusType BCM_LEFTTURNLAMPSTATUS_BLINK =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_BLINK;
  static const Bcm_leftturnlampstatusType BCM_LEFTTURNLAMPSTATUS_RESERVED =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_BCM_LEFTTURNLAMPSTATUS_RESERVED;
  static inline bool Bcm_leftturnlampstatusType_IsValid(int value) {
    return Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_IsValid(value);
  }
  static const Bcm_leftturnlampstatusType Bcm_leftturnlampstatusType_MIN =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_MIN;
  static const Bcm_leftturnlampstatusType Bcm_leftturnlampstatusType_MAX =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_MAX;
  static const int Bcm_leftturnlampstatusType_ARRAYSIZE =
    Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Bcm_leftturnlampstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_leftturnlampstatusType_descriptor() {
    return Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_descriptor();
  }
  static inline const ::std::string& Bcm_leftturnlampstatusType_Name(Bcm_leftturnlampstatusType value) {
    return Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Name(value);
  }
  static inline bool Bcm_leftturnlampstatusType_Parse(const ::std::string& name,
      Bcm_leftturnlampstatusType* value) {
    return Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_brakelampstatusType bcm_brakelampstatus = 1;
  bool has_bcm_brakelampstatus() const;
  void clear_bcm_brakelampstatus();
  static const int kBcmBrakelampstatusFieldNumber = 1;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType bcm_brakelampstatus() const;
  void set_bcm_brakelampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_rearfoglampstatusType bcm_rearfoglampstatus = 2;
  bool has_bcm_rearfoglampstatus() const;
  void clear_bcm_rearfoglampstatus();
  static const int kBcmRearfoglampstatusFieldNumber = 2;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType bcm_rearfoglampstatus() const;
  void set_bcm_rearfoglampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_frontfoglampstatusType bcm_frontfoglampstatus = 3;
  bool has_bcm_frontfoglampstatus() const;
  void clear_bcm_frontfoglampstatus();
  static const int kBcmFrontfoglampstatusFieldNumber = 3;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType bcm_frontfoglampstatus() const;
  void set_bcm_frontfoglampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_washerstatusType bcm_washerstatus = 4;
  bool has_bcm_washerstatus() const;
  void clear_bcm_washerstatus();
  static const int kBcmWasherstatusFieldNumber = 4;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType bcm_washerstatus() const;
  void set_bcm_washerstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_wiperstatusType bcm_wiperstatus = 5;
  bool has_bcm_wiperstatus() const;
  void clear_bcm_wiperstatus();
  static const int kBcmWiperstatusFieldNumber = 5;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType bcm_wiperstatus() const;
  void set_bcm_wiperstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_doorlockfeedbackType bcm_doorlockfeedback = 6;
  bool has_bcm_doorlockfeedback() const;
  void clear_bcm_doorlockfeedback();
  static const int kBcmDoorlockfeedbackFieldNumber = 6;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType bcm_doorlockfeedback() const;
  void set_bcm_doorlockfeedback(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_hornstatusType bcm_hornstatus = 7;
  bool has_bcm_hornstatus() const;
  void clear_bcm_hornstatus();
  static const int kBcmHornstatusFieldNumber = 7;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType bcm_hornstatus() const;
  void set_bcm_hornstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_highbeamlampstatusType bcm_highbeamlampstatus = 8;
  bool has_bcm_highbeamlampstatus() const;
  void clear_bcm_highbeamlampstatus();
  static const int kBcmHighbeamlampstatusFieldNumber = 8;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType bcm_highbeamlampstatus() const;
  void set_bcm_highbeamlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_lowbeamlampstatusType bcm_lowbeamlampstatus = 9;
  bool has_bcm_lowbeamlampstatus() const;
  void clear_bcm_lowbeamlampstatus();
  static const int kBcmLowbeamlampstatusFieldNumber = 9;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType bcm_lowbeamlampstatus() const;
  void set_bcm_lowbeamlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_positionlampstatusType bcm_positionlampstatus = 10;
  bool has_bcm_positionlampstatus() const;
  void clear_bcm_positionlampstatus();
  static const int kBcmPositionlampstatusFieldNumber = 10;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType bcm_positionlampstatus() const;
  void set_bcm_positionlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_hazardlampstatusType bcm_hazardlampstatus = 11;
  bool has_bcm_hazardlampstatus() const;
  void clear_bcm_hazardlampstatus();
  static const int kBcmHazardlampstatusFieldNumber = 11;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType bcm_hazardlampstatus() const;
  void set_bcm_hazardlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_rightturnlampstatusType bcm_rightturnlampstatus = 12;
  bool has_bcm_rightturnlampstatus() const;
  void clear_bcm_rightturnlampstatus();
  static const int kBcmRightturnlampstatusFieldNumber = 12;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType bcm_rightturnlampstatus() const;
  void set_bcm_rightturnlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType value);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_leftturnlampstatusType bcm_leftturnlampstatus = 13;
  bool has_bcm_leftturnlampstatus() const;
  void clear_bcm_leftturnlampstatus();
  static const int kBcmLeftturnlampstatusFieldNumber = 13;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType bcm_leftturnlampstatus() const;
  void set_bcm_leftturnlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Bcm_bodysts_0x344_344)
 private:
  void set_has_bcm_brakelampstatus();
  void clear_has_bcm_brakelampstatus();
  void set_has_bcm_rearfoglampstatus();
  void clear_has_bcm_rearfoglampstatus();
  void set_has_bcm_frontfoglampstatus();
  void clear_has_bcm_frontfoglampstatus();
  void set_has_bcm_washerstatus();
  void clear_has_bcm_washerstatus();
  void set_has_bcm_wiperstatus();
  void clear_has_bcm_wiperstatus();
  void set_has_bcm_doorlockfeedback();
  void clear_has_bcm_doorlockfeedback();
  void set_has_bcm_hornstatus();
  void clear_has_bcm_hornstatus();
  void set_has_bcm_highbeamlampstatus();
  void clear_has_bcm_highbeamlampstatus();
  void set_has_bcm_lowbeamlampstatus();
  void clear_has_bcm_lowbeamlampstatus();
  void set_has_bcm_positionlampstatus();
  void clear_has_bcm_positionlampstatus();
  void set_has_bcm_hazardlampstatus();
  void clear_has_bcm_hazardlampstatus();
  void set_has_bcm_rightturnlampstatus();
  void clear_has_bcm_rightturnlampstatus();
  void set_has_bcm_leftturnlampstatus();
  void clear_has_bcm_leftturnlampstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int bcm_brakelampstatus_;
  int bcm_rearfoglampstatus_;
  int bcm_frontfoglampstatus_;
  int bcm_washerstatus_;
  int bcm_wiperstatus_;
  int bcm_doorlockfeedback_;
  int bcm_hornstatus_;
  int bcm_highbeamlampstatus_;
  int bcm_lowbeamlampstatus_;
  int bcm_positionlampstatus_;
  int bcm_hazardlampstatus_;
  int bcm_rightturnlampstatus_;
  int bcm_leftturnlampstatus_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_bms_display_0x323_323 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_bms_display_0x323_323) */ {
 public:
  Gw_bms_display_0x323_323();
  virtual ~Gw_bms_display_0x323_323();

  Gw_bms_display_0x323_323(const Gw_bms_display_0x323_323& from);

  inline Gw_bms_display_0x323_323& operator=(const Gw_bms_display_0x323_323& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_bms_display_0x323_323& default_instance();

  static inline const Gw_bms_display_0x323_323* internal_default_instance() {
    return reinterpret_cast<const Gw_bms_display_0x323_323*>(
               &_Gw_bms_display_0x323_323_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Gw_bms_display_0x323_323* other);

  // implements Message ----------------------------------------------

  inline Gw_bms_display_0x323_323* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_bms_display_0x323_323* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_bms_display_0x323_323& from);
  void MergeFrom(const Gw_bms_display_0x323_323& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_bms_display_0x323_323* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x323 = 1;
  bool has_checksum_0x323() const;
  void clear_checksum_0x323();
  static const int kChecksum0X323FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x323() const;
  void set_checksum_0x323(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x323 = 2;
  bool has_rolling_counter_0x323() const;
  void clear_rolling_counter_0x323();
  static const int kRollingCounter0X323FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x323() const;
  void set_rolling_counter_0x323(::google::protobuf::int32 value);

  // optional double bms_consumeq_est = 3;
  bool has_bms_consumeq_est() const;
  void clear_bms_consumeq_est();
  static const int kBmsConsumeqEstFieldNumber = 3;
  double bms_consumeq_est() const;
  void set_bms_consumeq_est(double value);

  // optional double bms_availableeq_est = 4;
  bool has_bms_availableeq_est() const;
  void clear_bms_availableeq_est();
  static const int kBmsAvailableeqEstFieldNumber = 4;
  double bms_availableeq_est() const;
  void set_bms_availableeq_est(double value);

  // optional double bms_soh_est = 5;
  bool has_bms_soh_est() const;
  void clear_bms_soh_est();
  static const int kBmsSohEstFieldNumber = 5;
  double bms_soh_est() const;
  void set_bms_soh_est(double value);

  // optional double bms_socdisplay_est = 6;
  bool has_bms_socdisplay_est() const;
  void clear_bms_socdisplay_est();
  static const int kBmsSocdisplayEstFieldNumber = 6;
  double bms_socdisplay_est() const;
  void set_bms_socdisplay_est(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_bms_display_0x323_323)
 private:
  void set_has_checksum_0x323();
  void clear_has_checksum_0x323();
  void set_has_rolling_counter_0x323();
  void clear_has_rolling_counter_0x323();
  void set_has_bms_consumeq_est();
  void clear_has_bms_consumeq_est();
  void set_has_bms_availableeq_est();
  void clear_has_bms_availableeq_est();
  void set_has_bms_soh_est();
  void clear_has_bms_soh_est();
  void set_has_bms_socdisplay_est();
  void clear_has_bms_socdisplay_est();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x323_;
  ::google::protobuf::int32 rolling_counter_0x323_;
  double bms_consumeq_est_;
  double bms_availableeq_est_;
  double bms_soh_est_;
  double bms_socdisplay_est_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Adu_bodycontrol_0x333_333 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Adu_bodycontrol_0x333_333) */ {
 public:
  Adu_bodycontrol_0x333_333();
  virtual ~Adu_bodycontrol_0x333_333();

  Adu_bodycontrol_0x333_333(const Adu_bodycontrol_0x333_333& from);

  inline Adu_bodycontrol_0x333_333& operator=(const Adu_bodycontrol_0x333_333& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Adu_bodycontrol_0x333_333& default_instance();

  static inline const Adu_bodycontrol_0x333_333* internal_default_instance() {
    return reinterpret_cast<const Adu_bodycontrol_0x333_333*>(
               &_Adu_bodycontrol_0x333_333_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Adu_bodycontrol_0x333_333* other);

  // implements Message ----------------------------------------------

  inline Adu_bodycontrol_0x333_333* New() const PROTOBUF_FINAL { return New(NULL); }

  Adu_bodycontrol_0x333_333* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Adu_bodycontrol_0x333_333& from);
  void MergeFrom(const Adu_bodycontrol_0x333_333& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Adu_bodycontrol_0x333_333* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType Adu_rearfoglampcontrolType;
  static const Adu_rearfoglampcontrolType ADU_REARFOGLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_INVALID;
  static const Adu_rearfoglampcontrolType ADU_REARFOGLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_OFF;
  static const Adu_rearfoglampcontrolType ADU_REARFOGLAMPCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_ON;
  static const Adu_rearfoglampcontrolType ADU_REARFOGLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_ADU_REARFOGLAMPCONTROL_RESERVED;
  static inline bool Adu_rearfoglampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_IsValid(value);
  }
  static const Adu_rearfoglampcontrolType Adu_rearfoglampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_MIN;
  static const Adu_rearfoglampcontrolType Adu_rearfoglampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_MAX;
  static const int Adu_rearfoglampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Adu_rearfoglampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_rearfoglampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_rearfoglampcontrolType_Name(Adu_rearfoglampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Name(value);
  }
  static inline bool Adu_rearfoglampcontrolType_Parse(const ::std::string& name,
      Adu_rearfoglampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType Adu_frontfoglampcontrolType;
  static const Adu_frontfoglampcontrolType ADU_FRONTFOGLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_INVALID;
  static const Adu_frontfoglampcontrolType ADU_FRONTFOGLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_OFF;
  static const Adu_frontfoglampcontrolType ADU_FRONTFOGLAMPCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_ON;
  static const Adu_frontfoglampcontrolType ADU_FRONTFOGLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_ADU_FRONTFOGLAMPCONTROL_RESERVED;
  static inline bool Adu_frontfoglampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_IsValid(value);
  }
  static const Adu_frontfoglampcontrolType Adu_frontfoglampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_MIN;
  static const Adu_frontfoglampcontrolType Adu_frontfoglampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_MAX;
  static const int Adu_frontfoglampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Adu_frontfoglampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_frontfoglampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_frontfoglampcontrolType_Name(Adu_frontfoglampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Name(value);
  }
  static inline bool Adu_frontfoglampcontrolType_Parse(const ::std::string& name,
      Adu_frontfoglampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_washercontrolType Adu_washercontrolType;
  static const Adu_washercontrolType ADU_WASHERCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_INVALID;
  static const Adu_washercontrolType ADU_WASHERCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_OFF;
  static const Adu_washercontrolType ADU_WASHERCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_ON;
  static const Adu_washercontrolType ADU_WASHERCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_ADU_WASHERCONTROL_RESERVED;
  static inline bool Adu_washercontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_washercontrolType_IsValid(value);
  }
  static const Adu_washercontrolType Adu_washercontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_MIN;
  static const Adu_washercontrolType Adu_washercontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_MAX;
  static const int Adu_washercontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_washercontrolType_Adu_washercontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_washercontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_washercontrolType_descriptor();
  }
  static inline const ::std::string& Adu_washercontrolType_Name(Adu_washercontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_washercontrolType_Name(value);
  }
  static inline bool Adu_washercontrolType_Parse(const ::std::string& name,
      Adu_washercontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_washercontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_wipercontrolType Adu_wipercontrolType;
  static const Adu_wipercontrolType ADU_WIPERCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_INVALID;
  static const Adu_wipercontrolType ADU_WIPERCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_OFF;
  static const Adu_wipercontrolType ADU_WIPERCONTROL_LOW_SPEED_A3_A8_B5_CD_CB_B5_A3_A9 =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_LOW_SPEED_A3_A8_B5_CD_CB_B5_A3_A9;
  static const Adu_wipercontrolType ADU_WIPERCONTROL_HIGH_SPEED_A3_A8_B8_DF_CB_B5_A3_A9 =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_HIGH_SPEED_A3_A8_B8_DF_CB_B5_A3_A9;
  static const Adu_wipercontrolType ADU_WIPERCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_ADU_WIPERCONTROL_RESERVED;
  static inline bool Adu_wipercontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_wipercontrolType_IsValid(value);
  }
  static const Adu_wipercontrolType Adu_wipercontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_MIN;
  static const Adu_wipercontrolType Adu_wipercontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_MAX;
  static const int Adu_wipercontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Adu_wipercontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_wipercontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_wipercontrolType_descriptor();
  }
  static inline const ::std::string& Adu_wipercontrolType_Name(Adu_wipercontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Name(value);
  }
  static inline bool Adu_wipercontrolType_Parse(const ::std::string& name,
      Adu_wipercontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_wipercontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_doorcontrolType Adu_doorcontrolType;
  static const Adu_doorcontrolType ADU_DOORCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_INVALID;
  static const Adu_doorcontrolType ADU_DOORCONTROL_LOCK =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_LOCK;
  static const Adu_doorcontrolType ADU_DOORCONTROL_UNLOCK =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_UNLOCK;
  static const Adu_doorcontrolType ADU_DOORCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_ADU_DOORCONTROL_RESERVED;
  static inline bool Adu_doorcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_doorcontrolType_IsValid(value);
  }
  static const Adu_doorcontrolType Adu_doorcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_MIN;
  static const Adu_doorcontrolType Adu_doorcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_MAX;
  static const int Adu_doorcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Adu_doorcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_doorcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_doorcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_doorcontrolType_Name(Adu_doorcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Name(value);
  }
  static inline bool Adu_doorcontrolType_Parse(const ::std::string& name,
      Adu_doorcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_doorcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_horncontrolType Adu_horncontrolType;
  static const Adu_horncontrolType ADU_HORNCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_INVALID;
  static const Adu_horncontrolType ADU_HORNCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_OFF;
  static const Adu_horncontrolType ADU_HORNCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_ON;
  static const Adu_horncontrolType ADU_HORNCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_ADU_HORNCONTROL_RESERVED;
  static inline bool Adu_horncontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_horncontrolType_IsValid(value);
  }
  static const Adu_horncontrolType Adu_horncontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_MIN;
  static const Adu_horncontrolType Adu_horncontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_MAX;
  static const int Adu_horncontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_horncontrolType_Adu_horncontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_horncontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_horncontrolType_descriptor();
  }
  static inline const ::std::string& Adu_horncontrolType_Name(Adu_horncontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_horncontrolType_Name(value);
  }
  static inline bool Adu_horncontrolType_Parse(const ::std::string& name,
      Adu_horncontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_horncontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType Adu_highbeamlampcontrolType;
  static const Adu_highbeamlampcontrolType ADU_HIGHBEAMLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_INVALID;
  static const Adu_highbeamlampcontrolType ADU_HIGHBEAMLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_OFF;
  static const Adu_highbeamlampcontrolType ADU_HIGHBEAMLAMPCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_ON;
  static const Adu_highbeamlampcontrolType ADU_HIGHBEAMLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_ADU_HIGHBEAMLAMPCONTROL_RESERVED;
  static inline bool Adu_highbeamlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_IsValid(value);
  }
  static const Adu_highbeamlampcontrolType Adu_highbeamlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_MIN;
  static const Adu_highbeamlampcontrolType Adu_highbeamlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_MAX;
  static const int Adu_highbeamlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Adu_highbeamlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_highbeamlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_highbeamlampcontrolType_Name(Adu_highbeamlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Name(value);
  }
  static inline bool Adu_highbeamlampcontrolType_Parse(const ::std::string& name,
      Adu_highbeamlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType Adu_lowbeamlampcontrolType;
  static const Adu_lowbeamlampcontrolType ADU_LOWBEAMLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_INVALID;
  static const Adu_lowbeamlampcontrolType ADU_LOWBEAMLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_OFF;
  static const Adu_lowbeamlampcontrolType ADU_LOWBEAMLAMPCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_ON;
  static const Adu_lowbeamlampcontrolType ADU_LOWBEAMLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_ADU_LOWBEAMLAMPCONTROL_RESERVED;
  static inline bool Adu_lowbeamlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_IsValid(value);
  }
  static const Adu_lowbeamlampcontrolType Adu_lowbeamlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_MIN;
  static const Adu_lowbeamlampcontrolType Adu_lowbeamlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_MAX;
  static const int Adu_lowbeamlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Adu_lowbeamlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_lowbeamlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_lowbeamlampcontrolType_Name(Adu_lowbeamlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Name(value);
  }
  static inline bool Adu_lowbeamlampcontrolType_Parse(const ::std::string& name,
      Adu_lowbeamlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType Adu_positionlampcontrolType;
  static const Adu_positionlampcontrolType ADU_POSITIONLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_INVALID;
  static const Adu_positionlampcontrolType ADU_POSITIONLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_OFF;
  static const Adu_positionlampcontrolType ADU_POSITIONLAMPCONTROL_ON =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_ON;
  static const Adu_positionlampcontrolType ADU_POSITIONLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_ADU_POSITIONLAMPCONTROL_RESERVED;
  static inline bool Adu_positionlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_IsValid(value);
  }
  static const Adu_positionlampcontrolType Adu_positionlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_MIN;
  static const Adu_positionlampcontrolType Adu_positionlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_MAX;
  static const int Adu_positionlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Adu_positionlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_positionlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_positionlampcontrolType_Name(Adu_positionlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Name(value);
  }
  static inline bool Adu_positionlampcontrolType_Parse(const ::std::string& name,
      Adu_positionlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType Adu_hazardlampcontrolType;
  static const Adu_hazardlampcontrolType ADU_HAZARDLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_INVALID;
  static const Adu_hazardlampcontrolType ADU_HAZARDLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_OFF;
  static const Adu_hazardlampcontrolType ADU_HAZARDLAMPCONTROL_BLINK =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_BLINK;
  static const Adu_hazardlampcontrolType ADU_HAZARDLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_ADU_HAZARDLAMPCONTROL_RESERVED;
  static inline bool Adu_hazardlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_IsValid(value);
  }
  static const Adu_hazardlampcontrolType Adu_hazardlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_MIN;
  static const Adu_hazardlampcontrolType Adu_hazardlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_MAX;
  static const int Adu_hazardlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Adu_hazardlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_hazardlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_hazardlampcontrolType_Name(Adu_hazardlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Name(value);
  }
  static inline bool Adu_hazardlampcontrolType_Parse(const ::std::string& name,
      Adu_hazardlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType Adu_rightturnlampcontrolType;
  static const Adu_rightturnlampcontrolType ADU_RIGHTTURNLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_INVALID;
  static const Adu_rightturnlampcontrolType ADU_RIGHTTURNLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_OFF;
  static const Adu_rightturnlampcontrolType ADU_RIGHTTURNLAMPCONTROL_BLINK =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_BLINK;
  static const Adu_rightturnlampcontrolType ADU_RIGHTTURNLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_ADU_RIGHTTURNLAMPCONTROL_RESERVED;
  static inline bool Adu_rightturnlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_IsValid(value);
  }
  static const Adu_rightturnlampcontrolType Adu_rightturnlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_MIN;
  static const Adu_rightturnlampcontrolType Adu_rightturnlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_MAX;
  static const int Adu_rightturnlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Adu_rightturnlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_rightturnlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_rightturnlampcontrolType_Name(Adu_rightturnlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Name(value);
  }
  static inline bool Adu_rightturnlampcontrolType_Parse(const ::std::string& name,
      Adu_rightturnlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_Parse(name, value);
  }

  typedef Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType Adu_leftturnlampcontrolType;
  static const Adu_leftturnlampcontrolType ADU_LEFTTURNLAMPCONTROL_INVALID =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_INVALID;
  static const Adu_leftturnlampcontrolType ADU_LEFTTURNLAMPCONTROL_OFF =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_OFF;
  static const Adu_leftturnlampcontrolType ADU_LEFTTURNLAMPCONTROL_BLINK =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_BLINK;
  static const Adu_leftturnlampcontrolType ADU_LEFTTURNLAMPCONTROL_RESERVED =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_ADU_LEFTTURNLAMPCONTROL_RESERVED;
  static inline bool Adu_leftturnlampcontrolType_IsValid(int value) {
    return Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_IsValid(value);
  }
  static const Adu_leftturnlampcontrolType Adu_leftturnlampcontrolType_MIN =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_MIN;
  static const Adu_leftturnlampcontrolType Adu_leftturnlampcontrolType_MAX =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_MAX;
  static const int Adu_leftturnlampcontrolType_ARRAYSIZE =
    Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Adu_leftturnlampcontrolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Adu_leftturnlampcontrolType_descriptor() {
    return Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_descriptor();
  }
  static inline const ::std::string& Adu_leftturnlampcontrolType_Name(Adu_leftturnlampcontrolType value) {
    return Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Name(value);
  }
  static inline bool Adu_leftturnlampcontrolType_Parse(const ::std::string& name,
      Adu_leftturnlampcontrolType* value) {
    return Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_rearfoglampcontrolType adu_rearfoglampcontrol = 1;
  bool has_adu_rearfoglampcontrol() const;
  void clear_adu_rearfoglampcontrol();
  static const int kAduRearfoglampcontrolFieldNumber = 1;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType adu_rearfoglampcontrol() const;
  void set_adu_rearfoglampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_frontfoglampcontrolType adu_frontfoglampcontrol = 2;
  bool has_adu_frontfoglampcontrol() const;
  void clear_adu_frontfoglampcontrol();
  static const int kAduFrontfoglampcontrolFieldNumber = 2;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType adu_frontfoglampcontrol() const;
  void set_adu_frontfoglampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_washercontrolType adu_washercontrol = 3;
  bool has_adu_washercontrol() const;
  void clear_adu_washercontrol();
  static const int kAduWashercontrolFieldNumber = 3;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType adu_washercontrol() const;
  void set_adu_washercontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_wipercontrolType adu_wipercontrol = 4;
  bool has_adu_wipercontrol() const;
  void clear_adu_wipercontrol();
  static const int kAduWipercontrolFieldNumber = 4;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType adu_wipercontrol() const;
  void set_adu_wipercontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_doorcontrolType adu_doorcontrol = 5;
  bool has_adu_doorcontrol() const;
  void clear_adu_doorcontrol();
  static const int kAduDoorcontrolFieldNumber = 5;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType adu_doorcontrol() const;
  void set_adu_doorcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_horncontrolType adu_horncontrol = 6;
  bool has_adu_horncontrol() const;
  void clear_adu_horncontrol();
  static const int kAduHorncontrolFieldNumber = 6;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType adu_horncontrol() const;
  void set_adu_horncontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_highbeamlampcontrolType adu_highbeamlampcontrol = 7;
  bool has_adu_highbeamlampcontrol() const;
  void clear_adu_highbeamlampcontrol();
  static const int kAduHighbeamlampcontrolFieldNumber = 7;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType adu_highbeamlampcontrol() const;
  void set_adu_highbeamlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_lowbeamlampcontrolType adu_lowbeamlampcontrol = 8;
  bool has_adu_lowbeamlampcontrol() const;
  void clear_adu_lowbeamlampcontrol();
  static const int kAduLowbeamlampcontrolFieldNumber = 8;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType adu_lowbeamlampcontrol() const;
  void set_adu_lowbeamlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_positionlampcontrolType adu_positionlampcontrol = 9;
  bool has_adu_positionlampcontrol() const;
  void clear_adu_positionlampcontrol();
  static const int kAduPositionlampcontrolFieldNumber = 9;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType adu_positionlampcontrol() const;
  void set_adu_positionlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_hazardlampcontrolType adu_hazardlampcontrol = 10;
  bool has_adu_hazardlampcontrol() const;
  void clear_adu_hazardlampcontrol();
  static const int kAduHazardlampcontrolFieldNumber = 10;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType adu_hazardlampcontrol() const;
  void set_adu_hazardlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_rightturnlampcontrolType adu_rightturnlampcontrol = 11;
  bool has_adu_rightturnlampcontrol() const;
  void clear_adu_rightturnlampcontrol();
  static const int kAduRightturnlampcontrolFieldNumber = 11;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType adu_rightturnlampcontrol() const;
  void set_adu_rightturnlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType value);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_leftturnlampcontrolType adu_leftturnlampcontrol = 12;
  bool has_adu_leftturnlampcontrol() const;
  void clear_adu_leftturnlampcontrol();
  static const int kAduLeftturnlampcontrolFieldNumber = 12;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType adu_leftturnlampcontrol() const;
  void set_adu_leftturnlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Adu_bodycontrol_0x333_333)
 private:
  void set_has_adu_rearfoglampcontrol();
  void clear_has_adu_rearfoglampcontrol();
  void set_has_adu_frontfoglampcontrol();
  void clear_has_adu_frontfoglampcontrol();
  void set_has_adu_washercontrol();
  void clear_has_adu_washercontrol();
  void set_has_adu_wipercontrol();
  void clear_has_adu_wipercontrol();
  void set_has_adu_doorcontrol();
  void clear_has_adu_doorcontrol();
  void set_has_adu_horncontrol();
  void clear_has_adu_horncontrol();
  void set_has_adu_highbeamlampcontrol();
  void clear_has_adu_highbeamlampcontrol();
  void set_has_adu_lowbeamlampcontrol();
  void clear_has_adu_lowbeamlampcontrol();
  void set_has_adu_positionlampcontrol();
  void clear_has_adu_positionlampcontrol();
  void set_has_adu_hazardlampcontrol();
  void clear_has_adu_hazardlampcontrol();
  void set_has_adu_rightturnlampcontrol();
  void clear_has_adu_rightturnlampcontrol();
  void set_has_adu_leftturnlampcontrol();
  void clear_has_adu_leftturnlampcontrol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int adu_rearfoglampcontrol_;
  int adu_frontfoglampcontrol_;
  int adu_washercontrol_;
  int adu_wipercontrol_;
  int adu_doorcontrol_;
  int adu_horncontrol_;
  int adu_highbeamlampcontrol_;
  int adu_lowbeamlampcontrol_;
  int adu_positionlampcontrol_;
  int adu_hazardlampcontrol_;
  int adu_rightturnlampcontrol_;
  int adu_leftturnlampcontrol_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_bms_sts_0x181_181 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_bms_sts_0x181_181) */ {
 public:
  Gw_bms_sts_0x181_181();
  virtual ~Gw_bms_sts_0x181_181();

  Gw_bms_sts_0x181_181(const Gw_bms_sts_0x181_181& from);

  inline Gw_bms_sts_0x181_181& operator=(const Gw_bms_sts_0x181_181& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_bms_sts_0x181_181& default_instance();

  static inline const Gw_bms_sts_0x181_181* internal_default_instance() {
    return reinterpret_cast<const Gw_bms_sts_0x181_181*>(
               &_Gw_bms_sts_0x181_181_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Gw_bms_sts_0x181_181* other);

  // implements Message ----------------------------------------------

  inline Gw_bms_sts_0x181_181* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_bms_sts_0x181_181* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_bms_sts_0x181_181& from);
  void MergeFrom(const Gw_bms_sts_0x181_181& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_bms_sts_0x181_181* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_bms_sts_0x181_181_Bms_err_levType Bms_err_levType;
  static const Bms_err_levType BMS_ERR_LEV_NO_ERROR =
    Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_NO_ERROR;
  static const Bms_err_levType BMS_ERR_LEV_LEVEL1_ERROR =
    Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL1_ERROR;
  static const Bms_err_levType BMS_ERR_LEV_LEVEL2_ERROR =
    Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL2_ERROR;
  static const Bms_err_levType BMS_ERR_LEV_LEVEL3_ERROR =
    Gw_bms_sts_0x181_181_Bms_err_levType_BMS_ERR_LEV_LEVEL3_ERROR;
  static inline bool Bms_err_levType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_err_levType_IsValid(value);
  }
  static const Bms_err_levType Bms_err_levType_MIN =
    Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_MIN;
  static const Bms_err_levType Bms_err_levType_MAX =
    Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_MAX;
  static const int Bms_err_levType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_err_levType_Bms_err_levType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_err_levType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_err_levType_descriptor();
  }
  static inline const ::std::string& Bms_err_levType_Name(Bms_err_levType value) {
    return Gw_bms_sts_0x181_181_Bms_err_levType_Name(value);
  }
  static inline bool Bms_err_levType_Parse(const ::std::string& name,
      Bms_err_levType* value) {
    return Gw_bms_sts_0x181_181_Bms_err_levType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_idu_statusType Bms_idu_statusType;
  static const Bms_idu_statusType BMS_IDU_STATUS_NORMAL =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_NORMAL;
  static const Bms_idu_statusType BMS_IDU_STATUS_LEVEL1_600_A6_B8_V =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL1_600_A6_B8_V;
  static const Bms_idu_statusType BMS_IDU_STATUS_LEVEL2_500_A6_B8_V =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL2_500_A6_B8_V;
  static const Bms_idu_statusType BMS_IDU_STATUS_LEVEL3_CHARGE_100_A6_B8_V_DRIVE_400_A6_B8_V =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_BMS_IDU_STATUS_LEVEL3_CHARGE_100_A6_B8_V_DRIVE_400_A6_B8_V;
  static inline bool Bms_idu_statusType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_idu_statusType_IsValid(value);
  }
  static const Bms_idu_statusType Bms_idu_statusType_MIN =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_MIN;
  static const Bms_idu_statusType Bms_idu_statusType_MAX =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_MAX;
  static const int Bms_idu_statusType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_idu_statusType_Bms_idu_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_idu_statusType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_idu_statusType_descriptor();
  }
  static inline const ::std::string& Bms_idu_statusType_Name(Bms_idu_statusType value) {
    return Gw_bms_sts_0x181_181_Bms_idu_statusType_Name(value);
  }
  static inline bool Bms_idu_statusType_Parse(const ::std::string& name,
      Bms_idu_statusType* value) {
    return Gw_bms_sts_0x181_181_Bms_idu_statusType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_batbalance_errType Bms_batbalance_errType;
  static const Bms_batbalance_errType BMS_BATBALANCE_ERR_NORMAL =
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_NORMAL;
  static const Bms_batbalance_errType BMS_BATBALANCE_ERR_ERROR =
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_BMS_BATBALANCE_ERR_ERROR;
  static inline bool Bms_batbalance_errType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_batbalance_errType_IsValid(value);
  }
  static const Bms_batbalance_errType Bms_batbalance_errType_MIN =
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_MIN;
  static const Bms_batbalance_errType Bms_batbalance_errType_MAX =
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_MAX;
  static const int Bms_batbalance_errType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_batbalance_errType_Bms_batbalance_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_batbalance_errType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_batbalance_errType_descriptor();
  }
  static inline const ::std::string& Bms_batbalance_errType_Name(Bms_batbalance_errType value) {
    return Gw_bms_sts_0x181_181_Bms_batbalance_errType_Name(value);
  }
  static inline bool Bms_batbalance_errType_Parse(const ::std::string& name,
      Bms_batbalance_errType* value) {
    return Gw_bms_sts_0x181_181_Bms_batbalance_errType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_chg_stsType Bms_chg_stsType;
  static const Bms_chg_stsType BMS_CHG_STS_NOT_READY =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_NOT_READY;
  static const Bms_chg_stsType BMS_CHG_STS_READY_TO_CHARGING =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_READY_TO_CHARGING;
  static const Bms_chg_stsType BMS_CHG_STS_CHARGING =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGING;
  static const Bms_chg_stsType BMS_CHG_STS_CHARGEERROR =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGEERROR;
  static const Bms_chg_stsType BMS_CHG_STS_CHARGEOK =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_BMS_CHG_STS_CHARGEOK;
  static inline bool Bms_chg_stsType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_chg_stsType_IsValid(value);
  }
  static const Bms_chg_stsType Bms_chg_stsType_MIN =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_MIN;
  static const Bms_chg_stsType Bms_chg_stsType_MAX =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_MAX;
  static const int Bms_chg_stsType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_chg_stsType_Bms_chg_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_chg_stsType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_chg_stsType_descriptor();
  }
  static inline const ::std::string& Bms_chg_stsType_Name(Bms_chg_stsType value) {
    return Gw_bms_sts_0x181_181_Bms_chg_stsType_Name(value);
  }
  static inline bool Bms_chg_stsType_Parse(const ::std::string& name,
      Bms_chg_stsType* value) {
    return Gw_bms_sts_0x181_181_Bms_chg_stsType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_balance_stsType Bms_balance_stsType;
  static const Bms_balance_stsType BMS_BALANCE_STS_INACTIVE =
    Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_INACTIVE;
  static const Bms_balance_stsType BMS_BALANCE_STS_ACTIVE =
    Gw_bms_sts_0x181_181_Bms_balance_stsType_BMS_BALANCE_STS_ACTIVE;
  static inline bool Bms_balance_stsType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_balance_stsType_IsValid(value);
  }
  static const Bms_balance_stsType Bms_balance_stsType_MIN =
    Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_MIN;
  static const Bms_balance_stsType Bms_balance_stsType_MAX =
    Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_MAX;
  static const int Bms_balance_stsType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_balance_stsType_Bms_balance_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_balance_stsType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_balance_stsType_descriptor();
  }
  static inline const ::std::string& Bms_balance_stsType_Name(Bms_balance_stsType value) {
    return Gw_bms_sts_0x181_181_Bms_balance_stsType_Name(value);
  }
  static inline bool Bms_balance_stsType_Parse(const ::std::string& name,
      Bms_balance_stsType* value) {
    return Gw_bms_sts_0x181_181_Bms_balance_stsType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_hvdown_reqType Bms_hvdown_reqType;
  static const Bms_hvdown_reqType BMS_HVDOWN_REQ_NO_REQUEST =
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_NO_REQUEST;
  static const Bms_hvdown_reqType BMS_HVDOWN_REQ_REQUEST =
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_BMS_HVDOWN_REQ_REQUEST;
  static inline bool Bms_hvdown_reqType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_hvdown_reqType_IsValid(value);
  }
  static const Bms_hvdown_reqType Bms_hvdown_reqType_MIN =
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_MIN;
  static const Bms_hvdown_reqType Bms_hvdown_reqType_MAX =
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_MAX;
  static const int Bms_hvdown_reqType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Bms_hvdown_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_hvdown_reqType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_hvdown_reqType_descriptor();
  }
  static inline const ::std::string& Bms_hvdown_reqType_Name(Bms_hvdown_reqType value) {
    return Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Name(value);
  }
  static inline bool Bms_hvdown_reqType_Parse(const ::std::string& name,
      Bms_hvdown_reqType* value) {
    return Gw_bms_sts_0x181_181_Bms_hvdown_reqType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_hvonoff_stsType Bms_hvonoff_stsType;
  static const Bms_hvonoff_stsType BMS_HVONOFF_STS_HV_OFF =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_HV_OFF;
  static const Bms_hvonoff_stsType BMS_HVONOFF_STS_PRECHARGE =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_PRECHARGE;
  static const Bms_hvonoff_stsType BMS_HVONOFF_STS_HV_ON =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_HV_ON;
  static const Bms_hvonoff_stsType BMS_HVONOFF_STS_FAIL_TO_HV_ON =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_BMS_HVONOFF_STS_FAIL_TO_HV_ON;
  static inline bool Bms_hvonoff_stsType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_IsValid(value);
  }
  static const Bms_hvonoff_stsType Bms_hvonoff_stsType_MIN =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_MIN;
  static const Bms_hvonoff_stsType Bms_hvonoff_stsType_MAX =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_MAX;
  static const int Bms_hvonoff_stsType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Bms_hvonoff_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_hvonoff_stsType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_descriptor();
  }
  static inline const ::std::string& Bms_hvonoff_stsType_Name(Bms_hvonoff_stsType value) {
    return Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Name(value);
  }
  static inline bool Bms_hvonoff_stsType_Parse(const ::std::string& name,
      Bms_hvonoff_stsType* value) {
    return Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_Parse(name, value);
  }

  typedef Gw_bms_sts_0x181_181_Bms_sys_stsType Bms_sys_stsType;
  static const Bms_sys_stsType BMS_SYS_STS_INIT =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_INIT;
  static const Bms_sys_stsType BMS_SYS_STS_OK =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_OK;
  static const Bms_sys_stsType BMS_SYS_STS_WARNING =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_WARNING;
  static const Bms_sys_stsType BMS_SYS_STS_FAULT =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_BMS_SYS_STS_FAULT;
  static inline bool Bms_sys_stsType_IsValid(int value) {
    return Gw_bms_sts_0x181_181_Bms_sys_stsType_IsValid(value);
  }
  static const Bms_sys_stsType Bms_sys_stsType_MIN =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_MIN;
  static const Bms_sys_stsType Bms_sys_stsType_MAX =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_MAX;
  static const int Bms_sys_stsType_ARRAYSIZE =
    Gw_bms_sts_0x181_181_Bms_sys_stsType_Bms_sys_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bms_sys_stsType_descriptor() {
    return Gw_bms_sts_0x181_181_Bms_sys_stsType_descriptor();
  }
  static inline const ::std::string& Bms_sys_stsType_Name(Bms_sys_stsType value) {
    return Gw_bms_sts_0x181_181_Bms_sys_stsType_Name(value);
  }
  static inline bool Bms_sys_stsType_Parse(const ::std::string& name,
      Bms_sys_stsType* value) {
    return Gw_bms_sts_0x181_181_Bms_sys_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x181 = 1;
  bool has_checksum_0x181() const;
  void clear_checksum_0x181();
  static const int kChecksum0X181FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x181() const;
  void set_checksum_0x181(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x181 = 2;
  bool has_rolling_counter_0x181() const;
  void clear_rolling_counter_0x181();
  static const int kRollingCounter0X181FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x181() const;
  void set_rolling_counter_0x181(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_err_levType bms_err_lev = 3;
  bool has_bms_err_lev() const;
  void clear_bms_err_lev();
  static const int kBmsErrLevFieldNumber = 3;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType bms_err_lev() const;
  void set_bms_err_lev(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_idu_statusType bms_idu_status = 4;
  bool has_bms_idu_status() const;
  void clear_bms_idu_status();
  static const int kBmsIduStatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType bms_idu_status() const;
  void set_bms_idu_status(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType value);

  // optional double bms_socactual_est = 6;
  bool has_bms_socactual_est() const;
  void clear_bms_socactual_est();
  static const int kBmsSocactualEstFieldNumber = 6;
  double bms_socactual_est() const;
  void set_bms_socactual_est(double value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_batbalance_errType bms_batbalance_err = 5;
  bool has_bms_batbalance_err() const;
  void clear_bms_batbalance_err();
  static const int kBmsBatbalanceErrFieldNumber = 5;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType bms_batbalance_err() const;
  void set_bms_batbalance_err(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_chg_stsType bms_chg_sts = 8;
  bool has_bms_chg_sts() const;
  void clear_bms_chg_sts();
  static const int kBmsChgStsFieldNumber = 8;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType bms_chg_sts() const;
  void set_bms_chg_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType value);

  // optional double bms_packcur_meas = 7;
  bool has_bms_packcur_meas() const;
  void clear_bms_packcur_meas();
  static const int kBmsPackcurMeasFieldNumber = 7;
  double bms_packcur_meas() const;
  void set_bms_packcur_meas(double value);

  // optional double bms_packvol_meas = 9;
  bool has_bms_packvol_meas() const;
  void clear_bms_packvol_meas();
  static const int kBmsPackvolMeasFieldNumber = 9;
  double bms_packvol_meas() const;
  void set_bms_packvol_meas(double value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_balance_stsType bms_balance_sts = 10;
  bool has_bms_balance_sts() const;
  void clear_bms_balance_sts();
  static const int kBmsBalanceStsFieldNumber = 10;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType bms_balance_sts() const;
  void set_bms_balance_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType value);

  // optional int32 bms_packnum_est = 11;
  bool has_bms_packnum_est() const;
  void clear_bms_packnum_est();
  static const int kBmsPacknumEstFieldNumber = 11;
  ::google::protobuf::int32 bms_packnum_est() const;
  void set_bms_packnum_est(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_hvdown_reqType bms_hvdown_req = 12;
  bool has_bms_hvdown_req() const;
  void clear_bms_hvdown_req();
  static const int kBmsHvdownReqFieldNumber = 12;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType bms_hvdown_req() const;
  void set_bms_hvdown_req(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_hvonoff_stsType bms_hvonoff_sts = 13;
  bool has_bms_hvonoff_sts() const;
  void clear_bms_hvonoff_sts();
  static const int kBmsHvonoffStsFieldNumber = 13;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType bms_hvonoff_sts() const;
  void set_bms_hvonoff_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType value);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_sys_stsType bms_sys_sts = 14;
  bool has_bms_sys_sts() const;
  void clear_bms_sys_sts();
  static const int kBmsSysStsFieldNumber = 14;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType bms_sys_sts() const;
  void set_bms_sys_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_bms_sts_0x181_181)
 private:
  void set_has_checksum_0x181();
  void clear_has_checksum_0x181();
  void set_has_rolling_counter_0x181();
  void clear_has_rolling_counter_0x181();
  void set_has_bms_err_lev();
  void clear_has_bms_err_lev();
  void set_has_bms_idu_status();
  void clear_has_bms_idu_status();
  void set_has_bms_batbalance_err();
  void clear_has_bms_batbalance_err();
  void set_has_bms_socactual_est();
  void clear_has_bms_socactual_est();
  void set_has_bms_packcur_meas();
  void clear_has_bms_packcur_meas();
  void set_has_bms_chg_sts();
  void clear_has_bms_chg_sts();
  void set_has_bms_packvol_meas();
  void clear_has_bms_packvol_meas();
  void set_has_bms_balance_sts();
  void clear_has_bms_balance_sts();
  void set_has_bms_packnum_est();
  void clear_has_bms_packnum_est();
  void set_has_bms_hvdown_req();
  void clear_has_bms_hvdown_req();
  void set_has_bms_hvonoff_sts();
  void clear_has_bms_hvonoff_sts();
  void set_has_bms_sys_sts();
  void clear_has_bms_sys_sts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x181_;
  ::google::protobuf::int32 rolling_counter_0x181_;
  int bms_err_lev_;
  int bms_idu_status_;
  double bms_socactual_est_;
  int bms_batbalance_err_;
  int bms_chg_sts_;
  double bms_packcur_meas_;
  double bms_packvol_meas_;
  int bms_balance_sts_;
  ::google::protobuf::int32 bms_packnum_est_;
  int bms_hvdown_req_;
  int bms_hvonoff_sts_;
  int bms_sys_sts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_control_0x185_185 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_control_0x185_185) */ {
 public:
  Gw_vcu_control_0x185_185();
  virtual ~Gw_vcu_control_0x185_185();

  Gw_vcu_control_0x185_185(const Gw_vcu_control_0x185_185& from);

  inline Gw_vcu_control_0x185_185& operator=(const Gw_vcu_control_0x185_185& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_control_0x185_185& default_instance();

  static inline const Gw_vcu_control_0x185_185* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_control_0x185_185*>(
               &_Gw_vcu_control_0x185_185_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Gw_vcu_control_0x185_185* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_control_0x185_185* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_control_0x185_185* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_control_0x185_185& from);
  void MergeFrom(const Gw_vcu_control_0x185_185& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_control_0x185_185* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType Vcu_ems_engoperationstatusType;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_STOPPED =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STOPPED;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_RUNNING =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_RUNNING;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_IDLE =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_IDLE;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_DFCO =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_DFCO;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_CRANKING =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_CRANKING;
  static const Vcu_ems_engoperationstatusType VCU_EMS_ENGOPERATIONSTATUS_STALLING =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_VCU_EMS_ENGOPERATIONSTATUS_STALLING;
  static inline bool Vcu_ems_engoperationstatusType_IsValid(int value) {
    return Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_IsValid(value);
  }
  static const Vcu_ems_engoperationstatusType Vcu_ems_engoperationstatusType_MIN =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_MIN;
  static const Vcu_ems_engoperationstatusType Vcu_ems_engoperationstatusType_MAX =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_MAX;
  static const int Vcu_ems_engoperationstatusType_ARRAYSIZE =
    Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Vcu_ems_engoperationstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_ems_engoperationstatusType_descriptor() {
    return Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_descriptor();
  }
  static inline const ::std::string& Vcu_ems_engoperationstatusType_Name(Vcu_ems_engoperationstatusType value) {
    return Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Name(value);
  }
  static inline bool Vcu_ems_engoperationstatusType_Parse(const ::std::string& name,
      Vcu_ems_engoperationstatusType* value) {
    return Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_Parse(name, value);
  }

  typedef Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType Vcu_mcu_asd_reqType;
  static const Vcu_mcu_asd_reqType VCU_MCU_ASD_REQ_ON =
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_ON;
  static const Vcu_mcu_asd_reqType VCU_MCU_ASD_REQ_OFF =
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_VCU_MCU_ASD_REQ_OFF;
  static inline bool Vcu_mcu_asd_reqType_IsValid(int value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_IsValid(value);
  }
  static const Vcu_mcu_asd_reqType Vcu_mcu_asd_reqType_MIN =
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_MIN;
  static const Vcu_mcu_asd_reqType Vcu_mcu_asd_reqType_MAX =
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_MAX;
  static const int Vcu_mcu_asd_reqType_ARRAYSIZE =
    Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Vcu_mcu_asd_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_mcu_asd_reqType_descriptor() {
    return Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_descriptor();
  }
  static inline const ::std::string& Vcu_mcu_asd_reqType_Name(Vcu_mcu_asd_reqType value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Name(value);
  }
  static inline bool Vcu_mcu_asd_reqType_Parse(const ::std::string& name,
      Vcu_mcu_asd_reqType* value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_Parse(name, value);
  }

  typedef Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType Vcu_mcu_motor1_ctrmode_reqType;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_DISABLE =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_DISABLE;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_STANDBY =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_STANDBY;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_SPEEDMODE =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_SPEEDMODE;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_TORQUEMODE =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_TORQUEMODE;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_ANTISLIP =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_ANTISLIP;
  static const Vcu_mcu_motor1_ctrmode_reqType VCU_MCU_MOTOR1_CTRMODE_REQ_ALOFFSETCAL =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_VCU_MCU_MOTOR1_CTRMODE_REQ_ALOFFSETCAL;
  static inline bool Vcu_mcu_motor1_ctrmode_reqType_IsValid(int value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_IsValid(value);
  }
  static const Vcu_mcu_motor1_ctrmode_reqType Vcu_mcu_motor1_ctrmode_reqType_MIN =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_MIN;
  static const Vcu_mcu_motor1_ctrmode_reqType Vcu_mcu_motor1_ctrmode_reqType_MAX =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_MAX;
  static const int Vcu_mcu_motor1_ctrmode_reqType_ARRAYSIZE =
    Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Vcu_mcu_motor1_ctrmode_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_mcu_motor1_ctrmode_reqType_descriptor() {
    return Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_descriptor();
  }
  static inline const ::std::string& Vcu_mcu_motor1_ctrmode_reqType_Name(Vcu_mcu_motor1_ctrmode_reqType value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Name(value);
  }
  static inline bool Vcu_mcu_motor1_ctrmode_reqType_Parse(const ::std::string& name,
      Vcu_mcu_motor1_ctrmode_reqType* value) {
    return Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x185 = 1;
  bool has_checksum_0x185() const;
  void clear_checksum_0x185();
  static const int kChecksum0X185FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x185() const;
  void set_checksum_0x185(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x185 = 2;
  bool has_rolling_counter_0x185() const;
  void clear_rolling_counter_0x185();
  static const int kRollingCounter0X185FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x185() const;
  void set_rolling_counter_0x185(::google::protobuf::int32 value);

  // optional double vcu_maxchgpwr_alw = 4;
  bool has_vcu_maxchgpwr_alw() const;
  void clear_vcu_maxchgpwr_alw();
  static const int kVcuMaxchgpwrAlwFieldNumber = 4;
  double vcu_maxchgpwr_alw() const;
  void set_vcu_maxchgpwr_alw(double value);

  // optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_ems_engoperationstatusType vcu_ems_engoperationstatus = 3;
  bool has_vcu_ems_engoperationstatus() const;
  void clear_vcu_ems_engoperationstatus();
  static const int kVcuEmsEngoperationstatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType vcu_ems_engoperationstatus() const;
  void set_vcu_ems_engoperationstatus(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_mcu_asd_reqType vcu_mcu_asd_req = 6;
  bool has_vcu_mcu_asd_req() const;
  void clear_vcu_mcu_asd_req();
  static const int kVcuMcuAsdReqFieldNumber = 6;
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType vcu_mcu_asd_req() const;
  void set_vcu_mcu_asd_req(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType value);

  // optional double vcu_maxdischgpwr_alw = 5;
  bool has_vcu_maxdischgpwr_alw() const;
  void clear_vcu_maxdischgpwr_alw();
  static const int kVcuMaxdischgpwrAlwFieldNumber = 5;
  double vcu_maxdischgpwr_alw() const;
  void set_vcu_maxdischgpwr_alw(double value);

  // optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_mcu_motor1_ctrmode_reqType vcu_mcu_motor1_ctrmode_req = 7;
  bool has_vcu_mcu_motor1_ctrmode_req() const;
  void clear_vcu_mcu_motor1_ctrmode_req();
  static const int kVcuMcuMotor1CtrmodeReqFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType vcu_mcu_motor1_ctrmode_req() const;
  void set_vcu_mcu_motor1_ctrmode_req(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_control_0x185_185)
 private:
  void set_has_checksum_0x185();
  void clear_has_checksum_0x185();
  void set_has_rolling_counter_0x185();
  void clear_has_rolling_counter_0x185();
  void set_has_vcu_ems_engoperationstatus();
  void clear_has_vcu_ems_engoperationstatus();
  void set_has_vcu_maxchgpwr_alw();
  void clear_has_vcu_maxchgpwr_alw();
  void set_has_vcu_maxdischgpwr_alw();
  void clear_has_vcu_maxdischgpwr_alw();
  void set_has_vcu_mcu_asd_req();
  void clear_has_vcu_mcu_asd_req();
  void set_has_vcu_mcu_motor1_ctrmode_req();
  void clear_has_vcu_mcu_motor1_ctrmode_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x185_;
  ::google::protobuf::int32 rolling_counter_0x185_;
  double vcu_maxchgpwr_alw_;
  int vcu_ems_engoperationstatus_;
  int vcu_mcu_asd_req_;
  double vcu_maxdischgpwr_alw_;
  int vcu_mcu_motor1_ctrmode_req_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ibc_status2_0x124_124 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ibc_status2_0x124_124) */ {
 public:
  Ibc_status2_0x124_124();
  virtual ~Ibc_status2_0x124_124();

  Ibc_status2_0x124_124(const Ibc_status2_0x124_124& from);

  inline Ibc_status2_0x124_124& operator=(const Ibc_status2_0x124_124& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ibc_status2_0x124_124& default_instance();

  static inline const Ibc_status2_0x124_124* internal_default_instance() {
    return reinterpret_cast<const Ibc_status2_0x124_124*>(
               &_Ibc_status2_0x124_124_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Ibc_status2_0x124_124* other);

  // implements Message ----------------------------------------------

  inline Ibc_status2_0x124_124* New() const PROTOBUF_FINAL { return New(NULL); }

  Ibc_status2_0x124_124* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ibc_status2_0x124_124& from);
  void MergeFrom(const Ibc_status2_0x124_124& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ibc_status2_0x124_124* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ibc_status2_0x124_124_Ibc_decelerationvaildType Ibc_decelerationvaildType;
  static const Ibc_decelerationvaildType IBC_DECELERATIONVAILD_INVAILD =
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_INVAILD;
  static const Ibc_decelerationvaildType IBC_DECELERATIONVAILD_VALID =
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_IBC_DECELERATIONVAILD_VALID;
  static inline bool Ibc_decelerationvaildType_IsValid(int value) {
    return Ibc_status2_0x124_124_Ibc_decelerationvaildType_IsValid(value);
  }
  static const Ibc_decelerationvaildType Ibc_decelerationvaildType_MIN =
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_MIN;
  static const Ibc_decelerationvaildType Ibc_decelerationvaildType_MAX =
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_MAX;
  static const int Ibc_decelerationvaildType_ARRAYSIZE =
    Ibc_status2_0x124_124_Ibc_decelerationvaildType_Ibc_decelerationvaildType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_decelerationvaildType_descriptor() {
    return Ibc_status2_0x124_124_Ibc_decelerationvaildType_descriptor();
  }
  static inline const ::std::string& Ibc_decelerationvaildType_Name(Ibc_decelerationvaildType value) {
    return Ibc_status2_0x124_124_Ibc_decelerationvaildType_Name(value);
  }
  static inline bool Ibc_decelerationvaildType_Parse(const ::std::string& name,
      Ibc_decelerationvaildType* value) {
    return Ibc_status2_0x124_124_Ibc_decelerationvaildType_Parse(name, value);
  }

  typedef Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType Ibc_brktmcpositionvaildType;
  static const Ibc_brktmcpositionvaildType IBC_BRKTMCPOSITIONVAILD_INVAILD =
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_INVAILD;
  static const Ibc_brktmcpositionvaildType IBC_BRKTMCPOSITIONVAILD_VALID =
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IBC_BRKTMCPOSITIONVAILD_VALID;
  static inline bool Ibc_brktmcpositionvaildType_IsValid(int value) {
    return Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IsValid(value);
  }
  static const Ibc_brktmcpositionvaildType Ibc_brktmcpositionvaildType_MIN =
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_MIN;
  static const Ibc_brktmcpositionvaildType Ibc_brktmcpositionvaildType_MAX =
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_MAX;
  static const int Ibc_brktmcpositionvaildType_ARRAYSIZE =
    Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Ibc_brktmcpositionvaildType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ibc_brktmcpositionvaildType_descriptor() {
    return Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_descriptor();
  }
  static inline const ::std::string& Ibc_brktmcpositionvaildType_Name(Ibc_brktmcpositionvaildType value) {
    return Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Name(value);
  }
  static inline bool Ibc_brktmcpositionvaildType_Parse(const ::std::string& name,
      Ibc_brktmcpositionvaildType* value) {
    return Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 checksum_0x124 = 1;
  bool has_checksum_0x124() const;
  void clear_checksum_0x124();
  static const int kChecksum0X124FieldNumber = 1;
  ::google::protobuf::int32 checksum_0x124() const;
  void set_checksum_0x124(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x124 = 2;
  bool has_rolling_counter_0x124() const;
  void clear_rolling_counter_0x124();
  static const int kRollingCounter0X124FieldNumber = 2;
  ::google::protobuf::int32 rolling_counter_0x124() const;
  void set_rolling_counter_0x124(::google::protobuf::int32 value);

  // optional double ibc_deceleration = 4;
  bool has_ibc_deceleration() const;
  void clear_ibc_deceleration();
  static const int kIbcDecelerationFieldNumber = 4;
  double ibc_deceleration() const;
  void set_ibc_deceleration(double value);

  // optional .jmc_auto.canbus.Ibc_status2_0x124_124.Ibc_decelerationvaildType ibc_decelerationvaild = 3;
  bool has_ibc_decelerationvaild() const;
  void clear_ibc_decelerationvaild();
  static const int kIbcDecelerationvaildFieldNumber = 3;
  ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType ibc_decelerationvaild() const;
  void set_ibc_decelerationvaild(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType value);

  // optional .jmc_auto.canbus.Ibc_status2_0x124_124.Ibc_brktmcpositionvaildType ibc_brktmcpositionvaild = 5;
  bool has_ibc_brktmcpositionvaild() const;
  void clear_ibc_brktmcpositionvaild();
  static const int kIbcBrktmcpositionvaildFieldNumber = 5;
  ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType ibc_brktmcpositionvaild() const;
  void set_ibc_brktmcpositionvaild(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType value);

  // optional double ibc_brktmcposition = 6;
  bool has_ibc_brktmcposition() const;
  void clear_ibc_brktmcposition();
  static const int kIbcBrktmcpositionFieldNumber = 6;
  double ibc_brktmcposition() const;
  void set_ibc_brktmcposition(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ibc_status2_0x124_124)
 private:
  void set_has_checksum_0x124();
  void clear_has_checksum_0x124();
  void set_has_rolling_counter_0x124();
  void clear_has_rolling_counter_0x124();
  void set_has_ibc_decelerationvaild();
  void clear_has_ibc_decelerationvaild();
  void set_has_ibc_deceleration();
  void clear_has_ibc_deceleration();
  void set_has_ibc_brktmcpositionvaild();
  void clear_has_ibc_brktmcpositionvaild();
  void set_has_ibc_brktmcposition();
  void clear_has_ibc_brktmcposition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 checksum_0x124_;
  ::google::protobuf::int32 rolling_counter_0x124_;
  double ibc_deceleration_;
  int ibc_decelerationvaild_;
  int ibc_brktmcpositionvaild_;
  double ibc_brktmcposition_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_vcu_hmi_0x358_358 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_vcu_hmi_0x358_358) */ {
 public:
  Gw_vcu_hmi_0x358_358();
  virtual ~Gw_vcu_hmi_0x358_358();

  Gw_vcu_hmi_0x358_358(const Gw_vcu_hmi_0x358_358& from);

  inline Gw_vcu_hmi_0x358_358& operator=(const Gw_vcu_hmi_0x358_358& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_vcu_hmi_0x358_358& default_instance();

  static inline const Gw_vcu_hmi_0x358_358* internal_default_instance() {
    return reinterpret_cast<const Gw_vcu_hmi_0x358_358*>(
               &_Gw_vcu_hmi_0x358_358_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Gw_vcu_hmi_0x358_358* other);

  // implements Message ----------------------------------------------

  inline Gw_vcu_hmi_0x358_358* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_vcu_hmi_0x358_358* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_vcu_hmi_0x358_358& from);
  void MergeFrom(const Gw_vcu_hmi_0x358_358& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_vcu_hmi_0x358_358* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_vcu_hmi_0x358_358_VehiclehvstatusType VehiclehvstatusType;
  static const VehiclehvstatusType VEHICLEHVSTATUS_NOT_READY =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_NOT_READY;
  static const VehiclehvstatusType VEHICLEHVSTATUS_HV_ON =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_HV_ON;
  static const VehiclehvstatusType VEHICLEHVSTATUS_READYTODRIVE =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_READYTODRIVE;
  static const VehiclehvstatusType VEHICLEHVSTATUS_RESERVED =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VEHICLEHVSTATUS_RESERVED;
  static inline bool VehiclehvstatusType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_VehiclehvstatusType_IsValid(value);
  }
  static const VehiclehvstatusType VehiclehvstatusType_MIN =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_MIN;
  static const VehiclehvstatusType VehiclehvstatusType_MAX =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_MAX;
  static const int VehiclehvstatusType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_VehiclehvstatusType_VehiclehvstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehiclehvstatusType_descriptor() {
    return Gw_vcu_hmi_0x358_358_VehiclehvstatusType_descriptor();
  }
  static inline const ::std::string& VehiclehvstatusType_Name(VehiclehvstatusType value) {
    return Gw_vcu_hmi_0x358_358_VehiclehvstatusType_Name(value);
  }
  static inline bool VehiclehvstatusType_Parse(const ::std::string& name,
      VehiclehvstatusType* value) {
    return Gw_vcu_hmi_0x358_358_VehiclehvstatusType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType PackheatcircuiterrorType;
  static const PackheatcircuiterrorType PACKHEATCIRCUITERROR_NORMAL =
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_NORMAL;
  static const PackheatcircuiterrorType PACKHEATCIRCUITERROR_ERROR =
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PACKHEATCIRCUITERROR_ERROR;
  static inline bool PackheatcircuiterrorType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_IsValid(value);
  }
  static const PackheatcircuiterrorType PackheatcircuiterrorType_MIN =
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_MIN;
  static const PackheatcircuiterrorType PackheatcircuiterrorType_MAX =
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_MAX;
  static const int PackheatcircuiterrorType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_PackheatcircuiterrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PackheatcircuiterrorType_descriptor() {
    return Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_descriptor();
  }
  static inline const ::std::string& PackheatcircuiterrorType_Name(PackheatcircuiterrorType value) {
    return Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_Name(value);
  }
  static inline bool PackheatcircuiterrorType_Parse(const ::std::string& name,
      PackheatcircuiterrorType* value) {
    return Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_PackheatstatusType PackheatstatusType;
  static const PackheatstatusType PACKHEATSTATUS_INACTIVE =
    Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_INACTIVE;
  static const PackheatstatusType PACKHEATSTATUS_ACTIVE =
    Gw_vcu_hmi_0x358_358_PackheatstatusType_PACKHEATSTATUS_ACTIVE;
  static inline bool PackheatstatusType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_PackheatstatusType_IsValid(value);
  }
  static const PackheatstatusType PackheatstatusType_MIN =
    Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_MIN;
  static const PackheatstatusType PackheatstatusType_MAX =
    Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_MAX;
  static const int PackheatstatusType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_PackheatstatusType_PackheatstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PackheatstatusType_descriptor() {
    return Gw_vcu_hmi_0x358_358_PackheatstatusType_descriptor();
  }
  static inline const ::std::string& PackheatstatusType_Name(PackheatstatusType value) {
    return Gw_vcu_hmi_0x358_358_PackheatstatusType_Name(value);
  }
  static inline bool PackheatstatusType_Parse(const ::std::string& name,
      PackheatstatusType* value) {
    return Gw_vcu_hmi_0x358_358_PackheatstatusType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType PackcoolingcircuiterrorType;
  static const PackcoolingcircuiterrorType PACKCOOLINGCIRCUITERROR_NORMAL =
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_NORMAL;
  static const PackcoolingcircuiterrorType PACKCOOLINGCIRCUITERROR_ERROR =
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PACKCOOLINGCIRCUITERROR_ERROR;
  static inline bool PackcoolingcircuiterrorType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_IsValid(value);
  }
  static const PackcoolingcircuiterrorType PackcoolingcircuiterrorType_MIN =
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_MIN;
  static const PackcoolingcircuiterrorType PackcoolingcircuiterrorType_MAX =
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_MAX;
  static const int PackcoolingcircuiterrorType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_PackcoolingcircuiterrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PackcoolingcircuiterrorType_descriptor() {
    return Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_descriptor();
  }
  static inline const ::std::string& PackcoolingcircuiterrorType_Name(PackcoolingcircuiterrorType value) {
    return Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_Name(value);
  }
  static inline bool PackcoolingcircuiterrorType_Parse(const ::std::string& name,
      PackcoolingcircuiterrorType* value) {
    return Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType MotorcoolingcircuiterrorType;
  static const MotorcoolingcircuiterrorType MOTORCOOLINGCIRCUITERROR_NORMAL =
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_NORMAL;
  static const MotorcoolingcircuiterrorType MOTORCOOLINGCIRCUITERROR_ERROR =
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MOTORCOOLINGCIRCUITERROR_ERROR;
  static inline bool MotorcoolingcircuiterrorType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_IsValid(value);
  }
  static const MotorcoolingcircuiterrorType MotorcoolingcircuiterrorType_MIN =
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_MIN;
  static const MotorcoolingcircuiterrorType MotorcoolingcircuiterrorType_MAX =
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_MAX;
  static const int MotorcoolingcircuiterrorType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_MotorcoolingcircuiterrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorcoolingcircuiterrorType_descriptor() {
    return Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_descriptor();
  }
  static inline const ::std::string& MotorcoolingcircuiterrorType_Name(MotorcoolingcircuiterrorType value) {
    return Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_Name(value);
  }
  static inline bool MotorcoolingcircuiterrorType_Parse(const ::std::string& name,
      MotorcoolingcircuiterrorType* value) {
    return Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType Vcu_batteryvoltageerrorType;
  static const Vcu_batteryvoltageerrorType VCU_BATTERYVOLTAGEERROR_NO_WARNING =
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_NO_WARNING;
  static const Vcu_batteryvoltageerrorType VCU_BATTERYVOLTAGEERROR_WARNING =
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_VCU_BATTERYVOLTAGEERROR_WARNING;
  static inline bool Vcu_batteryvoltageerrorType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_IsValid(value);
  }
  static const Vcu_batteryvoltageerrorType Vcu_batteryvoltageerrorType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_MIN;
  static const Vcu_batteryvoltageerrorType Vcu_batteryvoltageerrorType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_MAX;
  static const int Vcu_batteryvoltageerrorType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Vcu_batteryvoltageerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_batteryvoltageerrorType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_descriptor();
  }
  static inline const ::std::string& Vcu_batteryvoltageerrorType_Name(Vcu_batteryvoltageerrorType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Name(value);
  }
  static inline bool Vcu_batteryvoltageerrorType_Parse(const ::std::string& name,
      Vcu_batteryvoltageerrorType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType Vcu_cruisecontrolstatusType;
  static const Vcu_cruisecontrolstatusType VCU_CRUISECONTROLSTATUS_CRUISECONTROLOOFF =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_CRUISECONTROLOOFF;
  static const Vcu_cruisecontrolstatusType VCU_CRUISECONTROLSTATUS_ACTIVE =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_ACTIVE;
  static const Vcu_cruisecontrolstatusType VCU_CRUISECONTROLSTATUS_STANDBY =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_STANDBY;
  static const Vcu_cruisecontrolstatusType VCU_CRUISECONTROLSTATUS_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_VCU_CRUISECONTROLSTATUS_ERROR;
  static inline bool Vcu_cruisecontrolstatusType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_IsValid(value);
  }
  static const Vcu_cruisecontrolstatusType Vcu_cruisecontrolstatusType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_MIN;
  static const Vcu_cruisecontrolstatusType Vcu_cruisecontrolstatusType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_MAX;
  static const int Vcu_cruisecontrolstatusType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Vcu_cruisecontrolstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_cruisecontrolstatusType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_descriptor();
  }
  static inline const ::std::string& Vcu_cruisecontrolstatusType_Name(Vcu_cruisecontrolstatusType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Name(value);
  }
  static inline bool Vcu_cruisecontrolstatusType_Parse(const ::std::string& name,
      Vcu_cruisecontrolstatusType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType Vcu_driverstatus_stsType;
  static const Vcu_driverstatus_stsType VCU_DRIVERSTATUS_STS_NO_DRIVE =
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_NO_DRIVE;
  static const Vcu_driverstatus_stsType VCU_DRIVERSTATUS_STS_DRIVE_MODE =
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_VCU_DRIVERSTATUS_STS_DRIVE_MODE;
  static inline bool Vcu_driverstatus_stsType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_IsValid(value);
  }
  static const Vcu_driverstatus_stsType Vcu_driverstatus_stsType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_MIN;
  static const Vcu_driverstatus_stsType Vcu_driverstatus_stsType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_MAX;
  static const int Vcu_driverstatus_stsType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Vcu_driverstatus_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_driverstatus_stsType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_descriptor();
  }
  static inline const ::std::string& Vcu_driverstatus_stsType_Name(Vcu_driverstatus_stsType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Name(value);
  }
  static inline bool Vcu_driverstatus_stsType_Parse(const ::std::string& name,
      Vcu_driverstatus_stsType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType Vcu_drivemode_stsType;
  static const Vcu_drivemode_stsType VCU_DRIVEMODE_STS_INVALID =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_INVALID;
  static const Vcu_drivemode_stsType VCU_DRIVEMODE_STS_EV =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_EV;
  static const Vcu_drivemode_stsType VCU_DRIVEMODE_STS_HEV =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_HEV;
  static const Vcu_drivemode_stsType VCU_DRIVEMODE_STS_FUEL =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_VCU_DRIVEMODE_STS_FUEL;
  static inline bool Vcu_drivemode_stsType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_IsValid(value);
  }
  static const Vcu_drivemode_stsType Vcu_drivemode_stsType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_MIN;
  static const Vcu_drivemode_stsType Vcu_drivemode_stsType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_MAX;
  static const int Vcu_drivemode_stsType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Vcu_drivemode_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_drivemode_stsType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_descriptor();
  }
  static inline const ::std::string& Vcu_drivemode_stsType_Name(Vcu_drivemode_stsType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Name(value);
  }
  static inline bool Vcu_drivemode_stsType_Parse(const ::std::string& name,
      Vcu_drivemode_stsType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType Vcu_vehchg_stsType;
  static const Vcu_vehchg_stsType VCU_VEHCHG_STS_INVALID =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_INVALID;
  static const Vcu_vehchg_stsType VCU_VEHCHG_STS_STOPCHARGE =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_STOPCHARGE;
  static const Vcu_vehchg_stsType VCU_VEHCHG_STS_DRIVECHARGE =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_DRIVECHARGE;
  static const Vcu_vehchg_stsType VCU_VEHCHG_STS_NOCHARGE =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_NOCHARGE;
  static const Vcu_vehchg_stsType VCU_VEHCHG_STS_CHARGECOMPLETED =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_VCU_VEHCHG_STS_CHARGECOMPLETED;
  static inline bool Vcu_vehchg_stsType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_IsValid(value);
  }
  static const Vcu_vehchg_stsType Vcu_vehchg_stsType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_MIN;
  static const Vcu_vehchg_stsType Vcu_vehchg_stsType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_MAX;
  static const int Vcu_vehchg_stsType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Vcu_vehchg_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_vehchg_stsType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_descriptor();
  }
  static inline const ::std::string& Vcu_vehchg_stsType_Name(Vcu_vehchg_stsType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Name(value);
  }
  static inline bool Vcu_vehchg_stsType_Parse(const ::std::string& name,
      Vcu_vehchg_stsType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType Vcu_tbox_veh_stsType;
  static const Vcu_tbox_veh_stsType VCU_TBOX_VEH_STS_INVALID =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_INVALID;
  static const Vcu_tbox_veh_stsType VCU_TBOX_VEH_STS_START =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_START;
  static const Vcu_tbox_veh_stsType VCU_TBOX_VEH_STS_OFF =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_OFF;
  static const Vcu_tbox_veh_stsType VCU_TBOX_VEH_STS_OTHER =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_VCU_TBOX_VEH_STS_OTHER;
  static inline bool Vcu_tbox_veh_stsType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_IsValid(value);
  }
  static const Vcu_tbox_veh_stsType Vcu_tbox_veh_stsType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_MIN;
  static const Vcu_tbox_veh_stsType Vcu_tbox_veh_stsType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_MAX;
  static const int Vcu_tbox_veh_stsType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Vcu_tbox_veh_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_tbox_veh_stsType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_descriptor();
  }
  static inline const ::std::string& Vcu_tbox_veh_stsType_Name(Vcu_tbox_veh_stsType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Name(value);
  }
  static inline bool Vcu_tbox_veh_stsType_Parse(const ::std::string& name,
      Vcu_tbox_veh_stsType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType Vcu_icm_energyrecoverymodeType;
  static const Vcu_icm_energyrecoverymodeType VCU_ICM_ENERGYRECOVERYMODE_NO =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_NO;
  static const Vcu_icm_energyrecoverymodeType VCU_ICM_ENERGYRECOVERYMODE_LEVEL1 =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL1;
  static const Vcu_icm_energyrecoverymodeType VCU_ICM_ENERGYRECOVERYMODE_LEVEL2 =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL2;
  static const Vcu_icm_energyrecoverymodeType VCU_ICM_ENERGYRECOVERYMODE_LEVEL3 =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_VCU_ICM_ENERGYRECOVERYMODE_LEVEL3;
  static inline bool Vcu_icm_energyrecoverymodeType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_IsValid(value);
  }
  static const Vcu_icm_energyrecoverymodeType Vcu_icm_energyrecoverymodeType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_MIN;
  static const Vcu_icm_energyrecoverymodeType Vcu_icm_energyrecoverymodeType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_MAX;
  static const int Vcu_icm_energyrecoverymodeType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Vcu_icm_energyrecoverymodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_energyrecoverymodeType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_energyrecoverymodeType_Name(Vcu_icm_energyrecoverymodeType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Name(value);
  }
  static inline bool Vcu_icm_energyrecoverymodeType_Parse(const ::std::string& name,
      Vcu_icm_energyrecoverymodeType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType Vcu_icm_vehhvil_errType;
  static const Vcu_icm_vehhvil_errType VCU_ICM_VEHHVIL_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_NORMAL;
  static const Vcu_icm_vehhvil_errType VCU_ICM_VEHHVIL_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_VCU_ICM_VEHHVIL_ERR_ERROR;
  static inline bool Vcu_icm_vehhvil_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_IsValid(value);
  }
  static const Vcu_icm_vehhvil_errType Vcu_icm_vehhvil_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_MIN;
  static const Vcu_icm_vehhvil_errType Vcu_icm_vehhvil_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_MAX;
  static const int Vcu_icm_vehhvil_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Vcu_icm_vehhvil_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_vehhvil_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_vehhvil_errType_Name(Vcu_icm_vehhvil_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Name(value);
  }
  static inline bool Vcu_icm_vehhvil_errType_Parse(const ::std::string& name,
      Vcu_icm_vehhvil_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType Vcu_icm_mot_errType;
  static const Vcu_icm_mot_errType VCU_ICM_MOT_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_NORMAL;
  static const Vcu_icm_mot_errType VCU_ICM_MOT_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_VCU_ICM_MOT_ERR_ERROR;
  static inline bool Vcu_icm_mot_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_IsValid(value);
  }
  static const Vcu_icm_mot_errType Vcu_icm_mot_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_MIN;
  static const Vcu_icm_mot_errType Vcu_icm_mot_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_MAX;
  static const int Vcu_icm_mot_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Vcu_icm_mot_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_mot_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_mot_errType_Name(Vcu_icm_mot_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Name(value);
  }
  static inline bool Vcu_icm_mot_errType_Parse(const ::std::string& name,
      Vcu_icm_mot_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType Vcu_icm_packvoltoff_errType;
  static const Vcu_icm_packvoltoff_errType VCU_ICM_PACKVOLTOFF_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_NORMAL;
  static const Vcu_icm_packvoltoff_errType VCU_ICM_PACKVOLTOFF_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_VCU_ICM_PACKVOLTOFF_ERR_ERROR;
  static inline bool Vcu_icm_packvoltoff_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_IsValid(value);
  }
  static const Vcu_icm_packvoltoff_errType Vcu_icm_packvoltoff_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_MIN;
  static const Vcu_icm_packvoltoff_errType Vcu_icm_packvoltoff_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_MAX;
  static const int Vcu_icm_packvoltoff_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Vcu_icm_packvoltoff_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_packvoltoff_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_packvoltoff_errType_Name(Vcu_icm_packvoltoff_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Name(value);
  }
  static inline bool Vcu_icm_packvoltoff_errType_Parse(const ::std::string& name,
      Vcu_icm_packvoltoff_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType Vcu_icm_chggearlvType;
  static const Vcu_icm_chggearlvType VCU_ICM_CHGGEARLV_NO_WARNING =
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_NO_WARNING;
  static const Vcu_icm_chggearlvType VCU_ICM_CHGGEARLV_PLEASE_SET_GEARPOSITION_TO_PARK =
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_VCU_ICM_CHGGEARLV_PLEASE_SET_GEARPOSITION_TO_PARK;
  static inline bool Vcu_icm_chggearlvType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_IsValid(value);
  }
  static const Vcu_icm_chggearlvType Vcu_icm_chggearlvType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_MIN;
  static const Vcu_icm_chggearlvType Vcu_icm_chggearlvType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_MAX;
  static const int Vcu_icm_chggearlvType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Vcu_icm_chggearlvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_chggearlvType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_chggearlvType_Name(Vcu_icm_chggearlvType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Name(value);
  }
  static inline bool Vcu_icm_chggearlvType_Parse(const ::std::string& name,
      Vcu_icm_chggearlvType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType Vcu_icm_packsys_errType;
  static const Vcu_icm_packsys_errType VCU_ICM_PACKSYS_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_NORMAL;
  static const Vcu_icm_packsys_errType VCU_ICM_PACKSYS_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_VCU_ICM_PACKSYS_ERR_ERROR;
  static inline bool Vcu_icm_packsys_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_IsValid(value);
  }
  static const Vcu_icm_packsys_errType Vcu_icm_packsys_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_MIN;
  static const Vcu_icm_packsys_errType Vcu_icm_packsys_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_MAX;
  static const int Vcu_icm_packsys_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Vcu_icm_packsys_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_packsys_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_packsys_errType_Name(Vcu_icm_packsys_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Name(value);
  }
  static inline bool Vcu_icm_packsys_errType_Parse(const ::std::string& name,
      Vcu_icm_packsys_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType Vcu_icm_drvsys_errType;
  static const Vcu_icm_drvsys_errType VCU_ICM_DRVSYS_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_NORMAL;
  static const Vcu_icm_drvsys_errType VCU_ICM_DRVSYS_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_VCU_ICM_DRVSYS_ERR_ERROR;
  static inline bool Vcu_icm_drvsys_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_IsValid(value);
  }
  static const Vcu_icm_drvsys_errType Vcu_icm_drvsys_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_MIN;
  static const Vcu_icm_drvsys_errType Vcu_icm_drvsys_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_MAX;
  static const int Vcu_icm_drvsys_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Vcu_icm_drvsys_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_drvsys_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_drvsys_errType_Name(Vcu_icm_drvsys_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Name(value);
  }
  static inline bool Vcu_icm_drvsys_errType_Parse(const ::std::string& name,
      Vcu_icm_drvsys_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_Parse(name, value);
  }

  typedef Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType Vcu_icm_veh_errType;
  static const Vcu_icm_veh_errType VCU_ICM_VEH_ERR_NORMAL =
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_NORMAL;
  static const Vcu_icm_veh_errType VCU_ICM_VEH_ERR_ERROR =
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_VCU_ICM_VEH_ERR_ERROR;
  static inline bool Vcu_icm_veh_errType_IsValid(int value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_IsValid(value);
  }
  static const Vcu_icm_veh_errType Vcu_icm_veh_errType_MIN =
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_MIN;
  static const Vcu_icm_veh_errType Vcu_icm_veh_errType_MAX =
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_MAX;
  static const int Vcu_icm_veh_errType_ARRAYSIZE =
    Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Vcu_icm_veh_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_icm_veh_errType_descriptor() {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_descriptor();
  }
  static inline const ::std::string& Vcu_icm_veh_errType_Name(Vcu_icm_veh_errType value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Name(value);
  }
  static inline bool Vcu_icm_veh_errType_Parse(const ::std::string& name,
      Vcu_icm_veh_errType* value) {
    return Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 vcu_checksum_0x358 = 1;
  bool has_vcu_checksum_0x358() const;
  void clear_vcu_checksum_0x358();
  static const int kVcuChecksum0X358FieldNumber = 1;
  ::google::protobuf::int32 vcu_checksum_0x358() const;
  void set_vcu_checksum_0x358(::google::protobuf::int32 value);

  // optional int32 vcu_rollingcounter_0x358 = 2;
  bool has_vcu_rollingcounter_0x358() const;
  void clear_vcu_rollingcounter_0x358();
  static const int kVcuRollingcounter0X358FieldNumber = 2;
  ::google::protobuf::int32 vcu_rollingcounter_0x358() const;
  void set_vcu_rollingcounter_0x358(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.VehiclehvstatusType vehiclehvstatus = 3;
  bool has_vehiclehvstatus() const;
  void clear_vehiclehvstatus();
  static const int kVehiclehvstatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType vehiclehvstatus() const;
  void set_vehiclehvstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackheatcircuiterrorType packheatcircuiterror = 4;
  bool has_packheatcircuiterror() const;
  void clear_packheatcircuiterror();
  static const int kPackheatcircuiterrorFieldNumber = 4;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType packheatcircuiterror() const;
  void set_packheatcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackheatstatusType packheatstatus = 5;
  bool has_packheatstatus() const;
  void clear_packheatstatus();
  static const int kPackheatstatusFieldNumber = 5;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType packheatstatus() const;
  void set_packheatstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackcoolingcircuiterrorType packcoolingcircuiterror = 6;
  bool has_packcoolingcircuiterror() const;
  void clear_packcoolingcircuiterror();
  static const int kPackcoolingcircuiterrorFieldNumber = 6;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType packcoolingcircuiterror() const;
  void set_packcoolingcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.MotorcoolingcircuiterrorType motorcoolingcircuiterror = 7;
  bool has_motorcoolingcircuiterror() const;
  void clear_motorcoolingcircuiterror();
  static const int kMotorcoolingcircuiterrorFieldNumber = 7;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType motorcoolingcircuiterror() const;
  void set_motorcoolingcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_batteryvoltageerrorType vcu_batteryvoltageerror = 8;
  bool has_vcu_batteryvoltageerror() const;
  void clear_vcu_batteryvoltageerror();
  static const int kVcuBatteryvoltageerrorFieldNumber = 8;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType vcu_batteryvoltageerror() const;
  void set_vcu_batteryvoltageerror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType value);

  // optional double vcu_battervoltage = 9;
  bool has_vcu_battervoltage() const;
  void clear_vcu_battervoltage();
  static const int kVcuBattervoltageFieldNumber = 9;
  double vcu_battervoltage() const;
  void set_vcu_battervoltage(double value);

  // optional double vcu_targcruisespeed = 10;
  bool has_vcu_targcruisespeed() const;
  void clear_vcu_targcruisespeed();
  static const int kVcuTargcruisespeedFieldNumber = 10;
  double vcu_targcruisespeed() const;
  void set_vcu_targcruisespeed(double value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_cruisecontrolstatusType vcu_cruisecontrolstatus = 11;
  bool has_vcu_cruisecontrolstatus() const;
  void clear_vcu_cruisecontrolstatus();
  static const int kVcuCruisecontrolstatusFieldNumber = 11;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType vcu_cruisecontrolstatus() const;
  void set_vcu_cruisecontrolstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_driverstatus_stsType vcu_driverstatus_sts = 12;
  bool has_vcu_driverstatus_sts() const;
  void clear_vcu_driverstatus_sts();
  static const int kVcuDriverstatusStsFieldNumber = 12;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType vcu_driverstatus_sts() const;
  void set_vcu_driverstatus_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_drivemode_stsType vcu_drivemode_sts = 13;
  bool has_vcu_drivemode_sts() const;
  void clear_vcu_drivemode_sts();
  static const int kVcuDrivemodeStsFieldNumber = 13;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType vcu_drivemode_sts() const;
  void set_vcu_drivemode_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_vehchg_stsType vcu_vehchg_sts = 14;
  bool has_vcu_vehchg_sts() const;
  void clear_vcu_vehchg_sts();
  static const int kVcuVehchgStsFieldNumber = 14;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType vcu_vehchg_sts() const;
  void set_vcu_vehchg_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_tbox_veh_stsType vcu_tbox_veh_sts = 15;
  bool has_vcu_tbox_veh_sts() const;
  void clear_vcu_tbox_veh_sts();
  static const int kVcuTboxVehStsFieldNumber = 15;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType vcu_tbox_veh_sts() const;
  void set_vcu_tbox_veh_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_energyrecoverymodeType vcu_icm_energyrecoverymode = 16;
  bool has_vcu_icm_energyrecoverymode() const;
  void clear_vcu_icm_energyrecoverymode();
  static const int kVcuIcmEnergyrecoverymodeFieldNumber = 16;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType vcu_icm_energyrecoverymode() const;
  void set_vcu_icm_energyrecoverymode(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_vehhvil_errType vcu_icm_vehhvil_err = 17;
  bool has_vcu_icm_vehhvil_err() const;
  void clear_vcu_icm_vehhvil_err();
  static const int kVcuIcmVehhvilErrFieldNumber = 17;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType vcu_icm_vehhvil_err() const;
  void set_vcu_icm_vehhvil_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_mot_errType vcu_icm_mot_err = 18;
  bool has_vcu_icm_mot_err() const;
  void clear_vcu_icm_mot_err();
  static const int kVcuIcmMotErrFieldNumber = 18;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType vcu_icm_mot_err() const;
  void set_vcu_icm_mot_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_packvoltoff_errType vcu_icm_packvoltoff_err = 19;
  bool has_vcu_icm_packvoltoff_err() const;
  void clear_vcu_icm_packvoltoff_err();
  static const int kVcuIcmPackvoltoffErrFieldNumber = 19;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType vcu_icm_packvoltoff_err() const;
  void set_vcu_icm_packvoltoff_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_chggearlvType vcu_icm_chggearlv = 20;
  bool has_vcu_icm_chggearlv() const;
  void clear_vcu_icm_chggearlv();
  static const int kVcuIcmChggearlvFieldNumber = 20;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType vcu_icm_chggearlv() const;
  void set_vcu_icm_chggearlv(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_packsys_errType vcu_icm_packsys_err = 21;
  bool has_vcu_icm_packsys_err() const;
  void clear_vcu_icm_packsys_err();
  static const int kVcuIcmPacksysErrFieldNumber = 21;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType vcu_icm_packsys_err() const;
  void set_vcu_icm_packsys_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_drvsys_errType vcu_icm_drvsys_err = 22;
  bool has_vcu_icm_drvsys_err() const;
  void clear_vcu_icm_drvsys_err();
  static const int kVcuIcmDrvsysErrFieldNumber = 22;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType vcu_icm_drvsys_err() const;
  void set_vcu_icm_drvsys_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType value);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_veh_errType vcu_icm_veh_err = 23;
  bool has_vcu_icm_veh_err() const;
  void clear_vcu_icm_veh_err();
  static const int kVcuIcmVehErrFieldNumber = 23;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType vcu_icm_veh_err() const;
  void set_vcu_icm_veh_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_vcu_hmi_0x358_358)
 private:
  void set_has_vcu_checksum_0x358();
  void clear_has_vcu_checksum_0x358();
  void set_has_vcu_rollingcounter_0x358();
  void clear_has_vcu_rollingcounter_0x358();
  void set_has_vehiclehvstatus();
  void clear_has_vehiclehvstatus();
  void set_has_packheatcircuiterror();
  void clear_has_packheatcircuiterror();
  void set_has_packheatstatus();
  void clear_has_packheatstatus();
  void set_has_packcoolingcircuiterror();
  void clear_has_packcoolingcircuiterror();
  void set_has_motorcoolingcircuiterror();
  void clear_has_motorcoolingcircuiterror();
  void set_has_vcu_batteryvoltageerror();
  void clear_has_vcu_batteryvoltageerror();
  void set_has_vcu_battervoltage();
  void clear_has_vcu_battervoltage();
  void set_has_vcu_targcruisespeed();
  void clear_has_vcu_targcruisespeed();
  void set_has_vcu_cruisecontrolstatus();
  void clear_has_vcu_cruisecontrolstatus();
  void set_has_vcu_driverstatus_sts();
  void clear_has_vcu_driverstatus_sts();
  void set_has_vcu_drivemode_sts();
  void clear_has_vcu_drivemode_sts();
  void set_has_vcu_vehchg_sts();
  void clear_has_vcu_vehchg_sts();
  void set_has_vcu_tbox_veh_sts();
  void clear_has_vcu_tbox_veh_sts();
  void set_has_vcu_icm_energyrecoverymode();
  void clear_has_vcu_icm_energyrecoverymode();
  void set_has_vcu_icm_vehhvil_err();
  void clear_has_vcu_icm_vehhvil_err();
  void set_has_vcu_icm_mot_err();
  void clear_has_vcu_icm_mot_err();
  void set_has_vcu_icm_packvoltoff_err();
  void clear_has_vcu_icm_packvoltoff_err();
  void set_has_vcu_icm_chggearlv();
  void clear_has_vcu_icm_chggearlv();
  void set_has_vcu_icm_packsys_err();
  void clear_has_vcu_icm_packsys_err();
  void set_has_vcu_icm_drvsys_err();
  void clear_has_vcu_icm_drvsys_err();
  void set_has_vcu_icm_veh_err();
  void clear_has_vcu_icm_veh_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 vcu_checksum_0x358_;
  ::google::protobuf::int32 vcu_rollingcounter_0x358_;
  int vehiclehvstatus_;
  int packheatcircuiterror_;
  int packheatstatus_;
  int packcoolingcircuiterror_;
  int motorcoolingcircuiterror_;
  int vcu_batteryvoltageerror_;
  double vcu_battervoltage_;
  double vcu_targcruisespeed_;
  int vcu_cruisecontrolstatus_;
  int vcu_driverstatus_sts_;
  int vcu_drivemode_sts_;
  int vcu_vehchg_sts_;
  int vcu_tbox_veh_sts_;
  int vcu_icm_energyrecoverymode_;
  int vcu_icm_vehhvil_err_;
  int vcu_icm_mot_err_;
  int vcu_icm_packvoltoff_err_;
  int vcu_icm_chggearlv_;
  int vcu_icm_packsys_err_;
  int vcu_icm_drvsys_err_;
  int vcu_icm_veh_err_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Teshun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Teshun) */ {
 public:
  Teshun();
  virtual ~Teshun();

  Teshun(const Teshun& from);

  inline Teshun& operator=(const Teshun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Teshun& default_instance();

  static inline const Teshun* internal_default_instance() {
    return reinterpret_cast<const Teshun*>(
               &_Teshun_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Teshun* other);

  // implements Message ----------------------------------------------

  inline Teshun* New() const PROTOBUF_FINAL { return New(NULL); }

  Teshun* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Teshun& from);
  void MergeFrom(const Teshun& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Teshun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Epb_status_0x152_152 epb_status_0x152_152 = 1;
  bool has_epb_status_0x152_152() const;
  void clear_epb_status_0x152_152();
  static const int kEpbStatus0X152152FieldNumber = 1;
  const ::jmc_auto::canbus::Epb_status_0x152_152& epb_status_0x152_152() const;
  ::jmc_auto::canbus::Epb_status_0x152_152* mutable_epb_status_0x152_152();
  ::jmc_auto::canbus::Epb_status_0x152_152* release_epb_status_0x152_152();
  void set_allocated_epb_status_0x152_152(::jmc_auto::canbus::Epb_status_0x152_152* epb_status_0x152_152);

  // optional .jmc_auto.canbus.Gw_abs_0x211_211 gw_abs_0x211_211 = 2;
  bool has_gw_abs_0x211_211() const;
  void clear_gw_abs_0x211_211();
  static const int kGwAbs0X211211FieldNumber = 2;
  const ::jmc_auto::canbus::Gw_abs_0x211_211& gw_abs_0x211_211() const;
  ::jmc_auto::canbus::Gw_abs_0x211_211* mutable_gw_abs_0x211_211();
  ::jmc_auto::canbus::Gw_abs_0x211_211* release_gw_abs_0x211_211();
  void set_allocated_gw_abs_0x211_211(::jmc_auto::canbus::Gw_abs_0x211_211* gw_abs_0x211_211);

  // optional .jmc_auto.canbus.Bcm_door_0x310_310 bcm_door_0x310_310 = 3;
  bool has_bcm_door_0x310_310() const;
  void clear_bcm_door_0x310_310();
  static const int kBcmDoor0X310310FieldNumber = 3;
  const ::jmc_auto::canbus::Bcm_door_0x310_310& bcm_door_0x310_310() const;
  ::jmc_auto::canbus::Bcm_door_0x310_310* mutable_bcm_door_0x310_310();
  ::jmc_auto::canbus::Bcm_door_0x310_310* release_bcm_door_0x310_310();
  void set_allocated_bcm_door_0x310_310(::jmc_auto::canbus::Bcm_door_0x310_310* bcm_door_0x310_310);

  // optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218 gw_vcu_sts_0x218_218 = 4;
  bool has_gw_vcu_sts_0x218_218() const;
  void clear_gw_vcu_sts_0x218_218();
  static const int kGwVcuSts0X218218FieldNumber = 4;
  const ::jmc_auto::canbus::Gw_vcu_sts_0x218_218& gw_vcu_sts_0x218_218() const;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* mutable_gw_vcu_sts_0x218_218();
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* release_gw_vcu_sts_0x218_218();
  void set_allocated_gw_vcu_sts_0x218_218(::jmc_auto::canbus::Gw_vcu_sts_0x218_218* gw_vcu_sts_0x218_218);

  // optional .jmc_auto.canbus.Adu_controldrive_0x120_120 adu_controldrive_0x120_120 = 5;
  bool has_adu_controldrive_0x120_120() const;
  void clear_adu_controldrive_0x120_120();
  static const int kAduControldrive0X120120FieldNumber = 5;
  const ::jmc_auto::canbus::Adu_controldrive_0x120_120& adu_controldrive_0x120_120() const;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120* mutable_adu_controldrive_0x120_120();
  ::jmc_auto::canbus::Adu_controldrive_0x120_120* release_adu_controldrive_0x120_120();
  void set_allocated_adu_controldrive_0x120_120(::jmc_auto::canbus::Adu_controldrive_0x120_120* adu_controldrive_0x120_120);

  // optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131 gw_vcu_control2_0x131_131 = 6;
  bool has_gw_vcu_control2_0x131_131() const;
  void clear_gw_vcu_control2_0x131_131();
  static const int kGwVcuControl20X131131FieldNumber = 6;
  const ::jmc_auto::canbus::Gw_vcu_control2_0x131_131& gw_vcu_control2_0x131_131() const;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* mutable_gw_vcu_control2_0x131_131();
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* release_gw_vcu_control2_0x131_131();
  void set_allocated_gw_vcu_control2_0x131_131(::jmc_auto::canbus::Gw_vcu_control2_0x131_131* gw_vcu_control2_0x131_131);

  // optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8 gw_scu_shiftersts_0xc8_c8 = 7;
  bool has_gw_scu_shiftersts_0xc8_c8() const;
  void clear_gw_scu_shiftersts_0xc8_c8();
  static const int kGwScuShiftersts0Xc8C8FieldNumber = 7;
  const ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8& gw_scu_shiftersts_0xc8_c8() const;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* mutable_gw_scu_shiftersts_0xc8_c8();
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* release_gw_scu_shiftersts_0xc8_c8();
  void set_allocated_gw_scu_shiftersts_0xc8_c8(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* gw_scu_shiftersts_0xc8_c8);

  // optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a gw_vcu_drivests_0x10a_10a = 8;
  bool has_gw_vcu_drivests_0x10a_10a() const;
  void clear_gw_vcu_drivests_0x10a_10a();
  static const int kGwVcuDrivests0X10A10AFieldNumber = 8;
  const ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a& gw_vcu_drivests_0x10a_10a() const;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* mutable_gw_vcu_drivests_0x10a_10a();
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* release_gw_vcu_drivests_0x10a_10a();
  void set_allocated_gw_vcu_drivests_0x10a_10a(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* gw_vcu_drivests_0x10a_10a);

  // optional .jmc_auto.canbus.Adu_controlbrake_0x110_110 adu_controlbrake_0x110_110 = 9;
  bool has_adu_controlbrake_0x110_110() const;
  void clear_adu_controlbrake_0x110_110();
  static const int kAduControlbrake0X110110FieldNumber = 9;
  const ::jmc_auto::canbus::Adu_controlbrake_0x110_110& adu_controlbrake_0x110_110() const;
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110* mutable_adu_controlbrake_0x110_110();
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110* release_adu_controlbrake_0x110_110();
  void set_allocated_adu_controlbrake_0x110_110(::jmc_auto::canbus::Adu_controlbrake_0x110_110* adu_controlbrake_0x110_110);

  // optional .jmc_auto.canbus.Eps2_status_0x112_112 eps2_status_0x112_112 = 10;
  bool has_eps2_status_0x112_112() const;
  void clear_eps2_status_0x112_112();
  static const int kEps2Status0X112112FieldNumber = 10;
  const ::jmc_auto::canbus::Eps2_status_0x112_112& eps2_status_0x112_112() const;
  ::jmc_auto::canbus::Eps2_status_0x112_112* mutable_eps2_status_0x112_112();
  ::jmc_auto::canbus::Eps2_status_0x112_112* release_eps2_status_0x112_112();
  void set_allocated_eps2_status_0x112_112(::jmc_auto::canbus::Eps2_status_0x112_112* eps2_status_0x112_112);

  // optional .jmc_auto.canbus.Gw_mcu_power_0x226_226 gw_mcu_power_0x226_226 = 11;
  bool has_gw_mcu_power_0x226_226() const;
  void clear_gw_mcu_power_0x226_226();
  static const int kGwMcuPower0X226226FieldNumber = 11;
  const ::jmc_auto::canbus::Gw_mcu_power_0x226_226& gw_mcu_power_0x226_226() const;
  ::jmc_auto::canbus::Gw_mcu_power_0x226_226* mutable_gw_mcu_power_0x226_226();
  ::jmc_auto::canbus::Gw_mcu_power_0x226_226* release_gw_mcu_power_0x226_226();
  void set_allocated_gw_mcu_power_0x226_226(::jmc_auto::canbus::Gw_mcu_power_0x226_226* gw_mcu_power_0x226_226);

  // optional .jmc_auto.canbus.Adu_controleps2_0x100_100 adu_controleps2_0x100_100 = 12;
  bool has_adu_controleps2_0x100_100() const;
  void clear_adu_controleps2_0x100_100();
  static const int kAduControleps20X100100FieldNumber = 12;
  const ::jmc_auto::canbus::Adu_controleps2_0x100_100& adu_controleps2_0x100_100() const;
  ::jmc_auto::canbus::Adu_controleps2_0x100_100* mutable_adu_controleps2_0x100_100();
  ::jmc_auto::canbus::Adu_controleps2_0x100_100* release_adu_controleps2_0x100_100();
  void set_allocated_adu_controleps2_0x100_100(::jmc_auto::canbus::Adu_controleps2_0x100_100* adu_controleps2_0x100_100);

  // optional .jmc_auto.canbus.Gw_mcu_output_0x225_225 gw_mcu_output_0x225_225 = 13;
  bool has_gw_mcu_output_0x225_225() const;
  void clear_gw_mcu_output_0x225_225();
  static const int kGwMcuOutput0X225225FieldNumber = 13;
  const ::jmc_auto::canbus::Gw_mcu_output_0x225_225& gw_mcu_output_0x225_225() const;
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225* mutable_gw_mcu_output_0x225_225();
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225* release_gw_mcu_output_0x225_225();
  void set_allocated_gw_mcu_output_0x225_225(::jmc_auto::canbus::Gw_mcu_output_0x225_225* gw_mcu_output_0x225_225);

  // optional .jmc_auto.canbus.Gw_abs_sts_0x221_221 gw_abs_sts_0x221_221 = 14;
  bool has_gw_abs_sts_0x221_221() const;
  void clear_gw_abs_sts_0x221_221();
  static const int kGwAbsSts0X221221FieldNumber = 14;
  const ::jmc_auto::canbus::Gw_abs_sts_0x221_221& gw_abs_sts_0x221_221() const;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221* mutable_gw_abs_sts_0x221_221();
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221* release_gw_abs_sts_0x221_221();
  void set_allocated_gw_abs_sts_0x221_221(::jmc_auto::canbus::Gw_abs_sts_0x221_221* gw_abs_sts_0x221_221);

  // optional .jmc_auto.canbus.Ibc_status_0x122_122 ibc_status_0x122_122 = 15;
  bool has_ibc_status_0x122_122() const;
  void clear_ibc_status_0x122_122();
  static const int kIbcStatus0X122122FieldNumber = 15;
  const ::jmc_auto::canbus::Ibc_status_0x122_122& ibc_status_0x122_122() const;
  ::jmc_auto::canbus::Ibc_status_0x122_122* mutable_ibc_status_0x122_122();
  ::jmc_auto::canbus::Ibc_status_0x122_122* release_ibc_status_0x122_122();
  void set_allocated_ibc_status_0x122_122(::jmc_auto::canbus::Ibc_status_0x122_122* ibc_status_0x122_122);

  // optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107 gw_vcu_whltq_0x107_107 = 16;
  bool has_gw_vcu_whltq_0x107_107() const;
  void clear_gw_vcu_whltq_0x107_107();
  static const int kGwVcuWhltq0X107107FieldNumber = 16;
  const ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107& gw_vcu_whltq_0x107_107() const;
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* mutable_gw_vcu_whltq_0x107_107();
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* release_gw_vcu_whltq_0x107_107();
  void set_allocated_gw_vcu_whltq_0x107_107(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* gw_vcu_whltq_0x107_107);

  // optional .jmc_auto.canbus.Bcm_bodysts_0x344_344 bcm_bodysts_0x344_344 = 17;
  bool has_bcm_bodysts_0x344_344() const;
  void clear_bcm_bodysts_0x344_344();
  static const int kBcmBodysts0X344344FieldNumber = 17;
  const ::jmc_auto::canbus::Bcm_bodysts_0x344_344& bcm_bodysts_0x344_344() const;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344* mutable_bcm_bodysts_0x344_344();
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344* release_bcm_bodysts_0x344_344();
  void set_allocated_bcm_bodysts_0x344_344(::jmc_auto::canbus::Bcm_bodysts_0x344_344* bcm_bodysts_0x344_344);

  // optional .jmc_auto.canbus.Gw_bms_display_0x323_323 gw_bms_display_0x323_323 = 18;
  bool has_gw_bms_display_0x323_323() const;
  void clear_gw_bms_display_0x323_323();
  static const int kGwBmsDisplay0X323323FieldNumber = 18;
  const ::jmc_auto::canbus::Gw_bms_display_0x323_323& gw_bms_display_0x323_323() const;
  ::jmc_auto::canbus::Gw_bms_display_0x323_323* mutable_gw_bms_display_0x323_323();
  ::jmc_auto::canbus::Gw_bms_display_0x323_323* release_gw_bms_display_0x323_323();
  void set_allocated_gw_bms_display_0x323_323(::jmc_auto::canbus::Gw_bms_display_0x323_323* gw_bms_display_0x323_323);

  // optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333 adu_bodycontrol_0x333_333 = 19;
  bool has_adu_bodycontrol_0x333_333() const;
  void clear_adu_bodycontrol_0x333_333();
  static const int kAduBodycontrol0X333333FieldNumber = 19;
  const ::jmc_auto::canbus::Adu_bodycontrol_0x333_333& adu_bodycontrol_0x333_333() const;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* mutable_adu_bodycontrol_0x333_333();
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* release_adu_bodycontrol_0x333_333();
  void set_allocated_adu_bodycontrol_0x333_333(::jmc_auto::canbus::Adu_bodycontrol_0x333_333* adu_bodycontrol_0x333_333);

  // optional .jmc_auto.canbus.Gw_bms_sts_0x181_181 gw_bms_sts_0x181_181 = 20;
  bool has_gw_bms_sts_0x181_181() const;
  void clear_gw_bms_sts_0x181_181();
  static const int kGwBmsSts0X181181FieldNumber = 20;
  const ::jmc_auto::canbus::Gw_bms_sts_0x181_181& gw_bms_sts_0x181_181() const;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181* mutable_gw_bms_sts_0x181_181();
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181* release_gw_bms_sts_0x181_181();
  void set_allocated_gw_bms_sts_0x181_181(::jmc_auto::canbus::Gw_bms_sts_0x181_181* gw_bms_sts_0x181_181);

  // optional .jmc_auto.canbus.Gw_vcu_control_0x185_185 gw_vcu_control_0x185_185 = 21;
  bool has_gw_vcu_control_0x185_185() const;
  void clear_gw_vcu_control_0x185_185();
  static const int kGwVcuControl0X185185FieldNumber = 21;
  const ::jmc_auto::canbus::Gw_vcu_control_0x185_185& gw_vcu_control_0x185_185() const;
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185* mutable_gw_vcu_control_0x185_185();
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185* release_gw_vcu_control_0x185_185();
  void set_allocated_gw_vcu_control_0x185_185(::jmc_auto::canbus::Gw_vcu_control_0x185_185* gw_vcu_control_0x185_185);

  // optional .jmc_auto.canbus.Ibc_status2_0x124_124 ibc_status2_0x124_124 = 22;
  bool has_ibc_status2_0x124_124() const;
  void clear_ibc_status2_0x124_124();
  static const int kIbcStatus20X124124FieldNumber = 22;
  const ::jmc_auto::canbus::Ibc_status2_0x124_124& ibc_status2_0x124_124() const;
  ::jmc_auto::canbus::Ibc_status2_0x124_124* mutable_ibc_status2_0x124_124();
  ::jmc_auto::canbus::Ibc_status2_0x124_124* release_ibc_status2_0x124_124();
  void set_allocated_ibc_status2_0x124_124(::jmc_auto::canbus::Ibc_status2_0x124_124* ibc_status2_0x124_124);

  // optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358 gw_vcu_hmi_0x358_358 = 23;
  bool has_gw_vcu_hmi_0x358_358() const;
  void clear_gw_vcu_hmi_0x358_358();
  static const int kGwVcuHmi0X358358FieldNumber = 23;
  const ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358& gw_vcu_hmi_0x358_358() const;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* mutable_gw_vcu_hmi_0x358_358();
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* release_gw_vcu_hmi_0x358_358();
  void set_allocated_gw_vcu_hmi_0x358_358(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* gw_vcu_hmi_0x358_358);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Teshun)
 private:
  void set_has_epb_status_0x152_152();
  void clear_has_epb_status_0x152_152();
  void set_has_gw_abs_0x211_211();
  void clear_has_gw_abs_0x211_211();
  void set_has_bcm_door_0x310_310();
  void clear_has_bcm_door_0x310_310();
  void set_has_gw_vcu_sts_0x218_218();
  void clear_has_gw_vcu_sts_0x218_218();
  void set_has_adu_controldrive_0x120_120();
  void clear_has_adu_controldrive_0x120_120();
  void set_has_gw_vcu_control2_0x131_131();
  void clear_has_gw_vcu_control2_0x131_131();
  void set_has_gw_scu_shiftersts_0xc8_c8();
  void clear_has_gw_scu_shiftersts_0xc8_c8();
  void set_has_gw_vcu_drivests_0x10a_10a();
  void clear_has_gw_vcu_drivests_0x10a_10a();
  void set_has_adu_controlbrake_0x110_110();
  void clear_has_adu_controlbrake_0x110_110();
  void set_has_eps2_status_0x112_112();
  void clear_has_eps2_status_0x112_112();
  void set_has_gw_mcu_power_0x226_226();
  void clear_has_gw_mcu_power_0x226_226();
  void set_has_adu_controleps2_0x100_100();
  void clear_has_adu_controleps2_0x100_100();
  void set_has_gw_mcu_output_0x225_225();
  void clear_has_gw_mcu_output_0x225_225();
  void set_has_gw_abs_sts_0x221_221();
  void clear_has_gw_abs_sts_0x221_221();
  void set_has_ibc_status_0x122_122();
  void clear_has_ibc_status_0x122_122();
  void set_has_gw_vcu_whltq_0x107_107();
  void clear_has_gw_vcu_whltq_0x107_107();
  void set_has_bcm_bodysts_0x344_344();
  void clear_has_bcm_bodysts_0x344_344();
  void set_has_gw_bms_display_0x323_323();
  void clear_has_gw_bms_display_0x323_323();
  void set_has_adu_bodycontrol_0x333_333();
  void clear_has_adu_bodycontrol_0x333_333();
  void set_has_gw_bms_sts_0x181_181();
  void clear_has_gw_bms_sts_0x181_181();
  void set_has_gw_vcu_control_0x185_185();
  void clear_has_gw_vcu_control_0x185_185();
  void set_has_ibc_status2_0x124_124();
  void clear_has_ibc_status2_0x124_124();
  void set_has_gw_vcu_hmi_0x358_358();
  void clear_has_gw_vcu_hmi_0x358_358();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::canbus::Epb_status_0x152_152* epb_status_0x152_152_;
  ::jmc_auto::canbus::Gw_abs_0x211_211* gw_abs_0x211_211_;
  ::jmc_auto::canbus::Bcm_door_0x310_310* bcm_door_0x310_310_;
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* gw_vcu_sts_0x218_218_;
  ::jmc_auto::canbus::Adu_controldrive_0x120_120* adu_controldrive_0x120_120_;
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* gw_vcu_control2_0x131_131_;
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* gw_scu_shiftersts_0xc8_c8_;
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* gw_vcu_drivests_0x10a_10a_;
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110* adu_controlbrake_0x110_110_;
  ::jmc_auto::canbus::Eps2_status_0x112_112* eps2_status_0x112_112_;
  ::jmc_auto::canbus::Gw_mcu_power_0x226_226* gw_mcu_power_0x226_226_;
  ::jmc_auto::canbus::Adu_controleps2_0x100_100* adu_controleps2_0x100_100_;
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225* gw_mcu_output_0x225_225_;
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221* gw_abs_sts_0x221_221_;
  ::jmc_auto::canbus::Ibc_status_0x122_122* ibc_status_0x122_122_;
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* gw_vcu_whltq_0x107_107_;
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344* bcm_bodysts_0x344_344_;
  ::jmc_auto::canbus::Gw_bms_display_0x323_323* gw_bms_display_0x323_323_;
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* adu_bodycontrol_0x333_333_;
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181* gw_bms_sts_0x181_181_;
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185* gw_vcu_control_0x185_185_;
  ::jmc_auto::canbus::Ibc_status2_0x124_124* ibc_status2_0x124_124_;
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* gw_vcu_hmi_0x358_358_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fteshun_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Epb_status_0x152_152

// optional int32 checksum_0x152 = 1;
inline bool Epb_status_0x152_152::has_checksum_0x152() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Epb_status_0x152_152::set_has_checksum_0x152() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Epb_status_0x152_152::clear_has_checksum_0x152() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Epb_status_0x152_152::clear_checksum_0x152() {
  checksum_0x152_ = 0;
  clear_has_checksum_0x152();
}
inline ::google::protobuf::int32 Epb_status_0x152_152::checksum_0x152() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.checksum_0x152)
  return checksum_0x152_;
}
inline void Epb_status_0x152_152::set_checksum_0x152(::google::protobuf::int32 value) {
  set_has_checksum_0x152();
  checksum_0x152_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.checksum_0x152)
}

// optional int32 rolling_counter_0x152 = 2;
inline bool Epb_status_0x152_152::has_rolling_counter_0x152() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Epb_status_0x152_152::set_has_rolling_counter_0x152() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Epb_status_0x152_152::clear_has_rolling_counter_0x152() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Epb_status_0x152_152::clear_rolling_counter_0x152() {
  rolling_counter_0x152_ = 0;
  clear_has_rolling_counter_0x152();
}
inline ::google::protobuf::int32 Epb_status_0x152_152::rolling_counter_0x152() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.rolling_counter_0x152)
  return rolling_counter_0x152_;
}
inline void Epb_status_0x152_152::set_rolling_counter_0x152(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x152();
  rolling_counter_0x152_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.rolling_counter_0x152)
}

// optional int32 epb_faultcode = 3;
inline bool Epb_status_0x152_152::has_epb_faultcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Epb_status_0x152_152::set_has_epb_faultcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Epb_status_0x152_152::clear_has_epb_faultcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Epb_status_0x152_152::clear_epb_faultcode() {
  epb_faultcode_ = 0;
  clear_has_epb_faultcode();
}
inline ::google::protobuf::int32 Epb_status_0x152_152::epb_faultcode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.epb_faultcode)
  return epb_faultcode_;
}
inline void Epb_status_0x152_152::set_epb_faultcode(::google::protobuf::int32 value) {
  set_has_epb_faultcode();
  epb_faultcode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.epb_faultcode)
}

// optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_brakelampreqType epb_brakelampreq = 4;
inline bool Epb_status_0x152_152::has_epb_brakelampreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Epb_status_0x152_152::set_has_epb_brakelampreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Epb_status_0x152_152::clear_has_epb_brakelampreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Epb_status_0x152_152::clear_epb_brakelampreq() {
  epb_brakelampreq_ = 0;
  clear_has_epb_brakelampreq();
}
inline ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType Epb_status_0x152_152::epb_brakelampreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.epb_brakelampreq)
  return static_cast< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType >(epb_brakelampreq_);
}
inline void Epb_status_0x152_152::set_epb_brakelampreq(::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType value) {
  assert(::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType_IsValid(value));
  set_has_epb_brakelampreq();
  epb_brakelampreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.epb_brakelampreq)
}

// optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_sysfaultstatusType epb_sysfaultstatus = 5;
inline bool Epb_status_0x152_152::has_epb_sysfaultstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Epb_status_0x152_152::set_has_epb_sysfaultstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Epb_status_0x152_152::clear_has_epb_sysfaultstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Epb_status_0x152_152::clear_epb_sysfaultstatus() {
  epb_sysfaultstatus_ = 0;
  clear_has_epb_sysfaultstatus();
}
inline ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType Epb_status_0x152_152::epb_sysfaultstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.epb_sysfaultstatus)
  return static_cast< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType >(epb_sysfaultstatus_);
}
inline void Epb_status_0x152_152::set_epb_sysfaultstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType value) {
  assert(::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType_IsValid(value));
  set_has_epb_sysfaultstatus();
  epb_sysfaultstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.epb_sysfaultstatus)
}

// optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_parkingstatusType epb_parkingstatus = 6;
inline bool Epb_status_0x152_152::has_epb_parkingstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Epb_status_0x152_152::set_has_epb_parkingstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Epb_status_0x152_152::clear_has_epb_parkingstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Epb_status_0x152_152::clear_epb_parkingstatus() {
  epb_parkingstatus_ = 0;
  clear_has_epb_parkingstatus();
}
inline ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType Epb_status_0x152_152::epb_parkingstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.epb_parkingstatus)
  return static_cast< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType >(epb_parkingstatus_);
}
inline void Epb_status_0x152_152::set_epb_parkingstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType value) {
  assert(::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType_IsValid(value));
  set_has_epb_parkingstatus();
  epb_parkingstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.epb_parkingstatus)
}

// optional .jmc_auto.canbus.Epb_status_0x152_152.Epb_switchstatusType epb_switchstatus = 7;
inline bool Epb_status_0x152_152::has_epb_switchstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Epb_status_0x152_152::set_has_epb_switchstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Epb_status_0x152_152::clear_has_epb_switchstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Epb_status_0x152_152::clear_epb_switchstatus() {
  epb_switchstatus_ = 0;
  clear_has_epb_switchstatus();
}
inline ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType Epb_status_0x152_152::epb_switchstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Epb_status_0x152_152.epb_switchstatus)
  return static_cast< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType >(epb_switchstatus_);
}
inline void Epb_status_0x152_152::set_epb_switchstatus(::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType value) {
  assert(::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType_IsValid(value));
  set_has_epb_switchstatus();
  epb_switchstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Epb_status_0x152_152.epb_switchstatus)
}

// -------------------------------------------------------------------

// Gw_abs_0x211_211

// optional int32 checksum_0x211 = 1;
inline bool Gw_abs_0x211_211::has_checksum_0x211() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_abs_0x211_211::set_has_checksum_0x211() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_abs_0x211_211::clear_has_checksum_0x211() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_abs_0x211_211::clear_checksum_0x211() {
  checksum_0x211_ = 0;
  clear_has_checksum_0x211();
}
inline ::google::protobuf::int32 Gw_abs_0x211_211::checksum_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.checksum_0x211)
  return checksum_0x211_;
}
inline void Gw_abs_0x211_211::set_checksum_0x211(::google::protobuf::int32 value) {
  set_has_checksum_0x211();
  checksum_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.checksum_0x211)
}

// optional int32 rollingcounter_0x211 = 2;
inline bool Gw_abs_0x211_211::has_rollingcounter_0x211() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_abs_0x211_211::set_has_rollingcounter_0x211() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_abs_0x211_211::clear_has_rollingcounter_0x211() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_abs_0x211_211::clear_rollingcounter_0x211() {
  rollingcounter_0x211_ = 0;
  clear_has_rollingcounter_0x211();
}
inline ::google::protobuf::int32 Gw_abs_0x211_211::rollingcounter_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.rollingcounter_0x211)
  return rollingcounter_0x211_;
}
inline void Gw_abs_0x211_211::set_rollingcounter_0x211(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x211();
  rollingcounter_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.rollingcounter_0x211)
}

// optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 3;
inline bool Gw_abs_0x211_211::has_abs_whlspdreristatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdreristatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdreristatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdreristatus() {
  abs_whlspdreristatus_ = 0;
  clear_has_abs_whlspdreristatus();
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType Gw_abs_0x211_211::abs_whlspdreristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdreristatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType >(abs_whlspdreristatus_);
}
inline void Gw_abs_0x211_211::set_abs_whlspdreristatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType_IsValid(value));
  set_has_abs_whlspdreristatus();
  abs_whlspdreristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdreristatus)
}

// optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 4;
inline bool Gw_abs_0x211_211::has_abs_whlspdrelestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdrelestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdrelestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdrelestatus() {
  abs_whlspdrelestatus_ = 0;
  clear_has_abs_whlspdrelestatus();
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType Gw_abs_0x211_211::abs_whlspdrelestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdrelestatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType >(abs_whlspdrelestatus_);
}
inline void Gw_abs_0x211_211::set_abs_whlspdrelestatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType_IsValid(value));
  set_has_abs_whlspdrelestatus();
  abs_whlspdrelestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdrelestatus)
}

// optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 5;
inline bool Gw_abs_0x211_211::has_abs_whlspdfrntristatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdfrntristatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdfrntristatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdfrntristatus() {
  abs_whlspdfrntristatus_ = 0;
  clear_has_abs_whlspdfrntristatus();
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType Gw_abs_0x211_211::abs_whlspdfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntristatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType >(abs_whlspdfrntristatus_);
}
inline void Gw_abs_0x211_211::set_abs_whlspdfrntristatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType_IsValid(value));
  set_has_abs_whlspdfrntristatus();
  abs_whlspdfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntristatus)
}

// optional .jmc_auto.canbus.Gw_abs_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 6;
inline bool Gw_abs_0x211_211::has_abs_whlspdfrntlestatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdfrntlestatus() {
  abs_whlspdfrntlestatus_ = 0;
  clear_has_abs_whlspdfrntlestatus();
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType Gw_abs_0x211_211::abs_whlspdfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType >(abs_whlspdfrntlestatus_);
}
inline void Gw_abs_0x211_211::set_abs_whlspdfrntlestatus(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value));
  set_has_abs_whlspdfrntlestatus();
  abs_whlspdfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntlestatus)
}

// optional double abs_whlspdreri = 7;
inline bool Gw_abs_0x211_211::has_abs_whlspdreri() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdreri() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdreri() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdreri() {
  abs_whlspdreri_ = 0;
  clear_has_abs_whlspdreri();
}
inline double Gw_abs_0x211_211::abs_whlspdreri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdreri)
  return abs_whlspdreri_;
}
inline void Gw_abs_0x211_211::set_abs_whlspdreri(double value) {
  set_has_abs_whlspdreri();
  abs_whlspdreri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdreri)
}

// optional double abs_whlspdrele = 8;
inline bool Gw_abs_0x211_211::has_abs_whlspdrele() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdrele() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdrele() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdrele() {
  abs_whlspdrele_ = 0;
  clear_has_abs_whlspdrele();
}
inline double Gw_abs_0x211_211::abs_whlspdrele() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdrele)
  return abs_whlspdrele_;
}
inline void Gw_abs_0x211_211::set_abs_whlspdrele(double value) {
  set_has_abs_whlspdrele();
  abs_whlspdrele_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdrele)
}

// optional double abs_whlspdfrntri = 9;
inline bool Gw_abs_0x211_211::has_abs_whlspdfrntri() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdfrntri() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdfrntri() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdfrntri() {
  abs_whlspdfrntri_ = 0;
  clear_has_abs_whlspdfrntri();
}
inline double Gw_abs_0x211_211::abs_whlspdfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntri)
  return abs_whlspdfrntri_;
}
inline void Gw_abs_0x211_211::set_abs_whlspdfrntri(double value) {
  set_has_abs_whlspdfrntri();
  abs_whlspdfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntri)
}

// optional double abs_whlspdfrntle = 10;
inline bool Gw_abs_0x211_211::has_abs_whlspdfrntle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_abs_0x211_211::set_has_abs_whlspdfrntle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_abs_0x211_211::clear_has_abs_whlspdfrntle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_abs_0x211_211::clear_abs_whlspdfrntle() {
  abs_whlspdfrntle_ = 0;
  clear_has_abs_whlspdfrntle();
}
inline double Gw_abs_0x211_211::abs_whlspdfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntle)
  return abs_whlspdfrntle_;
}
inline void Gw_abs_0x211_211::set_abs_whlspdfrntle(double value) {
  set_has_abs_whlspdfrntle();
  abs_whlspdfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_0x211_211.abs_whlspdfrntle)
}

// -------------------------------------------------------------------

// Bcm_door_0x310_310

// optional int32 bcm_checksum_0x310 = 1;
inline bool Bcm_door_0x310_310::has_bcm_checksum_0x310() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_checksum_0x310() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_checksum_0x310() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bcm_door_0x310_310::clear_bcm_checksum_0x310() {
  bcm_checksum_0x310_ = 0;
  clear_has_bcm_checksum_0x310();
}
inline ::google::protobuf::int32 Bcm_door_0x310_310::bcm_checksum_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_checksum_0x310)
  return bcm_checksum_0x310_;
}
inline void Bcm_door_0x310_310::set_bcm_checksum_0x310(::google::protobuf::int32 value) {
  set_has_bcm_checksum_0x310();
  bcm_checksum_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_checksum_0x310)
}

// optional int32 bcm_rolling_counter_0x310 = 2;
inline bool Bcm_door_0x310_310::has_bcm_rolling_counter_0x310() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bcm_door_0x310_310::clear_bcm_rolling_counter_0x310() {
  bcm_rolling_counter_0x310_ = 0;
  clear_has_bcm_rolling_counter_0x310();
}
inline ::google::protobuf::int32 Bcm_door_0x310_310::bcm_rolling_counter_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_rolling_counter_0x310)
  return bcm_rolling_counter_0x310_;
}
inline void Bcm_door_0x310_310::set_bcm_rolling_counter_0x310(::google::protobuf::int32 value) {
  set_has_bcm_rolling_counter_0x310();
  bcm_rolling_counter_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_rolling_counter_0x310)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 3;
inline bool Bcm_door_0x310_310::has_bcm_rearwipersts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_rearwipersts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_rearwipersts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bcm_door_0x310_310::clear_bcm_rearwipersts() {
  bcm_rearwipersts_ = 0;
  clear_has_bcm_rearwipersts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType Bcm_door_0x310_310::bcm_rearwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_rearwipersts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType >(bcm_rearwipersts_);
}
inline void Bcm_door_0x310_310::set_bcm_rearwipersts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value));
  set_has_bcm_rearwipersts();
  bcm_rearwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_rearwipersts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 4;
inline bool Bcm_door_0x310_310::has_bcm_frontwipersts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_frontwipersts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_frontwipersts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bcm_door_0x310_310::clear_bcm_frontwipersts() {
  bcm_frontwipersts_ = 0;
  clear_has_bcm_frontwipersts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType Bcm_door_0x310_310::bcm_frontwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_frontwipersts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType >(bcm_frontwipersts_);
}
inline void Bcm_door_0x310_310::set_bcm_frontwipersts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value));
  set_has_bcm_frontwipersts();
  bcm_frontwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_frontwipersts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_chargeplugstsType bcm_chargeplugsts = 5;
inline bool Bcm_door_0x310_310::has_bcm_chargeplugsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_chargeplugsts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_chargeplugsts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bcm_door_0x310_310::clear_bcm_chargeplugsts() {
  bcm_chargeplugsts_ = 0;
  clear_has_bcm_chargeplugsts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType Bcm_door_0x310_310::bcm_chargeplugsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_chargeplugsts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType >(bcm_chargeplugsts_);
}
inline void Bcm_door_0x310_310::set_bcm_chargeplugsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType_IsValid(value));
  set_has_bcm_chargeplugsts();
  bcm_chargeplugsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_chargeplugsts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 6;
inline bool Bcm_door_0x310_310::has_bcm_enginehoodsts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_enginehoodsts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_enginehoodsts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bcm_door_0x310_310::clear_bcm_enginehoodsts() {
  bcm_enginehoodsts_ = 0;
  clear_has_bcm_enginehoodsts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType Bcm_door_0x310_310::bcm_enginehoodsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_enginehoodsts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType >(bcm_enginehoodsts_);
}
inline void Bcm_door_0x310_310::set_bcm_enginehoodsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value));
  set_has_bcm_enginehoodsts();
  bcm_enginehoodsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_enginehoodsts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 7;
inline bool Bcm_door_0x310_310::has_bcm_trunkdoorpreunlocksts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bcm_door_0x310_310::clear_bcm_trunkdoorpreunlocksts() {
  bcm_trunkdoorpreunlocksts_ = 0;
  clear_has_bcm_trunkdoorpreunlocksts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Bcm_door_0x310_310::bcm_trunkdoorpreunlocksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType >(bcm_trunkdoorpreunlocksts_);
}
inline void Bcm_door_0x310_310::set_bcm_trunkdoorpreunlocksts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value));
  set_has_bcm_trunkdoorpreunlocksts();
  bcm_trunkdoorpreunlocksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 8;
inline bool Bcm_door_0x310_310::has_bcm_antitheftsts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_antitheftsts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_antitheftsts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bcm_door_0x310_310::clear_bcm_antitheftsts() {
  bcm_antitheftsts_ = 0;
  clear_has_bcm_antitheftsts();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType Bcm_door_0x310_310::bcm_antitheftsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_antitheftsts)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType >(bcm_antitheftsts_);
}
inline void Bcm_door_0x310_310::set_bcm_antitheftsts(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value));
  set_has_bcm_antitheftsts();
  bcm_antitheftsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_antitheftsts)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 9;
inline bool Bcm_door_0x310_310::has_bcm_lockunlockfeedback() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_lockunlockfeedback() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_lockunlockfeedback() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bcm_door_0x310_310::clear_bcm_lockunlockfeedback() {
  bcm_lockunlockfeedback_ = 0;
  clear_has_bcm_lockunlockfeedback();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType Bcm_door_0x310_310::bcm_lockunlockfeedback() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_lockunlockfeedback)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType >(bcm_lockunlockfeedback_);
}
inline void Bcm_door_0x310_310::set_bcm_lockunlockfeedback(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value));
  set_has_bcm_lockunlockfeedback();
  bcm_lockunlockfeedback_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_lockunlockfeedback)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 10;
inline bool Bcm_door_0x310_310::has_bcm_doorlockststrunk() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorlockststrunk() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorlockststrunk() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorlockststrunk() {
  bcm_doorlockststrunk_ = 0;
  clear_has_bcm_doorlockststrunk();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType Bcm_door_0x310_310::bcm_doorlockststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockststrunk)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType >(bcm_doorlockststrunk_);
}
inline void Bcm_door_0x310_310::set_bcm_doorlockststrunk(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value));
  set_has_bcm_doorlockststrunk();
  bcm_doorlockststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockststrunk)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 11;
inline bool Bcm_door_0x310_310::has_bcm_doorststrunk() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorststrunk() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorststrunk() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorststrunk() {
  bcm_doorststrunk_ = 0;
  clear_has_bcm_doorststrunk();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType Bcm_door_0x310_310::bcm_doorststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorststrunk)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType >(bcm_doorststrunk_);
}
inline void Bcm_door_0x310_310::set_bcm_doorststrunk(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value));
  set_has_bcm_doorststrunk();
  bcm_doorststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorststrunk)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 12;
inline bool Bcm_door_0x310_310::has_bcm_doorlockstsrearri() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorlockstsrearri() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorlockstsrearri() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorlockstsrearri() {
  bcm_doorlockstsrearri_ = 0;
  clear_has_bcm_doorlockstsrearri();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType Bcm_door_0x310_310::bcm_doorlockstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsrearri)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType >(bcm_doorlockstsrearri_);
}
inline void Bcm_door_0x310_310::set_bcm_doorlockstsrearri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value));
  set_has_bcm_doorlockstsrearri();
  bcm_doorlockstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsrearri)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 13;
inline bool Bcm_door_0x310_310::has_bcm_doorlockstsrearle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorlockstsrearle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorlockstsrearle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorlockstsrearle() {
  bcm_doorlockstsrearle_ = 0;
  clear_has_bcm_doorlockstsrearle();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType Bcm_door_0x310_310::bcm_doorlockstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsrearle)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType >(bcm_doorlockstsrearle_);
}
inline void Bcm_door_0x310_310::set_bcm_doorlockstsrearle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value));
  set_has_bcm_doorlockstsrearle();
  bcm_doorlockstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsrearle)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 14;
inline bool Bcm_door_0x310_310::has_bcm_doorlockstsfrntri() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorlockstsfrntri() {
  bcm_doorlockstsfrntri_ = 0;
  clear_has_bcm_doorlockstsfrntri();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType Bcm_door_0x310_310::bcm_doorlockstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsfrntri)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType >(bcm_doorlockstsfrntri_);
}
inline void Bcm_door_0x310_310::set_bcm_doorlockstsfrntri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value));
  set_has_bcm_doorlockstsfrntri();
  bcm_doorlockstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsfrntri)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 15;
inline bool Bcm_door_0x310_310::has_bcm_doorlockstsfrntle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorlockstsfrntle() {
  bcm_doorlockstsfrntle_ = 0;
  clear_has_bcm_doorlockstsfrntle();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType Bcm_door_0x310_310::bcm_doorlockstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsfrntle)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType >(bcm_doorlockstsfrntle_);
}
inline void Bcm_door_0x310_310::set_bcm_doorlockstsfrntle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value));
  set_has_bcm_doorlockstsfrntle();
  bcm_doorlockstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorlockstsfrntle)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 16;
inline bool Bcm_door_0x310_310::has_bcm_doorstsrearri() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorstsrearri() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorstsrearri() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorstsrearri() {
  bcm_doorstsrearri_ = 0;
  clear_has_bcm_doorstsrearri();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType Bcm_door_0x310_310::bcm_doorstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsrearri)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType >(bcm_doorstsrearri_);
}
inline void Bcm_door_0x310_310::set_bcm_doorstsrearri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value));
  set_has_bcm_doorstsrearri();
  bcm_doorstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsrearri)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 17;
inline bool Bcm_door_0x310_310::has_bcm_doorstsrearle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorstsrearle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorstsrearle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorstsrearle() {
  bcm_doorstsrearle_ = 0;
  clear_has_bcm_doorstsrearle();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType Bcm_door_0x310_310::bcm_doorstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsrearle)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType >(bcm_doorstsrearle_);
}
inline void Bcm_door_0x310_310::set_bcm_doorstsrearle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value));
  set_has_bcm_doorstsrearle();
  bcm_doorstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsrearle)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 18;
inline bool Bcm_door_0x310_310::has_bcm_doorstsfrntri() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorstsfrntri() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorstsfrntri() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorstsfrntri() {
  bcm_doorstsfrntri_ = 0;
  clear_has_bcm_doorstsfrntri();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType Bcm_door_0x310_310::bcm_doorstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsfrntri)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType >(bcm_doorstsfrntri_);
}
inline void Bcm_door_0x310_310::set_bcm_doorstsfrntri(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value));
  set_has_bcm_doorstsfrntri();
  bcm_doorstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsfrntri)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 19;
inline bool Bcm_door_0x310_310::has_bcm_doorstsfrntle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Bcm_door_0x310_310::set_has_bcm_doorstsfrntle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Bcm_door_0x310_310::clear_has_bcm_doorstsfrntle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Bcm_door_0x310_310::clear_bcm_doorstsfrntle() {
  bcm_doorstsfrntle_ = 0;
  clear_has_bcm_doorstsfrntle();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType Bcm_door_0x310_310::bcm_doorstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsfrntle)
  return static_cast< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType >(bcm_doorstsfrntle_);
}
inline void Bcm_door_0x310_310::set_bcm_doorstsfrntle(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType value) {
  assert(::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value));
  set_has_bcm_doorstsfrntle();
  bcm_doorstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_door_0x310_310.bcm_doorstsfrntle)
}

// -------------------------------------------------------------------

// Gw_vcu_sts_0x218_218

// optional int32 checksum_0x218 = 1;
inline bool Gw_vcu_sts_0x218_218::has_checksum_0x218() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_checksum_0x218() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_checksum_0x218() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_sts_0x218_218::clear_checksum_0x218() {
  checksum_0x218_ = 0;
  clear_has_checksum_0x218();
}
inline ::google::protobuf::int32 Gw_vcu_sts_0x218_218::checksum_0x218() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.checksum_0x218)
  return checksum_0x218_;
}
inline void Gw_vcu_sts_0x218_218::set_checksum_0x218(::google::protobuf::int32 value) {
  set_has_checksum_0x218();
  checksum_0x218_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.checksum_0x218)
}

// optional int32 rolling_counter_0x218 = 2;
inline bool Gw_vcu_sts_0x218_218::has_rolling_counter_0x218() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_rolling_counter_0x218() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_rolling_counter_0x218() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_sts_0x218_218::clear_rolling_counter_0x218() {
  rolling_counter_0x218_ = 0;
  clear_has_rolling_counter_0x218();
}
inline ::google::protobuf::int32 Gw_vcu_sts_0x218_218::rolling_counter_0x218() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.rolling_counter_0x218)
  return rolling_counter_0x218_;
}
inline void Gw_vcu_sts_0x218_218::set_rolling_counter_0x218(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x218();
  rolling_counter_0x218_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.rolling_counter_0x218)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_nlockrequestType vcu_nlockrequest = 3;
inline bool Gw_vcu_sts_0x218_218::has_vcu_nlockrequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_nlockrequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_nlockrequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_nlockrequest() {
  vcu_nlockrequest_ = 0;
  clear_has_vcu_nlockrequest();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType Gw_vcu_sts_0x218_218::vcu_nlockrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_nlockrequest)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType >(vcu_nlockrequest_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_nlockrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_IsValid(value));
  set_has_vcu_nlockrequest();
  vcu_nlockrequest_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_nlockrequest)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_plockrequestType vcu_plockrequest = 4;
inline bool Gw_vcu_sts_0x218_218::has_vcu_plockrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_plockrequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_plockrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_plockrequest() {
  vcu_plockrequest_ = 0;
  clear_has_vcu_plockrequest();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType Gw_vcu_sts_0x218_218::vcu_plockrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_plockrequest)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType >(vcu_plockrequest_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_plockrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType_IsValid(value));
  set_has_vcu_plockrequest();
  vcu_plockrequest_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_plockrequest)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_vehicle_modeType vcu_vehicle_mode = 5;
inline bool Gw_vcu_sts_0x218_218::has_vcu_vehicle_mode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_vehicle_mode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_vehicle_mode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_vehicle_mode() {
  vcu_vehicle_mode_ = 1;
  clear_has_vcu_vehicle_mode();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType Gw_vcu_sts_0x218_218::vcu_vehicle_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_vehicle_mode)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType >(vcu_vehicle_mode_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_vehicle_mode(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_IsValid(value));
  set_has_vcu_vehicle_mode();
  vcu_vehicle_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_vehicle_mode)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_engaddfuel_rqType vcu_engaddfuel_rq = 6;
inline bool Gw_vcu_sts_0x218_218::has_vcu_engaddfuel_rq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_engaddfuel_rq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_engaddfuel_rq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_engaddfuel_rq() {
  vcu_engaddfuel_rq_ = 0;
  clear_has_vcu_engaddfuel_rq();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType Gw_vcu_sts_0x218_218::vcu_engaddfuel_rq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_engaddfuel_rq)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType >(vcu_engaddfuel_rq_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_engaddfuel_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_IsValid(value));
  set_has_vcu_engaddfuel_rq();
  vcu_engaddfuel_rq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_engaddfuel_rq)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_fan_rqType vcu_fan_rq = 7;
inline bool Gw_vcu_sts_0x218_218::has_vcu_fan_rq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_fan_rq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_fan_rq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_fan_rq() {
  vcu_fan_rq_ = 0;
  clear_has_vcu_fan_rq();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType Gw_vcu_sts_0x218_218::vcu_fan_rq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_fan_rq)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType >(vcu_fan_rq_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_fan_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType_IsValid(value));
  set_has_vcu_fan_rq();
  vcu_fan_rq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_fan_rq)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_engstart_rqType vcu_engstart_rq = 8;
inline bool Gw_vcu_sts_0x218_218::has_vcu_engstart_rq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_engstart_rq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_engstart_rq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_engstart_rq() {
  vcu_engstart_rq_ = 0;
  clear_has_vcu_engstart_rq();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType Gw_vcu_sts_0x218_218::vcu_engstart_rq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_engstart_rq)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType >(vcu_engstart_rq_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_engstart_rq(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_IsValid(value));
  set_has_vcu_engstart_rq();
  vcu_engstart_rq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_engstart_rq)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_dcu_parkrequestType vcu_dcu_parkrequest = 9;
inline bool Gw_vcu_sts_0x218_218::has_vcu_dcu_parkrequest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_dcu_parkrequest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_dcu_parkrequest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_dcu_parkrequest() {
  vcu_dcu_parkrequest_ = 0;
  clear_has_vcu_dcu_parkrequest();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType Gw_vcu_sts_0x218_218::vcu_dcu_parkrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_dcu_parkrequest)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType >(vcu_dcu_parkrequest_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_dcu_parkrequest(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_IsValid(value));
  set_has_vcu_dcu_parkrequest();
  vcu_dcu_parkrequest_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_dcu_parkrequest)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_actualgearlevelpositionvalidType vcu_actualgearlevelpositionvalid = 10;
inline bool Gw_vcu_sts_0x218_218::has_vcu_actualgearlevelpositionvalid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_actualgearlevelpositionvalid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_actualgearlevelpositionvalid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_actualgearlevelpositionvalid() {
  vcu_actualgearlevelpositionvalid_ = 0;
  clear_has_vcu_actualgearlevelpositionvalid();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType Gw_vcu_sts_0x218_218::vcu_actualgearlevelpositionvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_actualgearlevelpositionvalid)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType >(vcu_actualgearlevelpositionvalid_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_actualgearlevelpositionvalid(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_IsValid(value));
  set_has_vcu_actualgearlevelpositionvalid();
  vcu_actualgearlevelpositionvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_actualgearlevelpositionvalid)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_actualgearlevelpositionType vcu_actualgearlevelposition = 11;
inline bool Gw_vcu_sts_0x218_218::has_vcu_actualgearlevelposition() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_actualgearlevelposition() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_actualgearlevelposition() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_actualgearlevelposition() {
  vcu_actualgearlevelposition_ = 0;
  clear_has_vcu_actualgearlevelposition();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType Gw_vcu_sts_0x218_218::vcu_actualgearlevelposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_actualgearlevelposition)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType >(vcu_actualgearlevelposition_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_actualgearlevelposition(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_IsValid(value));
  set_has_vcu_actualgearlevelposition();
  vcu_actualgearlevelposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_actualgearlevelposition)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bms_chgstart_alwType vcu_bms_chgstart_alw = 12;
inline bool Gw_vcu_sts_0x218_218::has_vcu_bms_chgstart_alw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_bms_chgstart_alw() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_bms_chgstart_alw() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_bms_chgstart_alw() {
  vcu_bms_chgstart_alw_ = 0;
  clear_has_vcu_bms_chgstart_alw();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType Gw_vcu_sts_0x218_218::vcu_bms_chgstart_alw() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bms_chgstart_alw)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType >(vcu_bms_chgstart_alw_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_bms_chgstart_alw(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_IsValid(value));
  set_has_vcu_bms_chgstart_alw();
  vcu_bms_chgstart_alw_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bms_chgstart_alw)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bms_hvonoff_reqType vcu_bms_hvonoff_req = 13;
inline bool Gw_vcu_sts_0x218_218::has_vcu_bms_hvonoff_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_bms_hvonoff_req() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_bms_hvonoff_req() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_bms_hvonoff_req() {
  vcu_bms_hvonoff_req_ = 0;
  clear_has_vcu_bms_hvonoff_req();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType Gw_vcu_sts_0x218_218::vcu_bms_hvonoff_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bms_hvonoff_req)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType >(vcu_bms_hvonoff_req_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_bms_hvonoff_req(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_IsValid(value));
  set_has_vcu_bms_hvonoff_req();
  vcu_bms_hvonoff_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bms_hvonoff_req)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_vehfailgrade_errType vcu_vehfailgrade_err = 14;
inline bool Gw_vcu_sts_0x218_218::has_vcu_vehfailgrade_err() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_vehfailgrade_err() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_vehfailgrade_err() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_vehfailgrade_err() {
  vcu_vehfailgrade_err_ = 0;
  clear_has_vcu_vehfailgrade_err();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType Gw_vcu_sts_0x218_218::vcu_vehfailgrade_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_vehfailgrade_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType >(vcu_vehfailgrade_err_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_vehfailgrade_err(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_IsValid(value));
  set_has_vcu_vehfailgrade_err();
  vcu_vehfailgrade_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_vehfailgrade_err)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_running_modeType vcu_running_mode = 15;
inline bool Gw_vcu_sts_0x218_218::has_vcu_running_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_running_mode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_running_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_running_mode() {
  vcu_running_mode_ = 0;
  clear_has_vcu_running_mode();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType Gw_vcu_sts_0x218_218::vcu_running_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_running_mode)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType >(vcu_running_mode_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_running_mode(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType_IsValid(value));
  set_has_vcu_running_mode();
  vcu_running_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_running_mode)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_bp_sleep_allowedType vcu_bp_sleep_allowed = 16;
inline bool Gw_vcu_sts_0x218_218::has_vcu_bp_sleep_allowed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_bp_sleep_allowed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_bp_sleep_allowed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_bp_sleep_allowed() {
  vcu_bp_sleep_allowed_ = 0;
  clear_has_vcu_bp_sleep_allowed();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType Gw_vcu_sts_0x218_218::vcu_bp_sleep_allowed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bp_sleep_allowed)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType >(vcu_bp_sleep_allowed_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_bp_sleep_allowed(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_IsValid(value));
  set_has_vcu_bp_sleep_allowed();
  vcu_bp_sleep_allowed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bp_sleep_allowed)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_hvil_inType vcu_hvil_in = 17;
inline bool Gw_vcu_sts_0x218_218::has_vcu_hvil_in() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_hvil_in() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_hvil_in() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_hvil_in() {
  vcu_hvil_in_ = 0;
  clear_has_vcu_hvil_in();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType Gw_vcu_sts_0x218_218::vcu_hvil_in() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_hvil_in)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType >(vcu_hvil_in_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_hvil_in(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType_IsValid(value));
  set_has_vcu_hvil_in();
  vcu_hvil_in_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_hvil_in)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218.Vcu_hvil_outType vcu_hvil_out = 18;
inline bool Gw_vcu_sts_0x218_218::has_vcu_hvil_out() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_hvil_out() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_hvil_out() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_hvil_out() {
  vcu_hvil_out_ = 0;
  clear_has_vcu_hvil_out();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType Gw_vcu_sts_0x218_218::vcu_hvil_out() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_hvil_out)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType >(vcu_hvil_out_);
}
inline void Gw_vcu_sts_0x218_218::set_vcu_hvil_out(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType value) {
  assert(::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType_IsValid(value));
  set_has_vcu_hvil_out();
  vcu_hvil_out_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_hvil_out)
}

// optional int32 vcu_bp_input_cooling_temp = 19;
inline bool Gw_vcu_sts_0x218_218::has_vcu_bp_input_cooling_temp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_bp_input_cooling_temp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_bp_input_cooling_temp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_bp_input_cooling_temp() {
  vcu_bp_input_cooling_temp_ = 0;
  clear_has_vcu_bp_input_cooling_temp();
}
inline ::google::protobuf::int32 Gw_vcu_sts_0x218_218::vcu_bp_input_cooling_temp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bp_input_cooling_temp)
  return vcu_bp_input_cooling_temp_;
}
inline void Gw_vcu_sts_0x218_218::set_vcu_bp_input_cooling_temp(::google::protobuf::int32 value) {
  set_has_vcu_bp_input_cooling_temp();
  vcu_bp_input_cooling_temp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_bp_input_cooling_temp)
}

// optional int32 vcu_motor_input_cooling_temp = 20;
inline bool Gw_vcu_sts_0x218_218::has_vcu_motor_input_cooling_temp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_vcu_sts_0x218_218::set_has_vcu_motor_input_cooling_temp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_vcu_sts_0x218_218::clear_has_vcu_motor_input_cooling_temp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_vcu_sts_0x218_218::clear_vcu_motor_input_cooling_temp() {
  vcu_motor_input_cooling_temp_ = 0;
  clear_has_vcu_motor_input_cooling_temp();
}
inline ::google::protobuf::int32 Gw_vcu_sts_0x218_218::vcu_motor_input_cooling_temp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_motor_input_cooling_temp)
  return vcu_motor_input_cooling_temp_;
}
inline void Gw_vcu_sts_0x218_218::set_vcu_motor_input_cooling_temp(::google::protobuf::int32 value) {
  set_has_vcu_motor_input_cooling_temp();
  vcu_motor_input_cooling_temp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_sts_0x218_218.vcu_motor_input_cooling_temp)
}

// -------------------------------------------------------------------

// Adu_controldrive_0x120_120

// optional int32 checksum_0x120 = 1;
inline bool Adu_controldrive_0x120_120::has_checksum_0x120() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_checksum_0x120() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Adu_controldrive_0x120_120::clear_has_checksum_0x120() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Adu_controldrive_0x120_120::clear_checksum_0x120() {
  checksum_0x120_ = 0;
  clear_has_checksum_0x120();
}
inline ::google::protobuf::int32 Adu_controldrive_0x120_120::checksum_0x120() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.checksum_0x120)
  return checksum_0x120_;
}
inline void Adu_controldrive_0x120_120::set_checksum_0x120(::google::protobuf::int32 value) {
  set_has_checksum_0x120();
  checksum_0x120_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.checksum_0x120)
}

// optional int32 rolling_counter_0x120 = 2;
inline bool Adu_controldrive_0x120_120::has_rolling_counter_0x120() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_rolling_counter_0x120() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Adu_controldrive_0x120_120::clear_has_rolling_counter_0x120() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Adu_controldrive_0x120_120::clear_rolling_counter_0x120() {
  rolling_counter_0x120_ = 0;
  clear_has_rolling_counter_0x120();
}
inline ::google::protobuf::int32 Adu_controldrive_0x120_120::rolling_counter_0x120() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.rolling_counter_0x120)
  return rolling_counter_0x120_;
}
inline void Adu_controldrive_0x120_120::set_rolling_counter_0x120(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x120();
  rolling_counter_0x120_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.rolling_counter_0x120)
}

// optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_controtorque_rawflagType adu_controtorque_rawflag = 3;
inline bool Adu_controldrive_0x120_120::has_adu_controtorque_rawflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_adu_controtorque_rawflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Adu_controldrive_0x120_120::clear_has_adu_controtorque_rawflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Adu_controldrive_0x120_120::clear_adu_controtorque_rawflag() {
  adu_controtorque_rawflag_ = 0;
  clear_has_adu_controtorque_rawflag();
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType Adu_controldrive_0x120_120::adu_controtorque_rawflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_controtorque_rawflag)
  return static_cast< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType >(adu_controtorque_rawflag_);
}
inline void Adu_controldrive_0x120_120::set_adu_controtorque_rawflag(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType value) {
  assert(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_IsValid(value));
  set_has_adu_controtorque_rawflag();
  adu_controtorque_rawflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_controtorque_rawflag)
}

// optional int32 adu_targetdrving_torque = 4;
inline bool Adu_controldrive_0x120_120::has_adu_targetdrving_torque() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_adu_targetdrving_torque() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Adu_controldrive_0x120_120::clear_has_adu_targetdrving_torque() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Adu_controldrive_0x120_120::clear_adu_targetdrving_torque() {
  adu_targetdrving_torque_ = 0;
  clear_has_adu_targetdrving_torque();
}
inline ::google::protobuf::int32 Adu_controldrive_0x120_120::adu_targetdrving_torque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetdrving_torque)
  return adu_targetdrving_torque_;
}
inline void Adu_controldrive_0x120_120::set_adu_targetdrving_torque(::google::protobuf::int32 value) {
  set_has_adu_targetdrving_torque();
  adu_targetdrving_torque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetdrving_torque)
}

// optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_controtorque_enableType adu_controtorque_enable = 5;
inline bool Adu_controldrive_0x120_120::has_adu_controtorque_enable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_adu_controtorque_enable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Adu_controldrive_0x120_120::clear_has_adu_controtorque_enable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Adu_controldrive_0x120_120::clear_adu_controtorque_enable() {
  adu_controtorque_enable_ = 0;
  clear_has_adu_controtorque_enable();
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType Adu_controldrive_0x120_120::adu_controtorque_enable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_controtorque_enable)
  return static_cast< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType >(adu_controtorque_enable_);
}
inline void Adu_controldrive_0x120_120::set_adu_controtorque_enable(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType value) {
  assert(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType_IsValid(value));
  set_has_adu_controtorque_enable();
  adu_controtorque_enable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_controtorque_enable)
}

// optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_targetgear_positionType adu_targetgear_position = 6;
inline bool Adu_controldrive_0x120_120::has_adu_targetgear_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_adu_targetgear_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Adu_controldrive_0x120_120::clear_has_adu_targetgear_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Adu_controldrive_0x120_120::clear_adu_targetgear_position() {
  adu_targetgear_position_ = 0;
  clear_has_adu_targetgear_position();
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType Adu_controldrive_0x120_120::adu_targetgear_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetgear_position)
  return static_cast< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType >(adu_targetgear_position_);
}
inline void Adu_controldrive_0x120_120::set_adu_targetgear_position(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType value) {
  assert(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType_IsValid(value));
  set_has_adu_targetgear_position();
  adu_targetgear_position_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetgear_position)
}

// optional .jmc_auto.canbus.Adu_controldrive_0x120_120.Adu_targetgear_enableType adu_targetgear_enable = 7;
inline bool Adu_controldrive_0x120_120::has_adu_targetgear_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Adu_controldrive_0x120_120::set_has_adu_targetgear_enable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Adu_controldrive_0x120_120::clear_has_adu_targetgear_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Adu_controldrive_0x120_120::clear_adu_targetgear_enable() {
  adu_targetgear_enable_ = 0;
  clear_has_adu_targetgear_enable();
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType Adu_controldrive_0x120_120::adu_targetgear_enable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetgear_enable)
  return static_cast< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType >(adu_targetgear_enable_);
}
inline void Adu_controldrive_0x120_120::set_adu_targetgear_enable(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType value) {
  assert(::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType_IsValid(value));
  set_has_adu_targetgear_enable();
  adu_targetgear_enable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controldrive_0x120_120.adu_targetgear_enable)
}

// -------------------------------------------------------------------

// Gw_vcu_control2_0x131_131

// optional int32 checksum_0x131 = 1;
inline bool Gw_vcu_control2_0x131_131::has_checksum_0x131() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_checksum_0x131() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_checksum_0x131() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_control2_0x131_131::clear_checksum_0x131() {
  checksum_0x131_ = 0;
  clear_has_checksum_0x131();
}
inline ::google::protobuf::int32 Gw_vcu_control2_0x131_131::checksum_0x131() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.checksum_0x131)
  return checksum_0x131_;
}
inline void Gw_vcu_control2_0x131_131::set_checksum_0x131(::google::protobuf::int32 value) {
  set_has_checksum_0x131();
  checksum_0x131_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.checksum_0x131)
}

// optional int32 rolling_counter_0x131 = 2;
inline bool Gw_vcu_control2_0x131_131::has_rolling_counter_0x131() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_rolling_counter_0x131() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_rolling_counter_0x131() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_control2_0x131_131::clear_rolling_counter_0x131() {
  rolling_counter_0x131_ = 0;
  clear_has_rolling_counter_0x131();
}
inline ::google::protobuf::int32 Gw_vcu_control2_0x131_131::rolling_counter_0x131() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.rolling_counter_0x131)
  return rolling_counter_0x131_;
}
inline void Gw_vcu_control2_0x131_131::set_rolling_counter_0x131(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x131();
  rolling_counter_0x131_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.rolling_counter_0x131)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_sts_vcuType vcu_sts_vcu = 3;
inline bool Gw_vcu_control2_0x131_131::has_vcu_sts_vcu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_sts_vcu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_sts_vcu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_sts_vcu() {
  vcu_sts_vcu_ = 0;
  clear_has_vcu_sts_vcu();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType Gw_vcu_control2_0x131_131::vcu_sts_vcu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_sts_vcu)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType >(vcu_sts_vcu_);
}
inline void Gw_vcu_control2_0x131_131::set_vcu_sts_vcu(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_IsValid(value));
  set_has_vcu_sts_vcu();
  vcu_sts_vcu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_sts_vcu)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_brake_flagType vcu_brake_flag = 4;
inline bool Gw_vcu_control2_0x131_131::has_vcu_brake_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_brake_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_brake_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_brake_flag() {
  vcu_brake_flag_ = 0;
  clear_has_vcu_brake_flag();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType Gw_vcu_control2_0x131_131::vcu_brake_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_brake_flag)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType >(vcu_brake_flag_);
}
inline void Gw_vcu_control2_0x131_131::set_vcu_brake_flag(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType_IsValid(value));
  set_has_vcu_brake_flag();
  vcu_brake_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_brake_flag)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_tractor_flagType vcu_tractor_flag = 5;
inline bool Gw_vcu_control2_0x131_131::has_vcu_tractor_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_tractor_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_tractor_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_tractor_flag() {
  vcu_tractor_flag_ = 0;
  clear_has_vcu_tractor_flag();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType Gw_vcu_control2_0x131_131::vcu_tractor_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_tractor_flag)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType >(vcu_tractor_flag_);
}
inline void Gw_vcu_control2_0x131_131::set_vcu_tractor_flag(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_IsValid(value));
  set_has_vcu_tractor_flag();
  vcu_tractor_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_tractor_flag)
}

// optional double vcu_brkpedpos_meas_vcu = 6;
inline bool Gw_vcu_control2_0x131_131::has_vcu_brkpedpos_meas_vcu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_brkpedpos_meas_vcu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_brkpedpos_meas_vcu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_brkpedpos_meas_vcu() {
  vcu_brkpedpos_meas_vcu_ = 0;
  clear_has_vcu_brkpedpos_meas_vcu();
}
inline double Gw_vcu_control2_0x131_131::vcu_brkpedpos_meas_vcu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_brkpedpos_meas_vcu)
  return vcu_brkpedpos_meas_vcu_;
}
inline void Gw_vcu_control2_0x131_131::set_vcu_brkpedpos_meas_vcu(double value) {
  set_has_vcu_brkpedpos_meas_vcu();
  vcu_brkpedpos_meas_vcu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_brkpedpos_meas_vcu)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_pwt_mode_dashType vcu_pwt_mode_dash = 7;
inline bool Gw_vcu_control2_0x131_131::has_vcu_pwt_mode_dash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_pwt_mode_dash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_pwt_mode_dash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_pwt_mode_dash() {
  vcu_pwt_mode_dash_ = 0;
  clear_has_vcu_pwt_mode_dash();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType Gw_vcu_control2_0x131_131::vcu_pwt_mode_dash() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_pwt_mode_dash)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType >(vcu_pwt_mode_dash_);
}
inline void Gw_vcu_control2_0x131_131::set_vcu_pwt_mode_dash(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_IsValid(value));
  set_has_vcu_pwt_mode_dash();
  vcu_pwt_mode_dash_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_pwt_mode_dash)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131.Vcu_mcu_motor1_capdischarge_reqType vcu_mcu_motor1_capdischarge_req = 8;
inline bool Gw_vcu_control2_0x131_131::has_vcu_mcu_motor1_capdischarge_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_mcu_motor1_capdischarge_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_mcu_motor1_capdischarge_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_mcu_motor1_capdischarge_req() {
  vcu_mcu_motor1_capdischarge_req_ = 0;
  clear_has_vcu_mcu_motor1_capdischarge_req();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType Gw_vcu_control2_0x131_131::vcu_mcu_motor1_capdischarge_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_capdischarge_req)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType >(vcu_mcu_motor1_capdischarge_req_);
}
inline void Gw_vcu_control2_0x131_131::set_vcu_mcu_motor1_capdischarge_req(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_IsValid(value));
  set_has_vcu_mcu_motor1_capdischarge_req();
  vcu_mcu_motor1_capdischarge_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_capdischarge_req)
}

// optional double vcu_mcu_motor1_trq_req = 9;
inline bool Gw_vcu_control2_0x131_131::has_vcu_mcu_motor1_trq_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_mcu_motor1_trq_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_mcu_motor1_trq_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_mcu_motor1_trq_req() {
  vcu_mcu_motor1_trq_req_ = 0;
  clear_has_vcu_mcu_motor1_trq_req();
}
inline double Gw_vcu_control2_0x131_131::vcu_mcu_motor1_trq_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_trq_req)
  return vcu_mcu_motor1_trq_req_;
}
inline void Gw_vcu_control2_0x131_131::set_vcu_mcu_motor1_trq_req(double value) {
  set_has_vcu_mcu_motor1_trq_req();
  vcu_mcu_motor1_trq_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_trq_req)
}

// optional int32 vcu_mcu_motor1_spd_req = 10;
inline bool Gw_vcu_control2_0x131_131::has_vcu_mcu_motor1_spd_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_vcu_control2_0x131_131::set_has_vcu_mcu_motor1_spd_req() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_vcu_control2_0x131_131::clear_has_vcu_mcu_motor1_spd_req() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_vcu_control2_0x131_131::clear_vcu_mcu_motor1_spd_req() {
  vcu_mcu_motor1_spd_req_ = 0;
  clear_has_vcu_mcu_motor1_spd_req();
}
inline ::google::protobuf::int32 Gw_vcu_control2_0x131_131::vcu_mcu_motor1_spd_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_spd_req)
  return vcu_mcu_motor1_spd_req_;
}
inline void Gw_vcu_control2_0x131_131::set_vcu_mcu_motor1_spd_req(::google::protobuf::int32 value) {
  set_has_vcu_mcu_motor1_spd_req();
  vcu_mcu_motor1_spd_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control2_0x131_131.vcu_mcu_motor1_spd_req)
}

// -------------------------------------------------------------------

// Gw_scu_shiftersts_0xc8_c8

// optional int32 checksum_0xc8 = 1;
inline bool Gw_scu_shiftersts_0xc8_c8::has_checksum_0xc8() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_checksum_0xc8() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_checksum_0xc8() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_checksum_0xc8() {
  checksum_0xc8_ = 0;
  clear_has_checksum_0xc8();
}
inline ::google::protobuf::int32 Gw_scu_shiftersts_0xc8_c8::checksum_0xc8() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.checksum_0xc8)
  return checksum_0xc8_;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_checksum_0xc8(::google::protobuf::int32 value) {
  set_has_checksum_0xc8();
  checksum_0xc8_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.checksum_0xc8)
}

// optional int32 rolling_counter_0xc8 = 2;
inline bool Gw_scu_shiftersts_0xc8_c8::has_rolling_counter_0xc8() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_rolling_counter_0xc8() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_rolling_counter_0xc8() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_rolling_counter_0xc8() {
  rolling_counter_0xc8_ = 0;
  clear_has_rolling_counter_0xc8();
}
inline ::google::protobuf::int32 Gw_scu_shiftersts_0xc8_c8::rolling_counter_0xc8() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.rolling_counter_0xc8)
  return rolling_counter_0xc8_;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_rolling_counter_0xc8(::google::protobuf::int32 value) {
  set_has_rolling_counter_0xc8();
  rolling_counter_0xc8_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.rolling_counter_0xc8)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.Scu_shifterlockstatusType scu_shifterlockstatus = 3;
inline bool Gw_scu_shiftersts_0xc8_c8::has_scu_shifterlockstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_scu_shifterlockstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_scu_shifterlockstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_scu_shifterlockstatus() {
  scu_shifterlockstatus_ = 0;
  clear_has_scu_shifterlockstatus();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType Gw_scu_shiftersts_0xc8_c8::scu_shifterlockstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.scu_shifterlockstatus)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType >(scu_shifterlockstatus_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_scu_shifterlockstatus(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_IsValid(value));
  set_has_scu_shifterlockstatus();
  scu_shifterlockstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.scu_shifterlockstatus)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterlockstatusType shifterlockstatus = 4;
inline bool Gw_scu_shiftersts_0xc8_c8::has_shifterlockstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_shifterlockstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_shifterlockstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_shifterlockstatus() {
  shifterlockstatus_ = 0;
  clear_has_shifterlockstatus();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType Gw_scu_shiftersts_0xc8_c8::shifterlockstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterlockstatus)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType >(shifterlockstatus_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_shifterlockstatus(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_IsValid(value));
  set_has_shifterlockstatus();
  shifterlockstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterlockstatus)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositionfailureType shifterpositionfailure = 5;
inline bool Gw_scu_shiftersts_0xc8_c8::has_shifterpositionfailure() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_shifterpositionfailure() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_shifterpositionfailure() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_shifterpositionfailure() {
  shifterpositionfailure_ = 0;
  clear_has_shifterpositionfailure();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType Gw_scu_shiftersts_0xc8_c8::shifterpositionfailure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterpositionfailure)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType >(shifterpositionfailure_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_shifterpositionfailure(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_IsValid(value));
  set_has_shifterpositionfailure();
  shifterpositionfailure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterpositionfailure)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositionType shifterposition = 6;
inline bool Gw_scu_shiftersts_0xc8_c8::has_shifterposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_shifterposition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_shifterposition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_shifterposition() {
  shifterposition_ = 0;
  clear_has_shifterposition();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType Gw_scu_shiftersts_0xc8_c8::shifterposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterposition)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType >(shifterposition_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_shifterposition(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_IsValid(value));
  set_has_shifterposition();
  shifterposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterposition)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.ShifterpositioninvType shifterpositioninv = 7;
inline bool Gw_scu_shiftersts_0xc8_c8::has_shifterpositioninv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_shifterpositioninv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_shifterpositioninv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_shifterpositioninv() {
  shifterpositioninv_ = 5;
  clear_has_shifterpositioninv();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType Gw_scu_shiftersts_0xc8_c8::shifterpositioninv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterpositioninv)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType >(shifterpositioninv_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_shifterpositioninv(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_IsValid(value));
  set_has_shifterpositioninv();
  shifterpositioninv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.shifterpositioninv)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.Sys_sts_scuType sys_sts_scu = 8;
inline bool Gw_scu_shiftersts_0xc8_c8::has_sys_sts_scu() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_scu_shiftersts_0xc8_c8::set_has_sys_sts_scu() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_has_sys_sts_scu() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_scu_shiftersts_0xc8_c8::clear_sys_sts_scu() {
  sys_sts_scu_ = 0;
  clear_has_sys_sts_scu();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType Gw_scu_shiftersts_0xc8_c8::sys_sts_scu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.sys_sts_scu)
  return static_cast< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType >(sys_sts_scu_);
}
inline void Gw_scu_shiftersts_0xc8_c8::set_sys_sts_scu(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType value) {
  assert(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_IsValid(value));
  set_has_sys_sts_scu();
  sys_sts_scu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8.sys_sts_scu)
}

// -------------------------------------------------------------------

// Gw_vcu_drivests_0x10a_10a

// optional int32 checksum_0x10a = 1;
inline bool Gw_vcu_drivests_0x10a_10a::has_checksum_0x10a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_checksum_0x10a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_checksum_0x10a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_checksum_0x10a() {
  checksum_0x10a_ = 0;
  clear_has_checksum_0x10a();
}
inline ::google::protobuf::int32 Gw_vcu_drivests_0x10a_10a::checksum_0x10a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.checksum_0x10a)
  return checksum_0x10a_;
}
inline void Gw_vcu_drivests_0x10a_10a::set_checksum_0x10a(::google::protobuf::int32 value) {
  set_has_checksum_0x10a();
  checksum_0x10a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.checksum_0x10a)
}

// optional int32 rolling_counter_0x10a = 2;
inline bool Gw_vcu_drivests_0x10a_10a::has_rolling_counter_0x10a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_rolling_counter_0x10a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_rolling_counter_0x10a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_rolling_counter_0x10a() {
  rolling_counter_0x10a_ = 0;
  clear_has_rolling_counter_0x10a();
}
inline ::google::protobuf::int32 Gw_vcu_drivests_0x10a_10a::rolling_counter_0x10a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.rolling_counter_0x10a)
  return rolling_counter_0x10a_;
}
inline void Gw_vcu_drivests_0x10a_10a::set_rolling_counter_0x10a(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x10a();
  rolling_counter_0x10a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.rolling_counter_0x10a)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_vehicleerror_interveneType vcu_vehicleerror_intervene = 3;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_vehicleerror_intervene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_vehicleerror_intervene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_vehicleerror_intervene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_vehicleerror_intervene() {
  vcu_vehicleerror_intervene_ = 0;
  clear_has_vcu_vehicleerror_intervene();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType Gw_vcu_drivests_0x10a_10a::vcu_vehicleerror_intervene() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_vehicleerror_intervene)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType >(vcu_vehicleerror_intervene_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_vehicleerror_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_IsValid(value));
  set_has_vcu_vehicleerror_intervene();
  vcu_vehicleerror_intervene_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_vehicleerror_intervene)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_torque_controlstatusType vcu_torque_controlstatus = 4;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_torque_controlstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_torque_controlstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_torque_controlstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_torque_controlstatus() {
  vcu_torque_controlstatus_ = 0;
  clear_has_vcu_torque_controlstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType Gw_vcu_drivests_0x10a_10a::vcu_torque_controlstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_torque_controlstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType >(vcu_torque_controlstatus_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_torque_controlstatus(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_IsValid(value));
  set_has_vcu_torque_controlstatus();
  vcu_torque_controlstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_torque_controlstatus)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_torquedriver_interveneType vcu_torquedriver_intervene = 5;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_torquedriver_intervene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_torquedriver_intervene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_torquedriver_intervene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_torquedriver_intervene() {
  vcu_torquedriver_intervene_ = 0;
  clear_has_vcu_torquedriver_intervene();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType Gw_vcu_drivests_0x10a_10a::vcu_torquedriver_intervene() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_torquedriver_intervene)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType >(vcu_torquedriver_intervene_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_torquedriver_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_IsValid(value));
  set_has_vcu_torquedriver_intervene();
  vcu_torquedriver_intervene_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_torquedriver_intervene)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_gearpos_controlstatusType vcu_gearpos_controlstatus = 6;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_gearpos_controlstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_gearpos_controlstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_gearpos_controlstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_gearpos_controlstatus() {
  vcu_gearpos_controlstatus_ = 0;
  clear_has_vcu_gearpos_controlstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType Gw_vcu_drivests_0x10a_10a::vcu_gearpos_controlstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_gearpos_controlstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType >(vcu_gearpos_controlstatus_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_gearpos_controlstatus(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_IsValid(value));
  set_has_vcu_gearpos_controlstatus();
  vcu_gearpos_controlstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_gearpos_controlstatus)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_gearposdriver_interveneType vcu_gearposdriver_intervene = 7;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_gearposdriver_intervene() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_gearposdriver_intervene() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_gearposdriver_intervene() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_gearposdriver_intervene() {
  vcu_gearposdriver_intervene_ = 0;
  clear_has_vcu_gearposdriver_intervene();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType Gw_vcu_drivests_0x10a_10a::vcu_gearposdriver_intervene() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_gearposdriver_intervene)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType >(vcu_gearposdriver_intervene_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_gearposdriver_intervene(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_IsValid(value));
  set_has_vcu_gearposdriver_intervene();
  vcu_gearposdriver_intervene_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_gearposdriver_intervene)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_veh_stsType vcu_veh_sts = 8;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_veh_sts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_veh_sts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_veh_sts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_veh_sts() {
  vcu_veh_sts_ = 0;
  clear_has_vcu_veh_sts();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType Gw_vcu_drivests_0x10a_10a::vcu_veh_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_veh_sts)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType >(vcu_veh_sts_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_veh_sts(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_IsValid(value));
  set_has_vcu_veh_sts();
  vcu_veh_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_veh_sts)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.Vcu_axlespdstType vcu_axlespdst = 9;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_axlespdst() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_axlespdst() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_axlespdst() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_axlespdst() {
  vcu_axlespdst_ = 0;
  clear_has_vcu_axlespdst();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType Gw_vcu_drivests_0x10a_10a::vcu_axlespdst() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_axlespdst)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType >(vcu_axlespdst_);
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_axlespdst(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType value) {
  assert(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_IsValid(value));
  set_has_vcu_axlespdst();
  vcu_axlespdst_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_axlespdst)
}

// optional double vcu_axlespd = 10;
inline bool Gw_vcu_drivests_0x10a_10a::has_vcu_axlespd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_vcu_drivests_0x10a_10a::set_has_vcu_axlespd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_has_vcu_axlespd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_vcu_drivests_0x10a_10a::clear_vcu_axlespd() {
  vcu_axlespd_ = 0;
  clear_has_vcu_axlespd();
}
inline double Gw_vcu_drivests_0x10a_10a::vcu_axlespd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_axlespd)
  return vcu_axlespd_;
}
inline void Gw_vcu_drivests_0x10a_10a::set_vcu_axlespd(double value) {
  set_has_vcu_axlespd();
  vcu_axlespd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a.vcu_axlespd)
}

// -------------------------------------------------------------------

// Adu_controlbrake_0x110_110

// optional int32 ic_checksum_0x110 = 1;
inline bool Adu_controlbrake_0x110_110::has_ic_checksum_0x110() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_ic_checksum_0x110() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Adu_controlbrake_0x110_110::clear_has_ic_checksum_0x110() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Adu_controlbrake_0x110_110::clear_ic_checksum_0x110() {
  ic_checksum_0x110_ = 0;
  clear_has_ic_checksum_0x110();
}
inline ::google::protobuf::int32 Adu_controlbrake_0x110_110::ic_checksum_0x110() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.ic_checksum_0x110)
  return ic_checksum_0x110_;
}
inline void Adu_controlbrake_0x110_110::set_ic_checksum_0x110(::google::protobuf::int32 value) {
  set_has_ic_checksum_0x110();
  ic_checksum_0x110_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.ic_checksum_0x110)
}

// optional int32 ic_rolling_counter_0x110 = 2;
inline bool Adu_controlbrake_0x110_110::has_ic_rolling_counter_0x110() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_ic_rolling_counter_0x110() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Adu_controlbrake_0x110_110::clear_has_ic_rolling_counter_0x110() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Adu_controlbrake_0x110_110::clear_ic_rolling_counter_0x110() {
  ic_rolling_counter_0x110_ = 0;
  clear_has_ic_rolling_counter_0x110();
}
inline ::google::protobuf::int32 Adu_controlbrake_0x110_110::ic_rolling_counter_0x110() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.ic_rolling_counter_0x110)
  return ic_rolling_counter_0x110_;
}
inline void Adu_controlbrake_0x110_110::set_ic_rolling_counter_0x110(::google::protobuf::int32 value) {
  set_has_ic_rolling_counter_0x110();
  ic_rolling_counter_0x110_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.ic_rolling_counter_0x110)
}

// optional double adu_tgt_deceleration = 3;
inline bool Adu_controlbrake_0x110_110::has_adu_tgt_deceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_tgt_deceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_tgt_deceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_tgt_deceleration() {
  adu_tgt_deceleration_ = 0;
  clear_has_adu_tgt_deceleration();
}
inline double Adu_controlbrake_0x110_110::adu_tgt_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_tgt_deceleration)
  return adu_tgt_deceleration_;
}
inline void Adu_controlbrake_0x110_110::set_adu_tgt_deceleration(double value) {
  set_has_adu_tgt_deceleration();
  adu_tgt_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_tgt_deceleration)
}

// optional double adu_brktmcposition_req = 4;
inline bool Adu_controlbrake_0x110_110::has_adu_brktmcposition_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_brktmcposition_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_brktmcposition_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_brktmcposition_req() {
  adu_brktmcposition_req_ = 0;
  clear_has_adu_brktmcposition_req();
}
inline double Adu_controlbrake_0x110_110::adu_brktmcposition_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_brktmcposition_req)
  return adu_brktmcposition_req_;
}
inline void Adu_controlbrake_0x110_110::set_adu_brktmcposition_req(double value) {
  set_has_adu_brktmcposition_req();
  adu_brktmcposition_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_brktmcposition_req)
}

// optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_parkrelease_reqType adu_parkrelease_req = 5;
inline bool Adu_controlbrake_0x110_110::has_adu_parkrelease_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_parkrelease_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_parkrelease_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_parkrelease_req() {
  adu_parkrelease_req_ = 0;
  clear_has_adu_parkrelease_req();
}
inline ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType Adu_controlbrake_0x110_110::adu_parkrelease_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_parkrelease_req)
  return static_cast< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType >(adu_parkrelease_req_);
}
inline void Adu_controlbrake_0x110_110::set_adu_parkrelease_req(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType value) {
  assert(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_IsValid(value));
  set_has_adu_parkrelease_req();
  adu_parkrelease_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_parkrelease_req)
}

// optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_controbrk_standstillType adu_controbrk_standstill = 6;
inline bool Adu_controlbrake_0x110_110::has_adu_controbrk_standstill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_controbrk_standstill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_controbrk_standstill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_controbrk_standstill() {
  adu_controbrk_standstill_ = 0;
  clear_has_adu_controbrk_standstill();
}
inline ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType Adu_controlbrake_0x110_110::adu_controbrk_standstill() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_controbrk_standstill)
  return static_cast< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType >(adu_controbrk_standstill_);
}
inline void Adu_controlbrake_0x110_110::set_adu_controbrk_standstill(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType value) {
  assert(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_IsValid(value));
  set_has_adu_controbrk_standstill();
  adu_controbrk_standstill_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_controbrk_standstill)
}

// optional .jmc_auto.canbus.Adu_controlbrake_0x110_110.Adu_controbrk_enableType adu_controbrk_enable = 7;
inline bool Adu_controlbrake_0x110_110::has_adu_controbrk_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_controbrk_enable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_controbrk_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_controbrk_enable() {
  adu_controbrk_enable_ = 0;
  clear_has_adu_controbrk_enable();
}
inline ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType Adu_controlbrake_0x110_110::adu_controbrk_enable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_controbrk_enable)
  return static_cast< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType >(adu_controbrk_enable_);
}
inline void Adu_controlbrake_0x110_110::set_adu_controbrk_enable(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType value) {
  assert(::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType_IsValid(value));
  set_has_adu_controbrk_enable();
  adu_controbrk_enable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_controbrk_enable)
}

// optional int32 adu_mastercylinderpressreq = 8;
inline bool Adu_controlbrake_0x110_110::has_adu_mastercylinderpressreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Adu_controlbrake_0x110_110::set_has_adu_mastercylinderpressreq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Adu_controlbrake_0x110_110::clear_has_adu_mastercylinderpressreq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Adu_controlbrake_0x110_110::clear_adu_mastercylinderpressreq() {
  adu_mastercylinderpressreq_ = 0;
  clear_has_adu_mastercylinderpressreq();
}
inline ::google::protobuf::int32 Adu_controlbrake_0x110_110::adu_mastercylinderpressreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_mastercylinderpressreq)
  return adu_mastercylinderpressreq_;
}
inline void Adu_controlbrake_0x110_110::set_adu_mastercylinderpressreq(::google::protobuf::int32 value) {
  set_has_adu_mastercylinderpressreq();
  adu_mastercylinderpressreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controlbrake_0x110_110.adu_mastercylinderpressreq)
}

// -------------------------------------------------------------------

// Eps2_status_0x112_112

// optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_controlstatusType eps_controlstatus = 1;
inline bool Eps2_status_0x112_112::has_eps_controlstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_controlstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Eps2_status_0x112_112::clear_has_eps_controlstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Eps2_status_0x112_112::clear_eps_controlstatus() {
  eps_controlstatus_ = 0;
  clear_has_eps_controlstatus();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType Eps2_status_0x112_112::eps_controlstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_controlstatus)
  return static_cast< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType >(eps_controlstatus_);
}
inline void Eps2_status_0x112_112::set_eps_controlstatus(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType value) {
  assert(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType_IsValid(value));
  set_has_eps_controlstatus();
  eps_controlstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_controlstatus)
}

// optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_driver_interveneType eps_driver_intervene = 2;
inline bool Eps2_status_0x112_112::has_eps_driver_intervene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_driver_intervene() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Eps2_status_0x112_112::clear_has_eps_driver_intervene() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Eps2_status_0x112_112::clear_eps_driver_intervene() {
  eps_driver_intervene_ = 0;
  clear_has_eps_driver_intervene();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType Eps2_status_0x112_112::eps_driver_intervene() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_driver_intervene)
  return static_cast< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType >(eps_driver_intervene_);
}
inline void Eps2_status_0x112_112::set_eps_driver_intervene(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType value) {
  assert(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType_IsValid(value));
  set_has_eps_driver_intervene();
  eps_driver_intervene_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_driver_intervene)
}

// optional int32 eps_steerwheelrotspd = 3;
inline bool Eps2_status_0x112_112::has_eps_steerwheelrotspd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_steerwheelrotspd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Eps2_status_0x112_112::clear_has_eps_steerwheelrotspd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Eps2_status_0x112_112::clear_eps_steerwheelrotspd() {
  eps_steerwheelrotspd_ = 0;
  clear_has_eps_steerwheelrotspd();
}
inline ::google::protobuf::int32 Eps2_status_0x112_112::eps_steerwheelrotspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_steerwheelrotspd)
  return eps_steerwheelrotspd_;
}
inline void Eps2_status_0x112_112::set_eps_steerwheelrotspd(::google::protobuf::int32 value) {
  set_has_eps_steerwheelrotspd();
  eps_steerwheelrotspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_steerwheelrotspd)
}

// optional double eps_steeringwheelang = 4;
inline bool Eps2_status_0x112_112::has_eps_steeringwheelang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_steeringwheelang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Eps2_status_0x112_112::clear_has_eps_steeringwheelang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Eps2_status_0x112_112::clear_eps_steeringwheelang() {
  eps_steeringwheelang_ = 0;
  clear_has_eps_steeringwheelang();
}
inline double Eps2_status_0x112_112::eps_steeringwheelang() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_steeringwheelang)
  return eps_steeringwheelang_;
}
inline void Eps2_status_0x112_112::set_eps_steeringwheelang(double value) {
  set_has_eps_steeringwheelang();
  eps_steeringwheelang_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_steeringwheelang)
}

// optional double eps_torsionbartorque = 5;
inline bool Eps2_status_0x112_112::has_eps_torsionbartorque() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_torsionbartorque() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Eps2_status_0x112_112::clear_has_eps_torsionbartorque() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Eps2_status_0x112_112::clear_eps_torsionbartorque() {
  eps_torsionbartorque_ = 0;
  clear_has_eps_torsionbartorque();
}
inline double Eps2_status_0x112_112::eps_torsionbartorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorque)
  return eps_torsionbartorque_;
}
inline void Eps2_status_0x112_112::set_eps_torsionbartorque(double value) {
  set_has_eps_torsionbartorque();
  eps_torsionbartorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorque)
}

// optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_sasfailurestsType eps_sasfailurests = 6;
inline bool Eps2_status_0x112_112::has_eps_sasfailurests() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_sasfailurests() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Eps2_status_0x112_112::clear_has_eps_sasfailurests() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Eps2_status_0x112_112::clear_eps_sasfailurests() {
  eps_sasfailurests_ = 0;
  clear_has_eps_sasfailurests();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType Eps2_status_0x112_112::eps_sasfailurests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_sasfailurests)
  return static_cast< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType >(eps_sasfailurests_);
}
inline void Eps2_status_0x112_112::set_eps_sasfailurests(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType value) {
  assert(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType_IsValid(value));
  set_has_eps_sasfailurests();
  eps_sasfailurests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_sasfailurests)
}

// optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_torsionbartorquedirType eps_torsionbartorquedir = 7;
inline bool Eps2_status_0x112_112::has_eps_torsionbartorquedir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_torsionbartorquedir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Eps2_status_0x112_112::clear_has_eps_torsionbartorquedir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Eps2_status_0x112_112::clear_eps_torsionbartorquedir() {
  eps_torsionbartorquedir_ = 0;
  clear_has_eps_torsionbartorquedir();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType Eps2_status_0x112_112::eps_torsionbartorquedir() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorquedir)
  return static_cast< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType >(eps_torsionbartorquedir_);
}
inline void Eps2_status_0x112_112::set_eps_torsionbartorquedir(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType value) {
  assert(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType_IsValid(value));
  set_has_eps_torsionbartorquedir();
  eps_torsionbartorquedir_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorquedir)
}

// optional .jmc_auto.canbus.Eps2_status_0x112_112.Eps_torsionbartorquevalidType eps_torsionbartorquevalid = 8;
inline bool Eps2_status_0x112_112::has_eps_torsionbartorquevalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Eps2_status_0x112_112::set_has_eps_torsionbartorquevalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Eps2_status_0x112_112::clear_has_eps_torsionbartorquevalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Eps2_status_0x112_112::clear_eps_torsionbartorquevalid() {
  eps_torsionbartorquevalid_ = 0;
  clear_has_eps_torsionbartorquevalid();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType Eps2_status_0x112_112::eps_torsionbartorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorquevalid)
  return static_cast< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType >(eps_torsionbartorquevalid_);
}
inline void Eps2_status_0x112_112::set_eps_torsionbartorquevalid(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType value) {
  assert(::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType_IsValid(value));
  set_has_eps_torsionbartorquevalid();
  eps_torsionbartorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps2_status_0x112_112.eps_torsionbartorquevalid)
}

// -------------------------------------------------------------------

// Gw_mcu_power_0x226_226

// optional int32 checksum_0x226 = 1;
inline bool Gw_mcu_power_0x226_226::has_checksum_0x226() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_checksum_0x226() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_mcu_power_0x226_226::clear_has_checksum_0x226() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_mcu_power_0x226_226::clear_checksum_0x226() {
  checksum_0x226_ = 0;
  clear_has_checksum_0x226();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::checksum_0x226() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.checksum_0x226)
  return checksum_0x226_;
}
inline void Gw_mcu_power_0x226_226::set_checksum_0x226(::google::protobuf::int32 value) {
  set_has_checksum_0x226();
  checksum_0x226_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.checksum_0x226)
}

// optional int32 rolling_counter_0x226 = 2;
inline bool Gw_mcu_power_0x226_226::has_rolling_counter_0x226() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_rolling_counter_0x226() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_mcu_power_0x226_226::clear_has_rolling_counter_0x226() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_mcu_power_0x226_226::clear_rolling_counter_0x226() {
  rolling_counter_0x226_ = 0;
  clear_has_rolling_counter_0x226();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::rolling_counter_0x226() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.rolling_counter_0x226)
  return rolling_counter_0x226_;
}
inline void Gw_mcu_power_0x226_226::set_rolling_counter_0x226(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x226();
  rolling_counter_0x226_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.rolling_counter_0x226)
}

// optional bool mcu_serialnum_est = 3;
inline bool Gw_mcu_power_0x226_226::has_mcu_serialnum_est() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_serialnum_est() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_serialnum_est() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_serialnum_est() {
  mcu_serialnum_est_ = false;
  clear_has_mcu_serialnum_est();
}
inline bool Gw_mcu_power_0x226_226::mcu_serialnum_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_serialnum_est)
  return mcu_serialnum_est_;
}
inline void Gw_mcu_power_0x226_226::set_mcu_serialnum_est(bool value) {
  set_has_mcu_serialnum_est();
  mcu_serialnum_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_serialnum_est)
}

// optional int32 mcu_tm04_trqmindyn = 4;
inline bool Gw_mcu_power_0x226_226::has_mcu_tm04_trqmindyn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_tm04_trqmindyn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_tm04_trqmindyn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_tm04_trqmindyn() {
  mcu_tm04_trqmindyn_ = 0;
  clear_has_mcu_tm04_trqmindyn();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::mcu_tm04_trqmindyn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_tm04_trqmindyn)
  return mcu_tm04_trqmindyn_;
}
inline void Gw_mcu_power_0x226_226::set_mcu_tm04_trqmindyn(::google::protobuf::int32 value) {
  set_has_mcu_tm04_trqmindyn();
  mcu_tm04_trqmindyn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_tm04_trqmindyn)
}

// optional int32 mcu_tm04_trqmaxdyn = 5;
inline bool Gw_mcu_power_0x226_226::has_mcu_tm04_trqmaxdyn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_tm04_trqmaxdyn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_tm04_trqmaxdyn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_tm04_trqmaxdyn() {
  mcu_tm04_trqmaxdyn_ = 0;
  clear_has_mcu_tm04_trqmaxdyn();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::mcu_tm04_trqmaxdyn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_tm04_trqmaxdyn)
  return mcu_tm04_trqmaxdyn_;
}
inline void Gw_mcu_power_0x226_226::set_mcu_tm04_trqmaxdyn(::google::protobuf::int32 value) {
  set_has_mcu_tm04_trqmaxdyn();
  mcu_tm04_trqmaxdyn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_tm04_trqmaxdyn)
}

// optional int32 mcu_maxtrq_est = 6;
inline bool Gw_mcu_power_0x226_226::has_mcu_maxtrq_est() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_maxtrq_est() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_maxtrq_est() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_maxtrq_est() {
  mcu_maxtrq_est_ = 0;
  clear_has_mcu_maxtrq_est();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::mcu_maxtrq_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_maxtrq_est)
  return mcu_maxtrq_est_;
}
inline void Gw_mcu_power_0x226_226::set_mcu_maxtrq_est(::google::protobuf::int32 value) {
  set_has_mcu_maxtrq_est();
  mcu_maxtrq_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_maxtrq_est)
}

// optional int32 mcu_mintrq_est = 7;
inline bool Gw_mcu_power_0x226_226::has_mcu_mintrq_est() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_mintrq_est() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_mintrq_est() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_mintrq_est() {
  mcu_mintrq_est_ = 0;
  clear_has_mcu_mintrq_est();
}
inline ::google::protobuf::int32 Gw_mcu_power_0x226_226::mcu_mintrq_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_mintrq_est)
  return mcu_mintrq_est_;
}
inline void Gw_mcu_power_0x226_226::set_mcu_mintrq_est(::google::protobuf::int32 value) {
  set_has_mcu_mintrq_est();
  mcu_mintrq_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_mintrq_est)
}

// optional .jmc_auto.canbus.Gw_mcu_power_0x226_226.Mcu_sys_stsType mcu_sys_sts = 8;
inline bool Gw_mcu_power_0x226_226::has_mcu_sys_sts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_mcu_power_0x226_226::set_has_mcu_sys_sts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_mcu_power_0x226_226::clear_has_mcu_sys_sts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_mcu_power_0x226_226::clear_mcu_sys_sts() {
  mcu_sys_sts_ = 0;
  clear_has_mcu_sys_sts();
}
inline ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType Gw_mcu_power_0x226_226::mcu_sys_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_sys_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType >(mcu_sys_sts_);
}
inline void Gw_mcu_power_0x226_226::set_mcu_sys_sts(::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType value) {
  assert(::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType_IsValid(value));
  set_has_mcu_sys_sts();
  mcu_sys_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_power_0x226_226.mcu_sys_sts)
}

// -------------------------------------------------------------------

// Adu_controleps2_0x100_100

// optional int32 adu_100h_messagechecksum = 1;
inline bool Adu_controleps2_0x100_100::has_adu_100h_messagechecksum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Adu_controleps2_0x100_100::set_has_adu_100h_messagechecksum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Adu_controleps2_0x100_100::clear_has_adu_100h_messagechecksum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Adu_controleps2_0x100_100::clear_adu_100h_messagechecksum() {
  adu_100h_messagechecksum_ = 0;
  clear_has_adu_100h_messagechecksum();
}
inline ::google::protobuf::int32 Adu_controleps2_0x100_100::adu_100h_messagechecksum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_100h_messagechecksum)
  return adu_100h_messagechecksum_;
}
inline void Adu_controleps2_0x100_100::set_adu_100h_messagechecksum(::google::protobuf::int32 value) {
  set_has_adu_100h_messagechecksum();
  adu_100h_messagechecksum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_100h_messagechecksum)
}

// optional int32 adu_100h_messagecounter = 2;
inline bool Adu_controleps2_0x100_100::has_adu_100h_messagecounter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Adu_controleps2_0x100_100::set_has_adu_100h_messagecounter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Adu_controleps2_0x100_100::clear_has_adu_100h_messagecounter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Adu_controleps2_0x100_100::clear_adu_100h_messagecounter() {
  adu_100h_messagecounter_ = 0;
  clear_has_adu_100h_messagecounter();
}
inline ::google::protobuf::int32 Adu_controleps2_0x100_100::adu_100h_messagecounter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_100h_messagecounter)
  return adu_100h_messagecounter_;
}
inline void Adu_controleps2_0x100_100::set_adu_100h_messagecounter(::google::protobuf::int32 value) {
  set_has_adu_100h_messagecounter();
  adu_100h_messagecounter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_100h_messagecounter)
}

// optional int32 adu_ctrsteeringwheelanglespeed = 3;
inline bool Adu_controleps2_0x100_100::has_adu_ctrsteeringwheelanglespeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Adu_controleps2_0x100_100::set_has_adu_ctrsteeringwheelanglespeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Adu_controleps2_0x100_100::clear_has_adu_ctrsteeringwheelanglespeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Adu_controleps2_0x100_100::clear_adu_ctrsteeringwheelanglespeed() {
  adu_ctrsteeringwheelanglespeed_ = 0;
  clear_has_adu_ctrsteeringwheelanglespeed();
}
inline ::google::protobuf::int32 Adu_controleps2_0x100_100::adu_ctrsteeringwheelanglespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_ctrsteeringwheelanglespeed)
  return adu_ctrsteeringwheelanglespeed_;
}
inline void Adu_controleps2_0x100_100::set_adu_ctrsteeringwheelanglespeed(::google::protobuf::int32 value) {
  set_has_adu_ctrsteeringwheelanglespeed();
  adu_ctrsteeringwheelanglespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_ctrsteeringwheelanglespeed)
}

// optional double adu_controsteeringwheelangle = 4;
inline bool Adu_controleps2_0x100_100::has_adu_controsteeringwheelangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Adu_controleps2_0x100_100::set_has_adu_controsteeringwheelangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Adu_controleps2_0x100_100::clear_has_adu_controsteeringwheelangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Adu_controleps2_0x100_100::clear_adu_controsteeringwheelangle() {
  adu_controsteeringwheelangle_ = 0;
  clear_has_adu_controsteeringwheelangle();
}
inline double Adu_controleps2_0x100_100::adu_controsteeringwheelangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_controsteeringwheelangle)
  return adu_controsteeringwheelangle_;
}
inline void Adu_controleps2_0x100_100::set_adu_controsteeringwheelangle(double value) {
  set_has_adu_controsteeringwheelangle();
  adu_controsteeringwheelangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_controsteeringwheelangle)
}

// optional .jmc_auto.canbus.Adu_controleps2_0x100_100.Adu_controepsenableType adu_controepsenable = 5;
inline bool Adu_controleps2_0x100_100::has_adu_controepsenable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Adu_controleps2_0x100_100::set_has_adu_controepsenable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Adu_controleps2_0x100_100::clear_has_adu_controepsenable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Adu_controleps2_0x100_100::clear_adu_controepsenable() {
  adu_controepsenable_ = 0;
  clear_has_adu_controepsenable();
}
inline ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType Adu_controleps2_0x100_100::adu_controepsenable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_controepsenable)
  return static_cast< ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType >(adu_controepsenable_);
}
inline void Adu_controleps2_0x100_100::set_adu_controepsenable(::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType value) {
  assert(::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType_IsValid(value));
  set_has_adu_controepsenable();
  adu_controepsenable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_controleps2_0x100_100.adu_controepsenable)
}

// -------------------------------------------------------------------

// Gw_mcu_output_0x225_225

// optional int32 checksum_0x225 = 1;
inline bool Gw_mcu_output_0x225_225::has_checksum_0x225() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_checksum_0x225() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_mcu_output_0x225_225::clear_has_checksum_0x225() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_mcu_output_0x225_225::clear_checksum_0x225() {
  checksum_0x225_ = 0;
  clear_has_checksum_0x225();
}
inline ::google::protobuf::int32 Gw_mcu_output_0x225_225::checksum_0x225() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.checksum_0x225)
  return checksum_0x225_;
}
inline void Gw_mcu_output_0x225_225::set_checksum_0x225(::google::protobuf::int32 value) {
  set_has_checksum_0x225();
  checksum_0x225_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.checksum_0x225)
}

// optional int32 rolling_counter_0x225 = 2;
inline bool Gw_mcu_output_0x225_225::has_rolling_counter_0x225() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_rolling_counter_0x225() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_mcu_output_0x225_225::clear_has_rolling_counter_0x225() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_mcu_output_0x225_225::clear_rolling_counter_0x225() {
  rolling_counter_0x225_ = 0;
  clear_has_rolling_counter_0x225();
}
inline ::google::protobuf::int32 Gw_mcu_output_0x225_225::rolling_counter_0x225() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.rolling_counter_0x225)
  return rolling_counter_0x225_;
}
inline void Gw_mcu_output_0x225_225::set_rolling_counter_0x225(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x225();
  rolling_counter_0x225_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.rolling_counter_0x225)
}

// optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_work_stsType mcu_work_sts = 3;
inline bool Gw_mcu_output_0x225_225::has_mcu_work_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_mcu_work_sts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_mcu_output_0x225_225::clear_has_mcu_work_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_mcu_output_0x225_225::clear_mcu_work_sts() {
  mcu_work_sts_ = 0;
  clear_has_mcu_work_sts();
}
inline ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType Gw_mcu_output_0x225_225::mcu_work_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_work_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType >(mcu_work_sts_);
}
inline void Gw_mcu_output_0x225_225::set_mcu_work_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType value) {
  assert(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType_IsValid(value));
  set_has_mcu_work_sts();
  mcu_work_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_work_sts)
}

// optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_ctrmode_stsType mcu_ctrmode_sts = 4;
inline bool Gw_mcu_output_0x225_225::has_mcu_ctrmode_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_mcu_ctrmode_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_mcu_output_0x225_225::clear_has_mcu_ctrmode_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_mcu_output_0x225_225::clear_mcu_ctrmode_sts() {
  mcu_ctrmode_sts_ = 0;
  clear_has_mcu_ctrmode_sts();
}
inline ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType Gw_mcu_output_0x225_225::mcu_ctrmode_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_ctrmode_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType >(mcu_ctrmode_sts_);
}
inline void Gw_mcu_output_0x225_225::set_mcu_ctrmode_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType value) {
  assert(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_IsValid(value));
  set_has_mcu_ctrmode_sts();
  mcu_ctrmode_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_ctrmode_sts)
}

// optional .jmc_auto.canbus.Gw_mcu_output_0x225_225.Mcu_capacitor_stsType mcu_capacitor_sts = 5;
inline bool Gw_mcu_output_0x225_225::has_mcu_capacitor_sts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_mcu_capacitor_sts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_mcu_output_0x225_225::clear_has_mcu_capacitor_sts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_mcu_output_0x225_225::clear_mcu_capacitor_sts() {
  mcu_capacitor_sts_ = 0;
  clear_has_mcu_capacitor_sts();
}
inline ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType Gw_mcu_output_0x225_225::mcu_capacitor_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_capacitor_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType >(mcu_capacitor_sts_);
}
inline void Gw_mcu_output_0x225_225::set_mcu_capacitor_sts(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType value) {
  assert(::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_IsValid(value));
  set_has_mcu_capacitor_sts();
  mcu_capacitor_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_capacitor_sts)
}

// optional int32 mcu_spd_meas = 6;
inline bool Gw_mcu_output_0x225_225::has_mcu_spd_meas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_mcu_spd_meas() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_mcu_output_0x225_225::clear_has_mcu_spd_meas() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_mcu_output_0x225_225::clear_mcu_spd_meas() {
  mcu_spd_meas_ = 0;
  clear_has_mcu_spd_meas();
}
inline ::google::protobuf::int32 Gw_mcu_output_0x225_225::mcu_spd_meas() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_spd_meas)
  return mcu_spd_meas_;
}
inline void Gw_mcu_output_0x225_225::set_mcu_spd_meas(::google::protobuf::int32 value) {
  set_has_mcu_spd_meas();
  mcu_spd_meas_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_spd_meas)
}

// optional int32 mcu_trq_meas = 7;
inline bool Gw_mcu_output_0x225_225::has_mcu_trq_meas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_mcu_output_0x225_225::set_has_mcu_trq_meas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_mcu_output_0x225_225::clear_has_mcu_trq_meas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_mcu_output_0x225_225::clear_mcu_trq_meas() {
  mcu_trq_meas_ = 0;
  clear_has_mcu_trq_meas();
}
inline ::google::protobuf::int32 Gw_mcu_output_0x225_225::mcu_trq_meas() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_trq_meas)
  return mcu_trq_meas_;
}
inline void Gw_mcu_output_0x225_225::set_mcu_trq_meas(::google::protobuf::int32 value) {
  set_has_mcu_trq_meas();
  mcu_trq_meas_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mcu_output_0x225_225.mcu_trq_meas)
}

// -------------------------------------------------------------------

// Gw_abs_sts_0x221_221

// optional int32 checksum_0x221 = 1;
inline bool Gw_abs_sts_0x221_221::has_checksum_0x221() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_checksum_0x221() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_abs_sts_0x221_221::clear_has_checksum_0x221() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_abs_sts_0x221_221::clear_checksum_0x221() {
  checksum_0x221_ = 0;
  clear_has_checksum_0x221();
}
inline ::google::protobuf::int32 Gw_abs_sts_0x221_221::checksum_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.checksum_0x221)
  return checksum_0x221_;
}
inline void Gw_abs_sts_0x221_221::set_checksum_0x221(::google::protobuf::int32 value) {
  set_has_checksum_0x221();
  checksum_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.checksum_0x221)
}

// optional int32 rolling_counter_0x221 = 2;
inline bool Gw_abs_sts_0x221_221::has_rolling_counter_0x221() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_rolling_counter_0x221() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_abs_sts_0x221_221::clear_has_rolling_counter_0x221() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_abs_sts_0x221_221::clear_rolling_counter_0x221() {
  rolling_counter_0x221_ = 0;
  clear_has_rolling_counter_0x221();
}
inline ::google::protobuf::int32 Gw_abs_sts_0x221_221::rolling_counter_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.rolling_counter_0x221)
  return rolling_counter_0x221_;
}
inline void Gw_abs_sts_0x221_221::set_rolling_counter_0x221(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x221();
  rolling_counter_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.rolling_counter_0x221)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 3;
inline bool Gw_abs_sts_0x221_221::has_abs_whlmilgfrntlestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_whlmilgfrntlestatus() {
  abs_whlmilgfrntlestatus_ = 0;
  clear_has_abs_whlmilgfrntlestatus();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Gw_abs_sts_0x221_221::abs_whlmilgfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType >(abs_whlmilgfrntlestatus_);
}
inline void Gw_abs_sts_0x221_221::set_abs_whlmilgfrntlestatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value));
  set_has_abs_whlmilgfrntlestatus();
  abs_whlmilgfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntlestatus)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 4;
inline bool Gw_abs_sts_0x221_221::has_abs_whlmilgfrntristatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_whlmilgfrntristatus() {
  abs_whlmilgfrntristatus_ = 0;
  clear_has_abs_whlmilgfrntristatus();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType Gw_abs_sts_0x221_221::abs_whlmilgfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntristatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType >(abs_whlmilgfrntristatus_);
}
inline void Gw_abs_sts_0x221_221::set_abs_whlmilgfrntristatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value));
  set_has_abs_whlmilgfrntristatus();
  abs_whlmilgfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntristatus)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 5;
inline bool Gw_abs_sts_0x221_221::has_abs_vehspdlgtstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_vehspdlgtstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_vehspdlgtstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_vehspdlgtstatus() {
  abs_vehspdlgtstatus_ = 0;
  clear_has_abs_vehspdlgtstatus();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType Gw_abs_sts_0x221_221::abs_vehspdlgtstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspdlgtstatus)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType >(abs_vehspdlgtstatus_);
}
inline void Gw_abs_sts_0x221_221::set_abs_vehspdlgtstatus(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value));
  set_has_abs_vehspdlgtstatus();
  abs_vehspdlgtstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspdlgtstatus)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 6;
inline bool Gw_abs_sts_0x221_221::has_abs_vehspddirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_vehspddirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_vehspddirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_vehspddirection() {
  abs_vehspddirection_ = 0;
  clear_has_abs_vehspddirection();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType Gw_abs_sts_0x221_221::abs_vehspddirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspddirection)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType >(abs_vehspddirection_);
}
inline void Gw_abs_sts_0x221_221::set_abs_vehspddirection(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value));
  set_has_abs_vehspddirection();
  abs_vehspddirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspddirection)
}

// optional double abs_vehspdlgt = 7;
inline bool Gw_abs_sts_0x221_221::has_abs_vehspdlgt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_vehspdlgt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_vehspdlgt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_vehspdlgt() {
  abs_vehspdlgt_ = 0;
  clear_has_abs_vehspdlgt();
}
inline double Gw_abs_sts_0x221_221::abs_vehspdlgt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspdlgt)
  return abs_vehspdlgt_;
}
inline void Gw_abs_sts_0x221_221::set_abs_vehspdlgt(double value) {
  set_has_abs_vehspdlgt();
  abs_vehspdlgt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_vehspdlgt)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 8;
inline bool Gw_abs_sts_0x221_221::has_abs_ebdflgflt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_ebdflgflt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_ebdflgflt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_ebdflgflt() {
  abs_ebdflgflt_ = 0;
  clear_has_abs_ebdflgflt();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType Gw_abs_sts_0x221_221::abs_ebdflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_ebdflgflt)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType >(abs_ebdflgflt_);
}
inline void Gw_abs_sts_0x221_221::set_abs_ebdflgflt(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value));
  set_has_abs_ebdflgflt();
  abs_ebdflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_ebdflgflt)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 9;
inline bool Gw_abs_sts_0x221_221::has_abs_absflgflt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_absflgflt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_absflgflt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_absflgflt() {
  abs_absflgflt_ = 0;
  clear_has_abs_absflgflt();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType Gw_abs_sts_0x221_221::abs_absflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_absflgflt)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType >(abs_absflgflt_);
}
inline void Gw_abs_sts_0x221_221::set_abs_absflgflt(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType_IsValid(value));
  set_has_abs_absflgflt();
  abs_absflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_absflgflt)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 10;
inline bool Gw_abs_sts_0x221_221::has_abs_absctrlactv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_absctrlactv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_absctrlactv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_absctrlactv() {
  abs_absctrlactv_ = 0;
  clear_has_abs_absctrlactv();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType Gw_abs_sts_0x221_221::abs_absctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_absctrlactv)
  return static_cast< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType >(abs_absctrlactv_);
}
inline void Gw_abs_sts_0x221_221::set_abs_absctrlactv(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType value) {
  assert(::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value));
  set_has_abs_absctrlactv();
  abs_absctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_absctrlactv)
}

// optional int32 abs_whlmilgfrntri = 11;
inline bool Gw_abs_sts_0x221_221::has_abs_whlmilgfrntri() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_whlmilgfrntri() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_whlmilgfrntri() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_whlmilgfrntri() {
  abs_whlmilgfrntri_ = 0;
  clear_has_abs_whlmilgfrntri();
}
inline ::google::protobuf::int32 Gw_abs_sts_0x221_221::abs_whlmilgfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntri)
  return abs_whlmilgfrntri_;
}
inline void Gw_abs_sts_0x221_221::set_abs_whlmilgfrntri(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntri();
  abs_whlmilgfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntri)
}

// optional int32 abs_whlmilgfrntle = 12;
inline bool Gw_abs_sts_0x221_221::has_abs_whlmilgfrntle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_abs_sts_0x221_221::set_has_abs_whlmilgfrntle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_abs_sts_0x221_221::clear_has_abs_whlmilgfrntle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_abs_sts_0x221_221::clear_abs_whlmilgfrntle() {
  abs_whlmilgfrntle_ = 0;
  clear_has_abs_whlmilgfrntle();
}
inline ::google::protobuf::int32 Gw_abs_sts_0x221_221::abs_whlmilgfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntle)
  return abs_whlmilgfrntle_;
}
inline void Gw_abs_sts_0x221_221::set_abs_whlmilgfrntle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntle();
  abs_whlmilgfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_abs_sts_0x221_221.abs_whlmilgfrntle)
}

// -------------------------------------------------------------------

// Ibc_status_0x122_122

// optional int32 checksum_0x122 = 1;
inline bool Ibc_status_0x122_122::has_checksum_0x122() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ibc_status_0x122_122::set_has_checksum_0x122() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ibc_status_0x122_122::clear_has_checksum_0x122() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ibc_status_0x122_122::clear_checksum_0x122() {
  checksum_0x122_ = 0;
  clear_has_checksum_0x122();
}
inline ::google::protobuf::int32 Ibc_status_0x122_122::checksum_0x122() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.checksum_0x122)
  return checksum_0x122_;
}
inline void Ibc_status_0x122_122::set_checksum_0x122(::google::protobuf::int32 value) {
  set_has_checksum_0x122();
  checksum_0x122_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.checksum_0x122)
}

// optional int32 rolling_counter_0x122 = 2;
inline bool Ibc_status_0x122_122::has_rolling_counter_0x122() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ibc_status_0x122_122::set_has_rolling_counter_0x122() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ibc_status_0x122_122::clear_has_rolling_counter_0x122() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ibc_status_0x122_122::clear_rolling_counter_0x122() {
  rolling_counter_0x122_ = 0;
  clear_has_rolling_counter_0x122();
}
inline ::google::protobuf::int32 Ibc_status_0x122_122::rolling_counter_0x122() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.rolling_counter_0x122)
  return rolling_counter_0x122_;
}
inline void Ibc_status_0x122_122::set_rolling_counter_0x122(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x122();
  rolling_counter_0x122_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.rolling_counter_0x122)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_parkrelease_reqType ibc_parkrelease_req = 3;
inline bool Ibc_status_0x122_122::has_ibc_parkrelease_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_parkrelease_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_parkrelease_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ibc_status_0x122_122::clear_ibc_parkrelease_req() {
  ibc_parkrelease_req_ = 0;
  clear_has_ibc_parkrelease_req();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType Ibc_status_0x122_122::ibc_parkrelease_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_parkrelease_req)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType >(ibc_parkrelease_req_);
}
inline void Ibc_status_0x122_122::set_ibc_parkrelease_req(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType_IsValid(value));
  set_has_ibc_parkrelease_req();
  ibc_parkrelease_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_parkrelease_req)
}

// optional int32 ibc_faultcode = 4;
inline bool Ibc_status_0x122_122::has_ibc_faultcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_faultcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_faultcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ibc_status_0x122_122::clear_ibc_faultcode() {
  ibc_faultcode_ = 0;
  clear_has_ibc_faultcode();
}
inline ::google::protobuf::int32 Ibc_status_0x122_122::ibc_faultcode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_faultcode)
  return ibc_faultcode_;
}
inline void Ibc_status_0x122_122::set_ibc_faultcode(::google::protobuf::int32 value) {
  set_has_ibc_faultcode();
  ibc_faultcode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_faultcode)
}

// optional double ibc_brkpedalrawposition = 5;
inline bool Ibc_status_0x122_122::has_ibc_brkpedalrawposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_brkpedalrawposition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_brkpedalrawposition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ibc_status_0x122_122::clear_ibc_brkpedalrawposition() {
  ibc_brkpedalrawposition_ = 0;
  clear_has_ibc_brkpedalrawposition();
}
inline double Ibc_status_0x122_122::ibc_brkpedalrawposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brkpedalrawposition)
  return ibc_brkpedalrawposition_;
}
inline void Ibc_status_0x122_122::set_ibc_brkpedalrawposition(double value) {
  set_has_ibc_brkpedalrawposition();
  ibc_brkpedalrawposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brkpedalrawposition)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_mastercylinderpressvalidType ibc_mastercylinderpressvalid = 6;
inline bool Ibc_status_0x122_122::has_ibc_mastercylinderpressvalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_mastercylinderpressvalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_mastercylinderpressvalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ibc_status_0x122_122::clear_ibc_mastercylinderpressvalid() {
  ibc_mastercylinderpressvalid_ = 0;
  clear_has_ibc_mastercylinderpressvalid();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType Ibc_status_0x122_122::ibc_mastercylinderpressvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_mastercylinderpressvalid)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType >(ibc_mastercylinderpressvalid_);
}
inline void Ibc_status_0x122_122::set_ibc_mastercylinderpressvalid(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_IsValid(value));
  set_has_ibc_mastercylinderpressvalid();
  ibc_mastercylinderpressvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_mastercylinderpressvalid)
}

// optional int32 ibc_mastercylinderpress = 7;
inline bool Ibc_status_0x122_122::has_ibc_mastercylinderpress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_mastercylinderpress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_mastercylinderpress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ibc_status_0x122_122::clear_ibc_mastercylinderpress() {
  ibc_mastercylinderpress_ = 0;
  clear_has_ibc_mastercylinderpress();
}
inline ::google::protobuf::int32 Ibc_status_0x122_122::ibc_mastercylinderpress() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_mastercylinderpress)
  return ibc_mastercylinderpress_;
}
inline void Ibc_status_0x122_122::set_ibc_mastercylinderpress(::google::protobuf::int32 value) {
  set_has_ibc_mastercylinderpress();
  ibc_mastercylinderpress_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_mastercylinderpress)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakeactiveType ibc_brakeactive = 8;
inline bool Ibc_status_0x122_122::has_ibc_brakeactive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_brakeactive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_brakeactive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ibc_status_0x122_122::clear_ibc_brakeactive() {
  ibc_brakeactive_ = 0;
  clear_has_ibc_brakeactive();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType Ibc_status_0x122_122::ibc_brakeactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakeactive)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType >(ibc_brakeactive_);
}
inline void Ibc_status_0x122_122::set_ibc_brakeactive(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType_IsValid(value));
  set_has_ibc_brakeactive();
  ibc_brakeactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakeactive)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakereqavailabeType ibc_brakereqavailabe = 9;
inline bool Ibc_status_0x122_122::has_ibc_brakereqavailabe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_brakereqavailabe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_brakereqavailabe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ibc_status_0x122_122::clear_ibc_brakereqavailabe() {
  ibc_brakereqavailabe_ = 0;
  clear_has_ibc_brakereqavailabe();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType Ibc_status_0x122_122::ibc_brakereqavailabe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakereqavailabe)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType >(ibc_brakereqavailabe_);
}
inline void Ibc_status_0x122_122::set_ibc_brakereqavailabe(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType_IsValid(value));
  set_has_ibc_brakereqavailabe();
  ibc_brakereqavailabe_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakereqavailabe)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_brakepressurereqackType ibc_brakepressurereqack = 10;
inline bool Ibc_status_0x122_122::has_ibc_brakepressurereqack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_brakepressurereqack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_brakepressurereqack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ibc_status_0x122_122::clear_ibc_brakepressurereqack() {
  ibc_brakepressurereqack_ = 0;
  clear_has_ibc_brakepressurereqack();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType Ibc_status_0x122_122::ibc_brakepressurereqack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakepressurereqack)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType >(ibc_brakepressurereqack_);
}
inline void Ibc_status_0x122_122::set_ibc_brakepressurereqack(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType_IsValid(value));
  set_has_ibc_brakepressurereqack();
  ibc_brakepressurereqack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_brakepressurereqack)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_controlstatusType ibc_controlstatus = 11;
inline bool Ibc_status_0x122_122::has_ibc_controlstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_controlstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_controlstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ibc_status_0x122_122::clear_ibc_controlstatus() {
  ibc_controlstatus_ = 0;
  clear_has_ibc_controlstatus();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType Ibc_status_0x122_122::ibc_controlstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_controlstatus)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType >(ibc_controlstatus_);
}
inline void Ibc_status_0x122_122::set_ibc_controlstatus(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType_IsValid(value));
  set_has_ibc_controlstatus();
  ibc_controlstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_controlstatus)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_driver_interveneType ibc_driver_intervene = 12;
inline bool Ibc_status_0x122_122::has_ibc_driver_intervene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_driver_intervene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_driver_intervene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ibc_status_0x122_122::clear_ibc_driver_intervene() {
  ibc_driver_intervene_ = 0;
  clear_has_ibc_driver_intervene();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType Ibc_status_0x122_122::ibc_driver_intervene() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_driver_intervene)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType >(ibc_driver_intervene_);
}
inline void Ibc_status_0x122_122::set_ibc_driver_intervene(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType_IsValid(value));
  set_has_ibc_driver_intervene();
  ibc_driver_intervene_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_driver_intervene)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122.Ibc_systemstatusType ibc_systemstatus = 13;
inline bool Ibc_status_0x122_122::has_ibc_systemstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ibc_status_0x122_122::set_has_ibc_systemstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ibc_status_0x122_122::clear_has_ibc_systemstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ibc_status_0x122_122::clear_ibc_systemstatus() {
  ibc_systemstatus_ = 0;
  clear_has_ibc_systemstatus();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType Ibc_status_0x122_122::ibc_systemstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status_0x122_122.ibc_systemstatus)
  return static_cast< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType >(ibc_systemstatus_);
}
inline void Ibc_status_0x122_122::set_ibc_systemstatus(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType value) {
  assert(::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType_IsValid(value));
  set_has_ibc_systemstatus();
  ibc_systemstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status_0x122_122.ibc_systemstatus)
}

// -------------------------------------------------------------------

// Gw_vcu_whltq_0x107_107

// optional int32 checksum_0x107 = 1;
inline bool Gw_vcu_whltq_0x107_107::has_checksum_0x107() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_checksum_0x107() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_checksum_0x107() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_whltq_0x107_107::clear_checksum_0x107() {
  checksum_0x107_ = 0;
  clear_has_checksum_0x107();
}
inline ::google::protobuf::int32 Gw_vcu_whltq_0x107_107::checksum_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.checksum_0x107)
  return checksum_0x107_;
}
inline void Gw_vcu_whltq_0x107_107::set_checksum_0x107(::google::protobuf::int32 value) {
  set_has_checksum_0x107();
  checksum_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.checksum_0x107)
}

// optional int32 rolling_counter_0x107 = 2;
inline bool Gw_vcu_whltq_0x107_107::has_rolling_counter_0x107() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_rolling_counter_0x107() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_rolling_counter_0x107() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_whltq_0x107_107::clear_rolling_counter_0x107() {
  rolling_counter_0x107_ = 0;
  clear_has_rolling_counter_0x107();
}
inline ::google::protobuf::int32 Gw_vcu_whltq_0x107_107::rolling_counter_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.rolling_counter_0x107)
  return rolling_counter_0x107_;
}
inline void Gw_vcu_whltq_0x107_107::set_rolling_counter_0x107(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x107();
  rolling_counter_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.rolling_counter_0x107)
}

// optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_kickdownType vcu_kickdown = 3;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_kickdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_kickdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_kickdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_kickdown() {
  vcu_kickdown_ = 0;
  clear_has_vcu_kickdown();
}
inline ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType Gw_vcu_whltq_0x107_107::vcu_kickdown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_kickdown)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType >(vcu_kickdown_);
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_kickdown(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType value) {
  assert(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType_IsValid(value));
  set_has_vcu_kickdown();
  vcu_kickdown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_kickdown)
}

// optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_accpedalratioerrorType vcu_accpedalratioerror = 4;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_accpedalratioerror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_accpedalratioerror() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_accpedalratioerror() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_accpedalratioerror() {
  vcu_accpedalratioerror_ = 0;
  clear_has_vcu_accpedalratioerror();
}
inline ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType Gw_vcu_whltq_0x107_107::vcu_accpedalratioerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accpedalratioerror)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType >(vcu_accpedalratioerror_);
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_accpedalratioerror(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType value) {
  assert(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_IsValid(value));
  set_has_vcu_accpedalratioerror();
  vcu_accpedalratioerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accpedalratioerror)
}

// optional double vcu_accpedalratio = 5;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_accpedalratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_accpedalratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_accpedalratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_accpedalratio() {
  vcu_accpedalratio_ = 0;
  clear_has_vcu_accpedalratio();
}
inline double Gw_vcu_whltq_0x107_107::vcu_accpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accpedalratio)
  return vcu_accpedalratio_;
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_accpedalratio(double value) {
  set_has_vcu_accpedalratio();
  vcu_accpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accpedalratio)
}

// optional double vcu_accrawpedalratio = 6;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_accrawpedalratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_accrawpedalratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_accrawpedalratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_accrawpedalratio() {
  vcu_accrawpedalratio_ = 0;
  clear_has_vcu_accrawpedalratio();
}
inline double Gw_vcu_whltq_0x107_107::vcu_accrawpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accrawpedalratio)
  return vcu_accrawpedalratio_;
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_accrawpedalratio(double value) {
  set_has_vcu_accrawpedalratio();
  vcu_accrawpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_accrawpedalratio)
}

// optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107.Vcu_brkpedalstasusType vcu_brkpedalstasus = 7;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_brkpedalstasus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_brkpedalstasus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_brkpedalstasus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_brkpedalstasus() {
  vcu_brkpedalstasus_ = 0;
  clear_has_vcu_brkpedalstasus();
}
inline ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType Gw_vcu_whltq_0x107_107::vcu_brkpedalstasus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_brkpedalstasus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType >(vcu_brkpedalstasus_);
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_brkpedalstasus(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_IsValid(value));
  set_has_vcu_brkpedalstasus();
  vcu_brkpedalstasus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_brkpedalstasus)
}

// optional int32 vcu_minindicatedtorqwhl = 8;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_minindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_minindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_minindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_minindicatedtorqwhl() {
  vcu_minindicatedtorqwhl_ = 0;
  clear_has_vcu_minindicatedtorqwhl();
}
inline ::google::protobuf::int32 Gw_vcu_whltq_0x107_107::vcu_minindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_minindicatedtorqwhl)
  return vcu_minindicatedtorqwhl_;
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_minindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_vcu_minindicatedtorqwhl();
  vcu_minindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_minindicatedtorqwhl)
}

// optional int32 vcu_maxindicatedtorqwhl = 9;
inline bool Gw_vcu_whltq_0x107_107::has_vcu_maxindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_vcu_whltq_0x107_107::set_has_vcu_maxindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_vcu_whltq_0x107_107::clear_has_vcu_maxindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_vcu_whltq_0x107_107::clear_vcu_maxindicatedtorqwhl() {
  vcu_maxindicatedtorqwhl_ = 0;
  clear_has_vcu_maxindicatedtorqwhl();
}
inline ::google::protobuf::int32 Gw_vcu_whltq_0x107_107::vcu_maxindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_maxindicatedtorqwhl)
  return vcu_maxindicatedtorqwhl_;
}
inline void Gw_vcu_whltq_0x107_107::set_vcu_maxindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_vcu_maxindicatedtorqwhl();
  vcu_maxindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_whltq_0x107_107.vcu_maxindicatedtorqwhl)
}

// -------------------------------------------------------------------

// Bcm_bodysts_0x344_344

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_brakelampstatusType bcm_brakelampstatus = 1;
inline bool Bcm_bodysts_0x344_344::has_bcm_brakelampstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_brakelampstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_brakelampstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_brakelampstatus() {
  bcm_brakelampstatus_ = 0;
  clear_has_bcm_brakelampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType Bcm_bodysts_0x344_344::bcm_brakelampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_brakelampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType >(bcm_brakelampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_brakelampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_IsValid(value));
  set_has_bcm_brakelampstatus();
  bcm_brakelampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_brakelampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_rearfoglampstatusType bcm_rearfoglampstatus = 2;
inline bool Bcm_bodysts_0x344_344::has_bcm_rearfoglampstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_rearfoglampstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_rearfoglampstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_rearfoglampstatus() {
  bcm_rearfoglampstatus_ = 0;
  clear_has_bcm_rearfoglampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType Bcm_bodysts_0x344_344::bcm_rearfoglampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_rearfoglampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType >(bcm_rearfoglampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_rearfoglampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_IsValid(value));
  set_has_bcm_rearfoglampstatus();
  bcm_rearfoglampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_rearfoglampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_frontfoglampstatusType bcm_frontfoglampstatus = 3;
inline bool Bcm_bodysts_0x344_344::has_bcm_frontfoglampstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_frontfoglampstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_frontfoglampstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_frontfoglampstatus() {
  bcm_frontfoglampstatus_ = 0;
  clear_has_bcm_frontfoglampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType Bcm_bodysts_0x344_344::bcm_frontfoglampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_frontfoglampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType >(bcm_frontfoglampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_frontfoglampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_IsValid(value));
  set_has_bcm_frontfoglampstatus();
  bcm_frontfoglampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_frontfoglampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_washerstatusType bcm_washerstatus = 4;
inline bool Bcm_bodysts_0x344_344::has_bcm_washerstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_washerstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_washerstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_washerstatus() {
  bcm_washerstatus_ = 0;
  clear_has_bcm_washerstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType Bcm_bodysts_0x344_344::bcm_washerstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_washerstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType >(bcm_washerstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_washerstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType_IsValid(value));
  set_has_bcm_washerstatus();
  bcm_washerstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_washerstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_wiperstatusType bcm_wiperstatus = 5;
inline bool Bcm_bodysts_0x344_344::has_bcm_wiperstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_wiperstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_wiperstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_wiperstatus() {
  bcm_wiperstatus_ = 0;
  clear_has_bcm_wiperstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType Bcm_bodysts_0x344_344::bcm_wiperstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_wiperstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType >(bcm_wiperstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_wiperstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType_IsValid(value));
  set_has_bcm_wiperstatus();
  bcm_wiperstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_wiperstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_doorlockfeedbackType bcm_doorlockfeedback = 6;
inline bool Bcm_bodysts_0x344_344::has_bcm_doorlockfeedback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_doorlockfeedback() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_doorlockfeedback() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_doorlockfeedback() {
  bcm_doorlockfeedback_ = 0;
  clear_has_bcm_doorlockfeedback();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType Bcm_bodysts_0x344_344::bcm_doorlockfeedback() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_doorlockfeedback)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType >(bcm_doorlockfeedback_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_doorlockfeedback(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_IsValid(value));
  set_has_bcm_doorlockfeedback();
  bcm_doorlockfeedback_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_doorlockfeedback)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_hornstatusType bcm_hornstatus = 7;
inline bool Bcm_bodysts_0x344_344::has_bcm_hornstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_hornstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_hornstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_hornstatus() {
  bcm_hornstatus_ = 0;
  clear_has_bcm_hornstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType Bcm_bodysts_0x344_344::bcm_hornstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_hornstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType >(bcm_hornstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_hornstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType_IsValid(value));
  set_has_bcm_hornstatus();
  bcm_hornstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_hornstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_highbeamlampstatusType bcm_highbeamlampstatus = 8;
inline bool Bcm_bodysts_0x344_344::has_bcm_highbeamlampstatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_highbeamlampstatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_highbeamlampstatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_highbeamlampstatus() {
  bcm_highbeamlampstatus_ = 0;
  clear_has_bcm_highbeamlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType Bcm_bodysts_0x344_344::bcm_highbeamlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_highbeamlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType >(bcm_highbeamlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_highbeamlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_IsValid(value));
  set_has_bcm_highbeamlampstatus();
  bcm_highbeamlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_highbeamlampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_lowbeamlampstatusType bcm_lowbeamlampstatus = 9;
inline bool Bcm_bodysts_0x344_344::has_bcm_lowbeamlampstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_lowbeamlampstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_lowbeamlampstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_lowbeamlampstatus() {
  bcm_lowbeamlampstatus_ = 0;
  clear_has_bcm_lowbeamlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType Bcm_bodysts_0x344_344::bcm_lowbeamlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_lowbeamlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType >(bcm_lowbeamlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_lowbeamlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_IsValid(value));
  set_has_bcm_lowbeamlampstatus();
  bcm_lowbeamlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_lowbeamlampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_positionlampstatusType bcm_positionlampstatus = 10;
inline bool Bcm_bodysts_0x344_344::has_bcm_positionlampstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_positionlampstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_positionlampstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_positionlampstatus() {
  bcm_positionlampstatus_ = 0;
  clear_has_bcm_positionlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType Bcm_bodysts_0x344_344::bcm_positionlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_positionlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType >(bcm_positionlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_positionlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_IsValid(value));
  set_has_bcm_positionlampstatus();
  bcm_positionlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_positionlampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_hazardlampstatusType bcm_hazardlampstatus = 11;
inline bool Bcm_bodysts_0x344_344::has_bcm_hazardlampstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_hazardlampstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_hazardlampstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_hazardlampstatus() {
  bcm_hazardlampstatus_ = 0;
  clear_has_bcm_hazardlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType Bcm_bodysts_0x344_344::bcm_hazardlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_hazardlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType >(bcm_hazardlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_hazardlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_IsValid(value));
  set_has_bcm_hazardlampstatus();
  bcm_hazardlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_hazardlampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_rightturnlampstatusType bcm_rightturnlampstatus = 12;
inline bool Bcm_bodysts_0x344_344::has_bcm_rightturnlampstatus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_rightturnlampstatus() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_rightturnlampstatus() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_rightturnlampstatus() {
  bcm_rightturnlampstatus_ = 0;
  clear_has_bcm_rightturnlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType Bcm_bodysts_0x344_344::bcm_rightturnlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_rightturnlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType >(bcm_rightturnlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_rightturnlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_IsValid(value));
  set_has_bcm_rightturnlampstatus();
  bcm_rightturnlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_rightturnlampstatus)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344.Bcm_leftturnlampstatusType bcm_leftturnlampstatus = 13;
inline bool Bcm_bodysts_0x344_344::has_bcm_leftturnlampstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Bcm_bodysts_0x344_344::set_has_bcm_leftturnlampstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Bcm_bodysts_0x344_344::clear_has_bcm_leftturnlampstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Bcm_bodysts_0x344_344::clear_bcm_leftturnlampstatus() {
  bcm_leftturnlampstatus_ = 0;
  clear_has_bcm_leftturnlampstatus();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType Bcm_bodysts_0x344_344::bcm_leftturnlampstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_leftturnlampstatus)
  return static_cast< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType >(bcm_leftturnlampstatus_);
}
inline void Bcm_bodysts_0x344_344::set_bcm_leftturnlampstatus(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType value) {
  assert(::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_IsValid(value));
  set_has_bcm_leftturnlampstatus();
  bcm_leftturnlampstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Bcm_bodysts_0x344_344.bcm_leftturnlampstatus)
}

// -------------------------------------------------------------------

// Gw_bms_display_0x323_323

// optional int32 checksum_0x323 = 1;
inline bool Gw_bms_display_0x323_323::has_checksum_0x323() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_checksum_0x323() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_bms_display_0x323_323::clear_has_checksum_0x323() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_bms_display_0x323_323::clear_checksum_0x323() {
  checksum_0x323_ = 0;
  clear_has_checksum_0x323();
}
inline ::google::protobuf::int32 Gw_bms_display_0x323_323::checksum_0x323() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.checksum_0x323)
  return checksum_0x323_;
}
inline void Gw_bms_display_0x323_323::set_checksum_0x323(::google::protobuf::int32 value) {
  set_has_checksum_0x323();
  checksum_0x323_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.checksum_0x323)
}

// optional int32 rolling_counter_0x323 = 2;
inline bool Gw_bms_display_0x323_323::has_rolling_counter_0x323() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_rolling_counter_0x323() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_bms_display_0x323_323::clear_has_rolling_counter_0x323() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_bms_display_0x323_323::clear_rolling_counter_0x323() {
  rolling_counter_0x323_ = 0;
  clear_has_rolling_counter_0x323();
}
inline ::google::protobuf::int32 Gw_bms_display_0x323_323::rolling_counter_0x323() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.rolling_counter_0x323)
  return rolling_counter_0x323_;
}
inline void Gw_bms_display_0x323_323::set_rolling_counter_0x323(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x323();
  rolling_counter_0x323_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.rolling_counter_0x323)
}

// optional double bms_consumeq_est = 3;
inline bool Gw_bms_display_0x323_323::has_bms_consumeq_est() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_bms_consumeq_est() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_bms_display_0x323_323::clear_has_bms_consumeq_est() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_bms_display_0x323_323::clear_bms_consumeq_est() {
  bms_consumeq_est_ = 0;
  clear_has_bms_consumeq_est();
}
inline double Gw_bms_display_0x323_323::bms_consumeq_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_consumeq_est)
  return bms_consumeq_est_;
}
inline void Gw_bms_display_0x323_323::set_bms_consumeq_est(double value) {
  set_has_bms_consumeq_est();
  bms_consumeq_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_consumeq_est)
}

// optional double bms_availableeq_est = 4;
inline bool Gw_bms_display_0x323_323::has_bms_availableeq_est() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_bms_availableeq_est() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_bms_display_0x323_323::clear_has_bms_availableeq_est() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_bms_display_0x323_323::clear_bms_availableeq_est() {
  bms_availableeq_est_ = 0;
  clear_has_bms_availableeq_est();
}
inline double Gw_bms_display_0x323_323::bms_availableeq_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_availableeq_est)
  return bms_availableeq_est_;
}
inline void Gw_bms_display_0x323_323::set_bms_availableeq_est(double value) {
  set_has_bms_availableeq_est();
  bms_availableeq_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_availableeq_est)
}

// optional double bms_soh_est = 5;
inline bool Gw_bms_display_0x323_323::has_bms_soh_est() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_bms_soh_est() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_bms_display_0x323_323::clear_has_bms_soh_est() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_bms_display_0x323_323::clear_bms_soh_est() {
  bms_soh_est_ = 0;
  clear_has_bms_soh_est();
}
inline double Gw_bms_display_0x323_323::bms_soh_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_soh_est)
  return bms_soh_est_;
}
inline void Gw_bms_display_0x323_323::set_bms_soh_est(double value) {
  set_has_bms_soh_est();
  bms_soh_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_soh_est)
}

// optional double bms_socdisplay_est = 6;
inline bool Gw_bms_display_0x323_323::has_bms_socdisplay_est() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_bms_display_0x323_323::set_has_bms_socdisplay_est() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_bms_display_0x323_323::clear_has_bms_socdisplay_est() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_bms_display_0x323_323::clear_bms_socdisplay_est() {
  bms_socdisplay_est_ = 0;
  clear_has_bms_socdisplay_est();
}
inline double Gw_bms_display_0x323_323::bms_socdisplay_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_socdisplay_est)
  return bms_socdisplay_est_;
}
inline void Gw_bms_display_0x323_323::set_bms_socdisplay_est(double value) {
  set_has_bms_socdisplay_est();
  bms_socdisplay_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_display_0x323_323.bms_socdisplay_est)
}

// -------------------------------------------------------------------

// Adu_bodycontrol_0x333_333

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_rearfoglampcontrolType adu_rearfoglampcontrol = 1;
inline bool Adu_bodycontrol_0x333_333::has_adu_rearfoglampcontrol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_rearfoglampcontrol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_rearfoglampcontrol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_rearfoglampcontrol() {
  adu_rearfoglampcontrol_ = 0;
  clear_has_adu_rearfoglampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType Adu_bodycontrol_0x333_333::adu_rearfoglampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_rearfoglampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType >(adu_rearfoglampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_rearfoglampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_IsValid(value));
  set_has_adu_rearfoglampcontrol();
  adu_rearfoglampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_rearfoglampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_frontfoglampcontrolType adu_frontfoglampcontrol = 2;
inline bool Adu_bodycontrol_0x333_333::has_adu_frontfoglampcontrol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_frontfoglampcontrol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_frontfoglampcontrol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_frontfoglampcontrol() {
  adu_frontfoglampcontrol_ = 0;
  clear_has_adu_frontfoglampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType Adu_bodycontrol_0x333_333::adu_frontfoglampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_frontfoglampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType >(adu_frontfoglampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_frontfoglampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_IsValid(value));
  set_has_adu_frontfoglampcontrol();
  adu_frontfoglampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_frontfoglampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_washercontrolType adu_washercontrol = 3;
inline bool Adu_bodycontrol_0x333_333::has_adu_washercontrol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_washercontrol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_washercontrol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_washercontrol() {
  adu_washercontrol_ = 0;
  clear_has_adu_washercontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType Adu_bodycontrol_0x333_333::adu_washercontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_washercontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType >(adu_washercontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_washercontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType_IsValid(value));
  set_has_adu_washercontrol();
  adu_washercontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_washercontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_wipercontrolType adu_wipercontrol = 4;
inline bool Adu_bodycontrol_0x333_333::has_adu_wipercontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_wipercontrol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_wipercontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_wipercontrol() {
  adu_wipercontrol_ = 0;
  clear_has_adu_wipercontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType Adu_bodycontrol_0x333_333::adu_wipercontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_wipercontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType >(adu_wipercontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_wipercontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType_IsValid(value));
  set_has_adu_wipercontrol();
  adu_wipercontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_wipercontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_doorcontrolType adu_doorcontrol = 5;
inline bool Adu_bodycontrol_0x333_333::has_adu_doorcontrol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_doorcontrol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_doorcontrol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_doorcontrol() {
  adu_doorcontrol_ = 0;
  clear_has_adu_doorcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType Adu_bodycontrol_0x333_333::adu_doorcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_doorcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType >(adu_doorcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_doorcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType_IsValid(value));
  set_has_adu_doorcontrol();
  adu_doorcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_doorcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_horncontrolType adu_horncontrol = 6;
inline bool Adu_bodycontrol_0x333_333::has_adu_horncontrol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_horncontrol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_horncontrol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_horncontrol() {
  adu_horncontrol_ = 0;
  clear_has_adu_horncontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType Adu_bodycontrol_0x333_333::adu_horncontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_horncontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType >(adu_horncontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_horncontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType_IsValid(value));
  set_has_adu_horncontrol();
  adu_horncontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_horncontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_highbeamlampcontrolType adu_highbeamlampcontrol = 7;
inline bool Adu_bodycontrol_0x333_333::has_adu_highbeamlampcontrol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_highbeamlampcontrol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_highbeamlampcontrol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_highbeamlampcontrol() {
  adu_highbeamlampcontrol_ = 0;
  clear_has_adu_highbeamlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType Adu_bodycontrol_0x333_333::adu_highbeamlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_highbeamlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType >(adu_highbeamlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_highbeamlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_IsValid(value));
  set_has_adu_highbeamlampcontrol();
  adu_highbeamlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_highbeamlampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_lowbeamlampcontrolType adu_lowbeamlampcontrol = 8;
inline bool Adu_bodycontrol_0x333_333::has_adu_lowbeamlampcontrol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_lowbeamlampcontrol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_lowbeamlampcontrol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_lowbeamlampcontrol() {
  adu_lowbeamlampcontrol_ = 0;
  clear_has_adu_lowbeamlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType Adu_bodycontrol_0x333_333::adu_lowbeamlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_lowbeamlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType >(adu_lowbeamlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_lowbeamlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_IsValid(value));
  set_has_adu_lowbeamlampcontrol();
  adu_lowbeamlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_lowbeamlampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_positionlampcontrolType adu_positionlampcontrol = 9;
inline bool Adu_bodycontrol_0x333_333::has_adu_positionlampcontrol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_positionlampcontrol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_positionlampcontrol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_positionlampcontrol() {
  adu_positionlampcontrol_ = 0;
  clear_has_adu_positionlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType Adu_bodycontrol_0x333_333::adu_positionlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_positionlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType >(adu_positionlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_positionlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_IsValid(value));
  set_has_adu_positionlampcontrol();
  adu_positionlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_positionlampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_hazardlampcontrolType adu_hazardlampcontrol = 10;
inline bool Adu_bodycontrol_0x333_333::has_adu_hazardlampcontrol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_hazardlampcontrol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_hazardlampcontrol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_hazardlampcontrol() {
  adu_hazardlampcontrol_ = 0;
  clear_has_adu_hazardlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType Adu_bodycontrol_0x333_333::adu_hazardlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_hazardlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType >(adu_hazardlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_hazardlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_IsValid(value));
  set_has_adu_hazardlampcontrol();
  adu_hazardlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_hazardlampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_rightturnlampcontrolType adu_rightturnlampcontrol = 11;
inline bool Adu_bodycontrol_0x333_333::has_adu_rightturnlampcontrol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_rightturnlampcontrol() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_rightturnlampcontrol() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_rightturnlampcontrol() {
  adu_rightturnlampcontrol_ = 0;
  clear_has_adu_rightturnlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType Adu_bodycontrol_0x333_333::adu_rightturnlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_rightturnlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType >(adu_rightturnlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_rightturnlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_IsValid(value));
  set_has_adu_rightturnlampcontrol();
  adu_rightturnlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_rightturnlampcontrol)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333.Adu_leftturnlampcontrolType adu_leftturnlampcontrol = 12;
inline bool Adu_bodycontrol_0x333_333::has_adu_leftturnlampcontrol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Adu_bodycontrol_0x333_333::set_has_adu_leftturnlampcontrol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Adu_bodycontrol_0x333_333::clear_has_adu_leftturnlampcontrol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Adu_bodycontrol_0x333_333::clear_adu_leftturnlampcontrol() {
  adu_leftturnlampcontrol_ = 0;
  clear_has_adu_leftturnlampcontrol();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType Adu_bodycontrol_0x333_333::adu_leftturnlampcontrol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_leftturnlampcontrol)
  return static_cast< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType >(adu_leftturnlampcontrol_);
}
inline void Adu_bodycontrol_0x333_333::set_adu_leftturnlampcontrol(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType value) {
  assert(::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_IsValid(value));
  set_has_adu_leftturnlampcontrol();
  adu_leftturnlampcontrol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Adu_bodycontrol_0x333_333.adu_leftturnlampcontrol)
}

// -------------------------------------------------------------------

// Gw_bms_sts_0x181_181

// optional int32 checksum_0x181 = 1;
inline bool Gw_bms_sts_0x181_181::has_checksum_0x181() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_checksum_0x181() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_bms_sts_0x181_181::clear_has_checksum_0x181() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_bms_sts_0x181_181::clear_checksum_0x181() {
  checksum_0x181_ = 0;
  clear_has_checksum_0x181();
}
inline ::google::protobuf::int32 Gw_bms_sts_0x181_181::checksum_0x181() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.checksum_0x181)
  return checksum_0x181_;
}
inline void Gw_bms_sts_0x181_181::set_checksum_0x181(::google::protobuf::int32 value) {
  set_has_checksum_0x181();
  checksum_0x181_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.checksum_0x181)
}

// optional int32 rolling_counter_0x181 = 2;
inline bool Gw_bms_sts_0x181_181::has_rolling_counter_0x181() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_rolling_counter_0x181() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_bms_sts_0x181_181::clear_has_rolling_counter_0x181() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_bms_sts_0x181_181::clear_rolling_counter_0x181() {
  rolling_counter_0x181_ = 0;
  clear_has_rolling_counter_0x181();
}
inline ::google::protobuf::int32 Gw_bms_sts_0x181_181::rolling_counter_0x181() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.rolling_counter_0x181)
  return rolling_counter_0x181_;
}
inline void Gw_bms_sts_0x181_181::set_rolling_counter_0x181(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x181();
  rolling_counter_0x181_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.rolling_counter_0x181)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_err_levType bms_err_lev = 3;
inline bool Gw_bms_sts_0x181_181::has_bms_err_lev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_err_lev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_err_lev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_err_lev() {
  bms_err_lev_ = 0;
  clear_has_bms_err_lev();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType Gw_bms_sts_0x181_181::bms_err_lev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_err_lev)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType >(bms_err_lev_);
}
inline void Gw_bms_sts_0x181_181::set_bms_err_lev(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType_IsValid(value));
  set_has_bms_err_lev();
  bms_err_lev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_err_lev)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_idu_statusType bms_idu_status = 4;
inline bool Gw_bms_sts_0x181_181::has_bms_idu_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_idu_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_idu_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_idu_status() {
  bms_idu_status_ = 0;
  clear_has_bms_idu_status();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType Gw_bms_sts_0x181_181::bms_idu_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_idu_status)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType >(bms_idu_status_);
}
inline void Gw_bms_sts_0x181_181::set_bms_idu_status(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType_IsValid(value));
  set_has_bms_idu_status();
  bms_idu_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_idu_status)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_batbalance_errType bms_batbalance_err = 5;
inline bool Gw_bms_sts_0x181_181::has_bms_batbalance_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_batbalance_err() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_batbalance_err() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_batbalance_err() {
  bms_batbalance_err_ = 0;
  clear_has_bms_batbalance_err();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType Gw_bms_sts_0x181_181::bms_batbalance_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_batbalance_err)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType >(bms_batbalance_err_);
}
inline void Gw_bms_sts_0x181_181::set_bms_batbalance_err(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType_IsValid(value));
  set_has_bms_batbalance_err();
  bms_batbalance_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_batbalance_err)
}

// optional double bms_socactual_est = 6;
inline bool Gw_bms_sts_0x181_181::has_bms_socactual_est() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_socactual_est() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_socactual_est() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_socactual_est() {
  bms_socactual_est_ = 0;
  clear_has_bms_socactual_est();
}
inline double Gw_bms_sts_0x181_181::bms_socactual_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_socactual_est)
  return bms_socactual_est_;
}
inline void Gw_bms_sts_0x181_181::set_bms_socactual_est(double value) {
  set_has_bms_socactual_est();
  bms_socactual_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_socactual_est)
}

// optional double bms_packcur_meas = 7;
inline bool Gw_bms_sts_0x181_181::has_bms_packcur_meas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_packcur_meas() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_packcur_meas() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_packcur_meas() {
  bms_packcur_meas_ = 0;
  clear_has_bms_packcur_meas();
}
inline double Gw_bms_sts_0x181_181::bms_packcur_meas() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packcur_meas)
  return bms_packcur_meas_;
}
inline void Gw_bms_sts_0x181_181::set_bms_packcur_meas(double value) {
  set_has_bms_packcur_meas();
  bms_packcur_meas_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packcur_meas)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_chg_stsType bms_chg_sts = 8;
inline bool Gw_bms_sts_0x181_181::has_bms_chg_sts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_chg_sts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_chg_sts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_chg_sts() {
  bms_chg_sts_ = 0;
  clear_has_bms_chg_sts();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType Gw_bms_sts_0x181_181::bms_chg_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_chg_sts)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType >(bms_chg_sts_);
}
inline void Gw_bms_sts_0x181_181::set_bms_chg_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType_IsValid(value));
  set_has_bms_chg_sts();
  bms_chg_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_chg_sts)
}

// optional double bms_packvol_meas = 9;
inline bool Gw_bms_sts_0x181_181::has_bms_packvol_meas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_packvol_meas() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_packvol_meas() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_packvol_meas() {
  bms_packvol_meas_ = 0;
  clear_has_bms_packvol_meas();
}
inline double Gw_bms_sts_0x181_181::bms_packvol_meas() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packvol_meas)
  return bms_packvol_meas_;
}
inline void Gw_bms_sts_0x181_181::set_bms_packvol_meas(double value) {
  set_has_bms_packvol_meas();
  bms_packvol_meas_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packvol_meas)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_balance_stsType bms_balance_sts = 10;
inline bool Gw_bms_sts_0x181_181::has_bms_balance_sts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_balance_sts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_balance_sts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_balance_sts() {
  bms_balance_sts_ = 0;
  clear_has_bms_balance_sts();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType Gw_bms_sts_0x181_181::bms_balance_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_balance_sts)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType >(bms_balance_sts_);
}
inline void Gw_bms_sts_0x181_181::set_bms_balance_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType_IsValid(value));
  set_has_bms_balance_sts();
  bms_balance_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_balance_sts)
}

// optional int32 bms_packnum_est = 11;
inline bool Gw_bms_sts_0x181_181::has_bms_packnum_est() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_packnum_est() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_packnum_est() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_packnum_est() {
  bms_packnum_est_ = 0;
  clear_has_bms_packnum_est();
}
inline ::google::protobuf::int32 Gw_bms_sts_0x181_181::bms_packnum_est() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packnum_est)
  return bms_packnum_est_;
}
inline void Gw_bms_sts_0x181_181::set_bms_packnum_est(::google::protobuf::int32 value) {
  set_has_bms_packnum_est();
  bms_packnum_est_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_packnum_est)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_hvdown_reqType bms_hvdown_req = 12;
inline bool Gw_bms_sts_0x181_181::has_bms_hvdown_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_hvdown_req() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_hvdown_req() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_hvdown_req() {
  bms_hvdown_req_ = 0;
  clear_has_bms_hvdown_req();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType Gw_bms_sts_0x181_181::bms_hvdown_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_hvdown_req)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType >(bms_hvdown_req_);
}
inline void Gw_bms_sts_0x181_181::set_bms_hvdown_req(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType_IsValid(value));
  set_has_bms_hvdown_req();
  bms_hvdown_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_hvdown_req)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_hvonoff_stsType bms_hvonoff_sts = 13;
inline bool Gw_bms_sts_0x181_181::has_bms_hvonoff_sts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_hvonoff_sts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_hvonoff_sts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_hvonoff_sts() {
  bms_hvonoff_sts_ = 0;
  clear_has_bms_hvonoff_sts();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType Gw_bms_sts_0x181_181::bms_hvonoff_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_hvonoff_sts)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType >(bms_hvonoff_sts_);
}
inline void Gw_bms_sts_0x181_181::set_bms_hvonoff_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_IsValid(value));
  set_has_bms_hvonoff_sts();
  bms_hvonoff_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_hvonoff_sts)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181.Bms_sys_stsType bms_sys_sts = 14;
inline bool Gw_bms_sts_0x181_181::has_bms_sys_sts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_bms_sts_0x181_181::set_has_bms_sys_sts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_bms_sts_0x181_181::clear_has_bms_sys_sts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_bms_sts_0x181_181::clear_bms_sys_sts() {
  bms_sys_sts_ = 0;
  clear_has_bms_sys_sts();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType Gw_bms_sts_0x181_181::bms_sys_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_sys_sts)
  return static_cast< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType >(bms_sys_sts_);
}
inline void Gw_bms_sts_0x181_181::set_bms_sys_sts(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType value) {
  assert(::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType_IsValid(value));
  set_has_bms_sys_sts();
  bms_sys_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bms_sts_0x181_181.bms_sys_sts)
}

// -------------------------------------------------------------------

// Gw_vcu_control_0x185_185

// optional int32 checksum_0x185 = 1;
inline bool Gw_vcu_control_0x185_185::has_checksum_0x185() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_checksum_0x185() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_control_0x185_185::clear_has_checksum_0x185() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_control_0x185_185::clear_checksum_0x185() {
  checksum_0x185_ = 0;
  clear_has_checksum_0x185();
}
inline ::google::protobuf::int32 Gw_vcu_control_0x185_185::checksum_0x185() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.checksum_0x185)
  return checksum_0x185_;
}
inline void Gw_vcu_control_0x185_185::set_checksum_0x185(::google::protobuf::int32 value) {
  set_has_checksum_0x185();
  checksum_0x185_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.checksum_0x185)
}

// optional int32 rolling_counter_0x185 = 2;
inline bool Gw_vcu_control_0x185_185::has_rolling_counter_0x185() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_rolling_counter_0x185() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_control_0x185_185::clear_has_rolling_counter_0x185() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_control_0x185_185::clear_rolling_counter_0x185() {
  rolling_counter_0x185_ = 0;
  clear_has_rolling_counter_0x185();
}
inline ::google::protobuf::int32 Gw_vcu_control_0x185_185::rolling_counter_0x185() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.rolling_counter_0x185)
  return rolling_counter_0x185_;
}
inline void Gw_vcu_control_0x185_185::set_rolling_counter_0x185(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x185();
  rolling_counter_0x185_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.rolling_counter_0x185)
}

// optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_ems_engoperationstatusType vcu_ems_engoperationstatus = 3;
inline bool Gw_vcu_control_0x185_185::has_vcu_ems_engoperationstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_vcu_ems_engoperationstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_control_0x185_185::clear_has_vcu_ems_engoperationstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_control_0x185_185::clear_vcu_ems_engoperationstatus() {
  vcu_ems_engoperationstatus_ = 0;
  clear_has_vcu_ems_engoperationstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType Gw_vcu_control_0x185_185::vcu_ems_engoperationstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_ems_engoperationstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType >(vcu_ems_engoperationstatus_);
}
inline void Gw_vcu_control_0x185_185::set_vcu_ems_engoperationstatus(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_IsValid(value));
  set_has_vcu_ems_engoperationstatus();
  vcu_ems_engoperationstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_ems_engoperationstatus)
}

// optional double vcu_maxchgpwr_alw = 4;
inline bool Gw_vcu_control_0x185_185::has_vcu_maxchgpwr_alw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_vcu_maxchgpwr_alw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_control_0x185_185::clear_has_vcu_maxchgpwr_alw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_control_0x185_185::clear_vcu_maxchgpwr_alw() {
  vcu_maxchgpwr_alw_ = 0;
  clear_has_vcu_maxchgpwr_alw();
}
inline double Gw_vcu_control_0x185_185::vcu_maxchgpwr_alw() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_maxchgpwr_alw)
  return vcu_maxchgpwr_alw_;
}
inline void Gw_vcu_control_0x185_185::set_vcu_maxchgpwr_alw(double value) {
  set_has_vcu_maxchgpwr_alw();
  vcu_maxchgpwr_alw_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_maxchgpwr_alw)
}

// optional double vcu_maxdischgpwr_alw = 5;
inline bool Gw_vcu_control_0x185_185::has_vcu_maxdischgpwr_alw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_vcu_maxdischgpwr_alw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_control_0x185_185::clear_has_vcu_maxdischgpwr_alw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_control_0x185_185::clear_vcu_maxdischgpwr_alw() {
  vcu_maxdischgpwr_alw_ = 0;
  clear_has_vcu_maxdischgpwr_alw();
}
inline double Gw_vcu_control_0x185_185::vcu_maxdischgpwr_alw() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_maxdischgpwr_alw)
  return vcu_maxdischgpwr_alw_;
}
inline void Gw_vcu_control_0x185_185::set_vcu_maxdischgpwr_alw(double value) {
  set_has_vcu_maxdischgpwr_alw();
  vcu_maxdischgpwr_alw_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_maxdischgpwr_alw)
}

// optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_mcu_asd_reqType vcu_mcu_asd_req = 6;
inline bool Gw_vcu_control_0x185_185::has_vcu_mcu_asd_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_vcu_mcu_asd_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_control_0x185_185::clear_has_vcu_mcu_asd_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_control_0x185_185::clear_vcu_mcu_asd_req() {
  vcu_mcu_asd_req_ = 0;
  clear_has_vcu_mcu_asd_req();
}
inline ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType Gw_vcu_control_0x185_185::vcu_mcu_asd_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_mcu_asd_req)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType >(vcu_mcu_asd_req_);
}
inline void Gw_vcu_control_0x185_185::set_vcu_mcu_asd_req(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_IsValid(value));
  set_has_vcu_mcu_asd_req();
  vcu_mcu_asd_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_mcu_asd_req)
}

// optional .jmc_auto.canbus.Gw_vcu_control_0x185_185.Vcu_mcu_motor1_ctrmode_reqType vcu_mcu_motor1_ctrmode_req = 7;
inline bool Gw_vcu_control_0x185_185::has_vcu_mcu_motor1_ctrmode_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_control_0x185_185::set_has_vcu_mcu_motor1_ctrmode_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_control_0x185_185::clear_has_vcu_mcu_motor1_ctrmode_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_control_0x185_185::clear_vcu_mcu_motor1_ctrmode_req() {
  vcu_mcu_motor1_ctrmode_req_ = 0;
  clear_has_vcu_mcu_motor1_ctrmode_req();
}
inline ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType Gw_vcu_control_0x185_185::vcu_mcu_motor1_ctrmode_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_mcu_motor1_ctrmode_req)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType >(vcu_mcu_motor1_ctrmode_req_);
}
inline void Gw_vcu_control_0x185_185::set_vcu_mcu_motor1_ctrmode_req(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType value) {
  assert(::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_IsValid(value));
  set_has_vcu_mcu_motor1_ctrmode_req();
  vcu_mcu_motor1_ctrmode_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_control_0x185_185.vcu_mcu_motor1_ctrmode_req)
}

// -------------------------------------------------------------------

// Ibc_status2_0x124_124

// optional int32 checksum_0x124 = 1;
inline bool Ibc_status2_0x124_124::has_checksum_0x124() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_checksum_0x124() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ibc_status2_0x124_124::clear_has_checksum_0x124() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ibc_status2_0x124_124::clear_checksum_0x124() {
  checksum_0x124_ = 0;
  clear_has_checksum_0x124();
}
inline ::google::protobuf::int32 Ibc_status2_0x124_124::checksum_0x124() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.checksum_0x124)
  return checksum_0x124_;
}
inline void Ibc_status2_0x124_124::set_checksum_0x124(::google::protobuf::int32 value) {
  set_has_checksum_0x124();
  checksum_0x124_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.checksum_0x124)
}

// optional int32 rolling_counter_0x124 = 2;
inline bool Ibc_status2_0x124_124::has_rolling_counter_0x124() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_rolling_counter_0x124() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ibc_status2_0x124_124::clear_has_rolling_counter_0x124() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ibc_status2_0x124_124::clear_rolling_counter_0x124() {
  rolling_counter_0x124_ = 0;
  clear_has_rolling_counter_0x124();
}
inline ::google::protobuf::int32 Ibc_status2_0x124_124::rolling_counter_0x124() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.rolling_counter_0x124)
  return rolling_counter_0x124_;
}
inline void Ibc_status2_0x124_124::set_rolling_counter_0x124(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x124();
  rolling_counter_0x124_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.rolling_counter_0x124)
}

// optional .jmc_auto.canbus.Ibc_status2_0x124_124.Ibc_decelerationvaildType ibc_decelerationvaild = 3;
inline bool Ibc_status2_0x124_124::has_ibc_decelerationvaild() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_ibc_decelerationvaild() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ibc_status2_0x124_124::clear_has_ibc_decelerationvaild() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ibc_status2_0x124_124::clear_ibc_decelerationvaild() {
  ibc_decelerationvaild_ = 0;
  clear_has_ibc_decelerationvaild();
}
inline ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType Ibc_status2_0x124_124::ibc_decelerationvaild() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_decelerationvaild)
  return static_cast< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType >(ibc_decelerationvaild_);
}
inline void Ibc_status2_0x124_124::set_ibc_decelerationvaild(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType value) {
  assert(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType_IsValid(value));
  set_has_ibc_decelerationvaild();
  ibc_decelerationvaild_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_decelerationvaild)
}

// optional double ibc_deceleration = 4;
inline bool Ibc_status2_0x124_124::has_ibc_deceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_ibc_deceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ibc_status2_0x124_124::clear_has_ibc_deceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ibc_status2_0x124_124::clear_ibc_deceleration() {
  ibc_deceleration_ = 0;
  clear_has_ibc_deceleration();
}
inline double Ibc_status2_0x124_124::ibc_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_deceleration)
  return ibc_deceleration_;
}
inline void Ibc_status2_0x124_124::set_ibc_deceleration(double value) {
  set_has_ibc_deceleration();
  ibc_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_deceleration)
}

// optional .jmc_auto.canbus.Ibc_status2_0x124_124.Ibc_brktmcpositionvaildType ibc_brktmcpositionvaild = 5;
inline bool Ibc_status2_0x124_124::has_ibc_brktmcpositionvaild() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_ibc_brktmcpositionvaild() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ibc_status2_0x124_124::clear_has_ibc_brktmcpositionvaild() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ibc_status2_0x124_124::clear_ibc_brktmcpositionvaild() {
  ibc_brktmcpositionvaild_ = 0;
  clear_has_ibc_brktmcpositionvaild();
}
inline ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType Ibc_status2_0x124_124::ibc_brktmcpositionvaild() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_brktmcpositionvaild)
  return static_cast< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType >(ibc_brktmcpositionvaild_);
}
inline void Ibc_status2_0x124_124::set_ibc_brktmcpositionvaild(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType value) {
  assert(::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_IsValid(value));
  set_has_ibc_brktmcpositionvaild();
  ibc_brktmcpositionvaild_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_brktmcpositionvaild)
}

// optional double ibc_brktmcposition = 6;
inline bool Ibc_status2_0x124_124::has_ibc_brktmcposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ibc_status2_0x124_124::set_has_ibc_brktmcposition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ibc_status2_0x124_124::clear_has_ibc_brktmcposition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ibc_status2_0x124_124::clear_ibc_brktmcposition() {
  ibc_brktmcposition_ = 0;
  clear_has_ibc_brktmcposition();
}
inline double Ibc_status2_0x124_124::ibc_brktmcposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_brktmcposition)
  return ibc_brktmcposition_;
}
inline void Ibc_status2_0x124_124::set_ibc_brktmcposition(double value) {
  set_has_ibc_brktmcposition();
  ibc_brktmcposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ibc_status2_0x124_124.ibc_brktmcposition)
}

// -------------------------------------------------------------------

// Gw_vcu_hmi_0x358_358

// optional int32 vcu_checksum_0x358 = 1;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_checksum_0x358() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_checksum_0x358() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_checksum_0x358() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_checksum_0x358() {
  vcu_checksum_0x358_ = 0;
  clear_has_vcu_checksum_0x358();
}
inline ::google::protobuf::int32 Gw_vcu_hmi_0x358_358::vcu_checksum_0x358() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_checksum_0x358)
  return vcu_checksum_0x358_;
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_checksum_0x358(::google::protobuf::int32 value) {
  set_has_vcu_checksum_0x358();
  vcu_checksum_0x358_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_checksum_0x358)
}

// optional int32 vcu_rollingcounter_0x358 = 2;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_rollingcounter_0x358() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_rollingcounter_0x358() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_rollingcounter_0x358() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_rollingcounter_0x358() {
  vcu_rollingcounter_0x358_ = 0;
  clear_has_vcu_rollingcounter_0x358();
}
inline ::google::protobuf::int32 Gw_vcu_hmi_0x358_358::vcu_rollingcounter_0x358() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_rollingcounter_0x358)
  return vcu_rollingcounter_0x358_;
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_rollingcounter_0x358(::google::protobuf::int32 value) {
  set_has_vcu_rollingcounter_0x358();
  vcu_rollingcounter_0x358_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_rollingcounter_0x358)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.VehiclehvstatusType vehiclehvstatus = 3;
inline bool Gw_vcu_hmi_0x358_358::has_vehiclehvstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vehiclehvstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vehiclehvstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vehiclehvstatus() {
  vehiclehvstatus_ = 0;
  clear_has_vehiclehvstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType Gw_vcu_hmi_0x358_358::vehiclehvstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vehiclehvstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType >(vehiclehvstatus_);
}
inline void Gw_vcu_hmi_0x358_358::set_vehiclehvstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType_IsValid(value));
  set_has_vehiclehvstatus();
  vehiclehvstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vehiclehvstatus)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackheatcircuiterrorType packheatcircuiterror = 4;
inline bool Gw_vcu_hmi_0x358_358::has_packheatcircuiterror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_packheatcircuiterror() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_packheatcircuiterror() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_vcu_hmi_0x358_358::clear_packheatcircuiterror() {
  packheatcircuiterror_ = 0;
  clear_has_packheatcircuiterror();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType Gw_vcu_hmi_0x358_358::packheatcircuiterror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packheatcircuiterror)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType >(packheatcircuiterror_);
}
inline void Gw_vcu_hmi_0x358_358::set_packheatcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_IsValid(value));
  set_has_packheatcircuiterror();
  packheatcircuiterror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packheatcircuiterror)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackheatstatusType packheatstatus = 5;
inline bool Gw_vcu_hmi_0x358_358::has_packheatstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_packheatstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_packheatstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_vcu_hmi_0x358_358::clear_packheatstatus() {
  packheatstatus_ = 0;
  clear_has_packheatstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType Gw_vcu_hmi_0x358_358::packheatstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packheatstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType >(packheatstatus_);
}
inline void Gw_vcu_hmi_0x358_358::set_packheatstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType_IsValid(value));
  set_has_packheatstatus();
  packheatstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packheatstatus)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.PackcoolingcircuiterrorType packcoolingcircuiterror = 6;
inline bool Gw_vcu_hmi_0x358_358::has_packcoolingcircuiterror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_packcoolingcircuiterror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_packcoolingcircuiterror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_vcu_hmi_0x358_358::clear_packcoolingcircuiterror() {
  packcoolingcircuiterror_ = 0;
  clear_has_packcoolingcircuiterror();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType Gw_vcu_hmi_0x358_358::packcoolingcircuiterror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packcoolingcircuiterror)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType >(packcoolingcircuiterror_);
}
inline void Gw_vcu_hmi_0x358_358::set_packcoolingcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_IsValid(value));
  set_has_packcoolingcircuiterror();
  packcoolingcircuiterror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.packcoolingcircuiterror)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.MotorcoolingcircuiterrorType motorcoolingcircuiterror = 7;
inline bool Gw_vcu_hmi_0x358_358::has_motorcoolingcircuiterror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_motorcoolingcircuiterror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_motorcoolingcircuiterror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_vcu_hmi_0x358_358::clear_motorcoolingcircuiterror() {
  motorcoolingcircuiterror_ = 0;
  clear_has_motorcoolingcircuiterror();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType Gw_vcu_hmi_0x358_358::motorcoolingcircuiterror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.motorcoolingcircuiterror)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType >(motorcoolingcircuiterror_);
}
inline void Gw_vcu_hmi_0x358_358::set_motorcoolingcircuiterror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_IsValid(value));
  set_has_motorcoolingcircuiterror();
  motorcoolingcircuiterror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.motorcoolingcircuiterror)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_batteryvoltageerrorType vcu_batteryvoltageerror = 8;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_batteryvoltageerror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_batteryvoltageerror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_batteryvoltageerror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_batteryvoltageerror() {
  vcu_batteryvoltageerror_ = 0;
  clear_has_vcu_batteryvoltageerror();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType Gw_vcu_hmi_0x358_358::vcu_batteryvoltageerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_batteryvoltageerror)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType >(vcu_batteryvoltageerror_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_batteryvoltageerror(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_IsValid(value));
  set_has_vcu_batteryvoltageerror();
  vcu_batteryvoltageerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_batteryvoltageerror)
}

// optional double vcu_battervoltage = 9;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_battervoltage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_battervoltage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_battervoltage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_battervoltage() {
  vcu_battervoltage_ = 0;
  clear_has_vcu_battervoltage();
}
inline double Gw_vcu_hmi_0x358_358::vcu_battervoltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_battervoltage)
  return vcu_battervoltage_;
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_battervoltage(double value) {
  set_has_vcu_battervoltage();
  vcu_battervoltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_battervoltage)
}

// optional double vcu_targcruisespeed = 10;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_targcruisespeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_targcruisespeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_targcruisespeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_targcruisespeed() {
  vcu_targcruisespeed_ = 0;
  clear_has_vcu_targcruisespeed();
}
inline double Gw_vcu_hmi_0x358_358::vcu_targcruisespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_targcruisespeed)
  return vcu_targcruisespeed_;
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_targcruisespeed(double value) {
  set_has_vcu_targcruisespeed();
  vcu_targcruisespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_targcruisespeed)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_cruisecontrolstatusType vcu_cruisecontrolstatus = 11;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_cruisecontrolstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_cruisecontrolstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_cruisecontrolstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_cruisecontrolstatus() {
  vcu_cruisecontrolstatus_ = 0;
  clear_has_vcu_cruisecontrolstatus();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType Gw_vcu_hmi_0x358_358::vcu_cruisecontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_cruisecontrolstatus)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType >(vcu_cruisecontrolstatus_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_cruisecontrolstatus(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_IsValid(value));
  set_has_vcu_cruisecontrolstatus();
  vcu_cruisecontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_cruisecontrolstatus)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_driverstatus_stsType vcu_driverstatus_sts = 12;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_driverstatus_sts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_driverstatus_sts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_driverstatus_sts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_driverstatus_sts() {
  vcu_driverstatus_sts_ = 0;
  clear_has_vcu_driverstatus_sts();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType Gw_vcu_hmi_0x358_358::vcu_driverstatus_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_driverstatus_sts)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType >(vcu_driverstatus_sts_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_driverstatus_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_IsValid(value));
  set_has_vcu_driverstatus_sts();
  vcu_driverstatus_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_driverstatus_sts)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_drivemode_stsType vcu_drivemode_sts = 13;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_drivemode_sts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_drivemode_sts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_drivemode_sts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_drivemode_sts() {
  vcu_drivemode_sts_ = 0;
  clear_has_vcu_drivemode_sts();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType Gw_vcu_hmi_0x358_358::vcu_drivemode_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_drivemode_sts)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType >(vcu_drivemode_sts_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_drivemode_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_IsValid(value));
  set_has_vcu_drivemode_sts();
  vcu_drivemode_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_drivemode_sts)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_vehchg_stsType vcu_vehchg_sts = 14;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_vehchg_sts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_vehchg_sts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_vehchg_sts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_vehchg_sts() {
  vcu_vehchg_sts_ = 0;
  clear_has_vcu_vehchg_sts();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType Gw_vcu_hmi_0x358_358::vcu_vehchg_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_vehchg_sts)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType >(vcu_vehchg_sts_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_vehchg_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_IsValid(value));
  set_has_vcu_vehchg_sts();
  vcu_vehchg_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_vehchg_sts)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_tbox_veh_stsType vcu_tbox_veh_sts = 15;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_tbox_veh_sts() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_tbox_veh_sts() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_tbox_veh_sts() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_tbox_veh_sts() {
  vcu_tbox_veh_sts_ = 0;
  clear_has_vcu_tbox_veh_sts();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType Gw_vcu_hmi_0x358_358::vcu_tbox_veh_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_tbox_veh_sts)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType >(vcu_tbox_veh_sts_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_tbox_veh_sts(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_IsValid(value));
  set_has_vcu_tbox_veh_sts();
  vcu_tbox_veh_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_tbox_veh_sts)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_energyrecoverymodeType vcu_icm_energyrecoverymode = 16;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_energyrecoverymode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_energyrecoverymode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_energyrecoverymode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_energyrecoverymode() {
  vcu_icm_energyrecoverymode_ = 0;
  clear_has_vcu_icm_energyrecoverymode();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType Gw_vcu_hmi_0x358_358::vcu_icm_energyrecoverymode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_energyrecoverymode)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType >(vcu_icm_energyrecoverymode_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_energyrecoverymode(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_IsValid(value));
  set_has_vcu_icm_energyrecoverymode();
  vcu_icm_energyrecoverymode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_energyrecoverymode)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_vehhvil_errType vcu_icm_vehhvil_err = 17;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_vehhvil_err() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_vehhvil_err() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_vehhvil_err() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_vehhvil_err() {
  vcu_icm_vehhvil_err_ = 0;
  clear_has_vcu_icm_vehhvil_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType Gw_vcu_hmi_0x358_358::vcu_icm_vehhvil_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_vehhvil_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType >(vcu_icm_vehhvil_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_vehhvil_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_IsValid(value));
  set_has_vcu_icm_vehhvil_err();
  vcu_icm_vehhvil_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_vehhvil_err)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_mot_errType vcu_icm_mot_err = 18;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_mot_err() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_mot_err() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_mot_err() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_mot_err() {
  vcu_icm_mot_err_ = 0;
  clear_has_vcu_icm_mot_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType Gw_vcu_hmi_0x358_358::vcu_icm_mot_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_mot_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType >(vcu_icm_mot_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_mot_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_IsValid(value));
  set_has_vcu_icm_mot_err();
  vcu_icm_mot_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_mot_err)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_packvoltoff_errType vcu_icm_packvoltoff_err = 19;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_packvoltoff_err() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_packvoltoff_err() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_packvoltoff_err() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_packvoltoff_err() {
  vcu_icm_packvoltoff_err_ = 0;
  clear_has_vcu_icm_packvoltoff_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType Gw_vcu_hmi_0x358_358::vcu_icm_packvoltoff_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_packvoltoff_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType >(vcu_icm_packvoltoff_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_packvoltoff_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_IsValid(value));
  set_has_vcu_icm_packvoltoff_err();
  vcu_icm_packvoltoff_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_packvoltoff_err)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_chggearlvType vcu_icm_chggearlv = 20;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_chggearlv() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_chggearlv() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_chggearlv() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_chggearlv() {
  vcu_icm_chggearlv_ = 0;
  clear_has_vcu_icm_chggearlv();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType Gw_vcu_hmi_0x358_358::vcu_icm_chggearlv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_chggearlv)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType >(vcu_icm_chggearlv_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_chggearlv(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_IsValid(value));
  set_has_vcu_icm_chggearlv();
  vcu_icm_chggearlv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_chggearlv)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_packsys_errType vcu_icm_packsys_err = 21;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_packsys_err() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_packsys_err() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_packsys_err() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_packsys_err() {
  vcu_icm_packsys_err_ = 0;
  clear_has_vcu_icm_packsys_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType Gw_vcu_hmi_0x358_358::vcu_icm_packsys_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_packsys_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType >(vcu_icm_packsys_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_packsys_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_IsValid(value));
  set_has_vcu_icm_packsys_err();
  vcu_icm_packsys_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_packsys_err)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_drvsys_errType vcu_icm_drvsys_err = 22;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_drvsys_err() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_drvsys_err() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_drvsys_err() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_drvsys_err() {
  vcu_icm_drvsys_err_ = 0;
  clear_has_vcu_icm_drvsys_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType Gw_vcu_hmi_0x358_358::vcu_icm_drvsys_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_drvsys_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType >(vcu_icm_drvsys_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_drvsys_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_IsValid(value));
  set_has_vcu_icm_drvsys_err();
  vcu_icm_drvsys_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_drvsys_err)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358.Vcu_icm_veh_errType vcu_icm_veh_err = 23;
inline bool Gw_vcu_hmi_0x358_358::has_vcu_icm_veh_err() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Gw_vcu_hmi_0x358_358::set_has_vcu_icm_veh_err() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_has_vcu_icm_veh_err() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Gw_vcu_hmi_0x358_358::clear_vcu_icm_veh_err() {
  vcu_icm_veh_err_ = 0;
  clear_has_vcu_icm_veh_err();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType Gw_vcu_hmi_0x358_358::vcu_icm_veh_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_veh_err)
  return static_cast< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType >(vcu_icm_veh_err_);
}
inline void Gw_vcu_hmi_0x358_358::set_vcu_icm_veh_err(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType value) {
  assert(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_IsValid(value));
  set_has_vcu_icm_veh_err();
  vcu_icm_veh_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_vcu_hmi_0x358_358.vcu_icm_veh_err)
}

// -------------------------------------------------------------------

// Teshun

// optional .jmc_auto.canbus.Epb_status_0x152_152 epb_status_0x152_152 = 1;
inline bool Teshun::has_epb_status_0x152_152() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Teshun::set_has_epb_status_0x152_152() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Teshun::clear_has_epb_status_0x152_152() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Teshun::clear_epb_status_0x152_152() {
  if (epb_status_0x152_152_ != NULL) epb_status_0x152_152_->::jmc_auto::canbus::Epb_status_0x152_152::Clear();
  clear_has_epb_status_0x152_152();
}
inline const ::jmc_auto::canbus::Epb_status_0x152_152& Teshun::epb_status_0x152_152() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.epb_status_0x152_152)
  return epb_status_0x152_152_ != NULL ? *epb_status_0x152_152_
                         : *::jmc_auto::canbus::Epb_status_0x152_152::internal_default_instance();
}
inline ::jmc_auto::canbus::Epb_status_0x152_152* Teshun::mutable_epb_status_0x152_152() {
  set_has_epb_status_0x152_152();
  if (epb_status_0x152_152_ == NULL) {
    epb_status_0x152_152_ = new ::jmc_auto::canbus::Epb_status_0x152_152;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.epb_status_0x152_152)
  return epb_status_0x152_152_;
}
inline ::jmc_auto::canbus::Epb_status_0x152_152* Teshun::release_epb_status_0x152_152() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.epb_status_0x152_152)
  clear_has_epb_status_0x152_152();
  ::jmc_auto::canbus::Epb_status_0x152_152* temp = epb_status_0x152_152_;
  epb_status_0x152_152_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_epb_status_0x152_152(::jmc_auto::canbus::Epb_status_0x152_152* epb_status_0x152_152) {
  delete epb_status_0x152_152_;
  epb_status_0x152_152_ = epb_status_0x152_152;
  if (epb_status_0x152_152) {
    set_has_epb_status_0x152_152();
  } else {
    clear_has_epb_status_0x152_152();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.epb_status_0x152_152)
}

// optional .jmc_auto.canbus.Gw_abs_0x211_211 gw_abs_0x211_211 = 2;
inline bool Teshun::has_gw_abs_0x211_211() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Teshun::set_has_gw_abs_0x211_211() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Teshun::clear_has_gw_abs_0x211_211() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Teshun::clear_gw_abs_0x211_211() {
  if (gw_abs_0x211_211_ != NULL) gw_abs_0x211_211_->::jmc_auto::canbus::Gw_abs_0x211_211::Clear();
  clear_has_gw_abs_0x211_211();
}
inline const ::jmc_auto::canbus::Gw_abs_0x211_211& Teshun::gw_abs_0x211_211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_abs_0x211_211)
  return gw_abs_0x211_211_ != NULL ? *gw_abs_0x211_211_
                         : *::jmc_auto::canbus::Gw_abs_0x211_211::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211* Teshun::mutable_gw_abs_0x211_211() {
  set_has_gw_abs_0x211_211();
  if (gw_abs_0x211_211_ == NULL) {
    gw_abs_0x211_211_ = new ::jmc_auto::canbus::Gw_abs_0x211_211;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_abs_0x211_211)
  return gw_abs_0x211_211_;
}
inline ::jmc_auto::canbus::Gw_abs_0x211_211* Teshun::release_gw_abs_0x211_211() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_abs_0x211_211)
  clear_has_gw_abs_0x211_211();
  ::jmc_auto::canbus::Gw_abs_0x211_211* temp = gw_abs_0x211_211_;
  gw_abs_0x211_211_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_abs_0x211_211(::jmc_auto::canbus::Gw_abs_0x211_211* gw_abs_0x211_211) {
  delete gw_abs_0x211_211_;
  gw_abs_0x211_211_ = gw_abs_0x211_211;
  if (gw_abs_0x211_211) {
    set_has_gw_abs_0x211_211();
  } else {
    clear_has_gw_abs_0x211_211();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_abs_0x211_211)
}

// optional .jmc_auto.canbus.Bcm_door_0x310_310 bcm_door_0x310_310 = 3;
inline bool Teshun::has_bcm_door_0x310_310() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Teshun::set_has_bcm_door_0x310_310() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Teshun::clear_has_bcm_door_0x310_310() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Teshun::clear_bcm_door_0x310_310() {
  if (bcm_door_0x310_310_ != NULL) bcm_door_0x310_310_->::jmc_auto::canbus::Bcm_door_0x310_310::Clear();
  clear_has_bcm_door_0x310_310();
}
inline const ::jmc_auto::canbus::Bcm_door_0x310_310& Teshun::bcm_door_0x310_310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.bcm_door_0x310_310)
  return bcm_door_0x310_310_ != NULL ? *bcm_door_0x310_310_
                         : *::jmc_auto::canbus::Bcm_door_0x310_310::internal_default_instance();
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310* Teshun::mutable_bcm_door_0x310_310() {
  set_has_bcm_door_0x310_310();
  if (bcm_door_0x310_310_ == NULL) {
    bcm_door_0x310_310_ = new ::jmc_auto::canbus::Bcm_door_0x310_310;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.bcm_door_0x310_310)
  return bcm_door_0x310_310_;
}
inline ::jmc_auto::canbus::Bcm_door_0x310_310* Teshun::release_bcm_door_0x310_310() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.bcm_door_0x310_310)
  clear_has_bcm_door_0x310_310();
  ::jmc_auto::canbus::Bcm_door_0x310_310* temp = bcm_door_0x310_310_;
  bcm_door_0x310_310_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_bcm_door_0x310_310(::jmc_auto::canbus::Bcm_door_0x310_310* bcm_door_0x310_310) {
  delete bcm_door_0x310_310_;
  bcm_door_0x310_310_ = bcm_door_0x310_310;
  if (bcm_door_0x310_310) {
    set_has_bcm_door_0x310_310();
  } else {
    clear_has_bcm_door_0x310_310();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.bcm_door_0x310_310)
}

// optional .jmc_auto.canbus.Gw_vcu_sts_0x218_218 gw_vcu_sts_0x218_218 = 4;
inline bool Teshun::has_gw_vcu_sts_0x218_218() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Teshun::set_has_gw_vcu_sts_0x218_218() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Teshun::clear_has_gw_vcu_sts_0x218_218() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Teshun::clear_gw_vcu_sts_0x218_218() {
  if (gw_vcu_sts_0x218_218_ != NULL) gw_vcu_sts_0x218_218_->::jmc_auto::canbus::Gw_vcu_sts_0x218_218::Clear();
  clear_has_gw_vcu_sts_0x218_218();
}
inline const ::jmc_auto::canbus::Gw_vcu_sts_0x218_218& Teshun::gw_vcu_sts_0x218_218() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_sts_0x218_218)
  return gw_vcu_sts_0x218_218_ != NULL ? *gw_vcu_sts_0x218_218_
                         : *::jmc_auto::canbus::Gw_vcu_sts_0x218_218::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* Teshun::mutable_gw_vcu_sts_0x218_218() {
  set_has_gw_vcu_sts_0x218_218();
  if (gw_vcu_sts_0x218_218_ == NULL) {
    gw_vcu_sts_0x218_218_ = new ::jmc_auto::canbus::Gw_vcu_sts_0x218_218;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_sts_0x218_218)
  return gw_vcu_sts_0x218_218_;
}
inline ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* Teshun::release_gw_vcu_sts_0x218_218() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_sts_0x218_218)
  clear_has_gw_vcu_sts_0x218_218();
  ::jmc_auto::canbus::Gw_vcu_sts_0x218_218* temp = gw_vcu_sts_0x218_218_;
  gw_vcu_sts_0x218_218_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_sts_0x218_218(::jmc_auto::canbus::Gw_vcu_sts_0x218_218* gw_vcu_sts_0x218_218) {
  delete gw_vcu_sts_0x218_218_;
  gw_vcu_sts_0x218_218_ = gw_vcu_sts_0x218_218;
  if (gw_vcu_sts_0x218_218) {
    set_has_gw_vcu_sts_0x218_218();
  } else {
    clear_has_gw_vcu_sts_0x218_218();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_sts_0x218_218)
}

// optional .jmc_auto.canbus.Adu_controldrive_0x120_120 adu_controldrive_0x120_120 = 5;
inline bool Teshun::has_adu_controldrive_0x120_120() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Teshun::set_has_adu_controldrive_0x120_120() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Teshun::clear_has_adu_controldrive_0x120_120() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Teshun::clear_adu_controldrive_0x120_120() {
  if (adu_controldrive_0x120_120_ != NULL) adu_controldrive_0x120_120_->::jmc_auto::canbus::Adu_controldrive_0x120_120::Clear();
  clear_has_adu_controldrive_0x120_120();
}
inline const ::jmc_auto::canbus::Adu_controldrive_0x120_120& Teshun::adu_controldrive_0x120_120() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.adu_controldrive_0x120_120)
  return adu_controldrive_0x120_120_ != NULL ? *adu_controldrive_0x120_120_
                         : *::jmc_auto::canbus::Adu_controldrive_0x120_120::internal_default_instance();
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120* Teshun::mutable_adu_controldrive_0x120_120() {
  set_has_adu_controldrive_0x120_120();
  if (adu_controldrive_0x120_120_ == NULL) {
    adu_controldrive_0x120_120_ = new ::jmc_auto::canbus::Adu_controldrive_0x120_120;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.adu_controldrive_0x120_120)
  return adu_controldrive_0x120_120_;
}
inline ::jmc_auto::canbus::Adu_controldrive_0x120_120* Teshun::release_adu_controldrive_0x120_120() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.adu_controldrive_0x120_120)
  clear_has_adu_controldrive_0x120_120();
  ::jmc_auto::canbus::Adu_controldrive_0x120_120* temp = adu_controldrive_0x120_120_;
  adu_controldrive_0x120_120_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_adu_controldrive_0x120_120(::jmc_auto::canbus::Adu_controldrive_0x120_120* adu_controldrive_0x120_120) {
  delete adu_controldrive_0x120_120_;
  adu_controldrive_0x120_120_ = adu_controldrive_0x120_120;
  if (adu_controldrive_0x120_120) {
    set_has_adu_controldrive_0x120_120();
  } else {
    clear_has_adu_controldrive_0x120_120();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.adu_controldrive_0x120_120)
}

// optional .jmc_auto.canbus.Gw_vcu_control2_0x131_131 gw_vcu_control2_0x131_131 = 6;
inline bool Teshun::has_gw_vcu_control2_0x131_131() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Teshun::set_has_gw_vcu_control2_0x131_131() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Teshun::clear_has_gw_vcu_control2_0x131_131() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Teshun::clear_gw_vcu_control2_0x131_131() {
  if (gw_vcu_control2_0x131_131_ != NULL) gw_vcu_control2_0x131_131_->::jmc_auto::canbus::Gw_vcu_control2_0x131_131::Clear();
  clear_has_gw_vcu_control2_0x131_131();
}
inline const ::jmc_auto::canbus::Gw_vcu_control2_0x131_131& Teshun::gw_vcu_control2_0x131_131() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_control2_0x131_131)
  return gw_vcu_control2_0x131_131_ != NULL ? *gw_vcu_control2_0x131_131_
                         : *::jmc_auto::canbus::Gw_vcu_control2_0x131_131::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* Teshun::mutable_gw_vcu_control2_0x131_131() {
  set_has_gw_vcu_control2_0x131_131();
  if (gw_vcu_control2_0x131_131_ == NULL) {
    gw_vcu_control2_0x131_131_ = new ::jmc_auto::canbus::Gw_vcu_control2_0x131_131;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_control2_0x131_131)
  return gw_vcu_control2_0x131_131_;
}
inline ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* Teshun::release_gw_vcu_control2_0x131_131() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_control2_0x131_131)
  clear_has_gw_vcu_control2_0x131_131();
  ::jmc_auto::canbus::Gw_vcu_control2_0x131_131* temp = gw_vcu_control2_0x131_131_;
  gw_vcu_control2_0x131_131_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_control2_0x131_131(::jmc_auto::canbus::Gw_vcu_control2_0x131_131* gw_vcu_control2_0x131_131) {
  delete gw_vcu_control2_0x131_131_;
  gw_vcu_control2_0x131_131_ = gw_vcu_control2_0x131_131;
  if (gw_vcu_control2_0x131_131) {
    set_has_gw_vcu_control2_0x131_131();
  } else {
    clear_has_gw_vcu_control2_0x131_131();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_control2_0x131_131)
}

// optional .jmc_auto.canbus.Gw_scu_shiftersts_0xc8_c8 gw_scu_shiftersts_0xc8_c8 = 7;
inline bool Teshun::has_gw_scu_shiftersts_0xc8_c8() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Teshun::set_has_gw_scu_shiftersts_0xc8_c8() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Teshun::clear_has_gw_scu_shiftersts_0xc8_c8() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Teshun::clear_gw_scu_shiftersts_0xc8_c8() {
  if (gw_scu_shiftersts_0xc8_c8_ != NULL) gw_scu_shiftersts_0xc8_c8_->::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8::Clear();
  clear_has_gw_scu_shiftersts_0xc8_c8();
}
inline const ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8& Teshun::gw_scu_shiftersts_0xc8_c8() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_scu_shiftersts_0xc8_c8)
  return gw_scu_shiftersts_0xc8_c8_ != NULL ? *gw_scu_shiftersts_0xc8_c8_
                         : *::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* Teshun::mutable_gw_scu_shiftersts_0xc8_c8() {
  set_has_gw_scu_shiftersts_0xc8_c8();
  if (gw_scu_shiftersts_0xc8_c8_ == NULL) {
    gw_scu_shiftersts_0xc8_c8_ = new ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_scu_shiftersts_0xc8_c8)
  return gw_scu_shiftersts_0xc8_c8_;
}
inline ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* Teshun::release_gw_scu_shiftersts_0xc8_c8() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_scu_shiftersts_0xc8_c8)
  clear_has_gw_scu_shiftersts_0xc8_c8();
  ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* temp = gw_scu_shiftersts_0xc8_c8_;
  gw_scu_shiftersts_0xc8_c8_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_scu_shiftersts_0xc8_c8(::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8* gw_scu_shiftersts_0xc8_c8) {
  delete gw_scu_shiftersts_0xc8_c8_;
  gw_scu_shiftersts_0xc8_c8_ = gw_scu_shiftersts_0xc8_c8;
  if (gw_scu_shiftersts_0xc8_c8) {
    set_has_gw_scu_shiftersts_0xc8_c8();
  } else {
    clear_has_gw_scu_shiftersts_0xc8_c8();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_scu_shiftersts_0xc8_c8)
}

// optional .jmc_auto.canbus.Gw_vcu_drivests_0x10a_10a gw_vcu_drivests_0x10a_10a = 8;
inline bool Teshun::has_gw_vcu_drivests_0x10a_10a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Teshun::set_has_gw_vcu_drivests_0x10a_10a() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Teshun::clear_has_gw_vcu_drivests_0x10a_10a() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Teshun::clear_gw_vcu_drivests_0x10a_10a() {
  if (gw_vcu_drivests_0x10a_10a_ != NULL) gw_vcu_drivests_0x10a_10a_->::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a::Clear();
  clear_has_gw_vcu_drivests_0x10a_10a();
}
inline const ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a& Teshun::gw_vcu_drivests_0x10a_10a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_drivests_0x10a_10a)
  return gw_vcu_drivests_0x10a_10a_ != NULL ? *gw_vcu_drivests_0x10a_10a_
                         : *::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* Teshun::mutable_gw_vcu_drivests_0x10a_10a() {
  set_has_gw_vcu_drivests_0x10a_10a();
  if (gw_vcu_drivests_0x10a_10a_ == NULL) {
    gw_vcu_drivests_0x10a_10a_ = new ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_drivests_0x10a_10a)
  return gw_vcu_drivests_0x10a_10a_;
}
inline ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* Teshun::release_gw_vcu_drivests_0x10a_10a() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_drivests_0x10a_10a)
  clear_has_gw_vcu_drivests_0x10a_10a();
  ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* temp = gw_vcu_drivests_0x10a_10a_;
  gw_vcu_drivests_0x10a_10a_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_drivests_0x10a_10a(::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a* gw_vcu_drivests_0x10a_10a) {
  delete gw_vcu_drivests_0x10a_10a_;
  gw_vcu_drivests_0x10a_10a_ = gw_vcu_drivests_0x10a_10a;
  if (gw_vcu_drivests_0x10a_10a) {
    set_has_gw_vcu_drivests_0x10a_10a();
  } else {
    clear_has_gw_vcu_drivests_0x10a_10a();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_drivests_0x10a_10a)
}

// optional .jmc_auto.canbus.Adu_controlbrake_0x110_110 adu_controlbrake_0x110_110 = 9;
inline bool Teshun::has_adu_controlbrake_0x110_110() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Teshun::set_has_adu_controlbrake_0x110_110() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Teshun::clear_has_adu_controlbrake_0x110_110() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Teshun::clear_adu_controlbrake_0x110_110() {
  if (adu_controlbrake_0x110_110_ != NULL) adu_controlbrake_0x110_110_->::jmc_auto::canbus::Adu_controlbrake_0x110_110::Clear();
  clear_has_adu_controlbrake_0x110_110();
}
inline const ::jmc_auto::canbus::Adu_controlbrake_0x110_110& Teshun::adu_controlbrake_0x110_110() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.adu_controlbrake_0x110_110)
  return adu_controlbrake_0x110_110_ != NULL ? *adu_controlbrake_0x110_110_
                         : *::jmc_auto::canbus::Adu_controlbrake_0x110_110::internal_default_instance();
}
inline ::jmc_auto::canbus::Adu_controlbrake_0x110_110* Teshun::mutable_adu_controlbrake_0x110_110() {
  set_has_adu_controlbrake_0x110_110();
  if (adu_controlbrake_0x110_110_ == NULL) {
    adu_controlbrake_0x110_110_ = new ::jmc_auto::canbus::Adu_controlbrake_0x110_110;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.adu_controlbrake_0x110_110)
  return adu_controlbrake_0x110_110_;
}
inline ::jmc_auto::canbus::Adu_controlbrake_0x110_110* Teshun::release_adu_controlbrake_0x110_110() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.adu_controlbrake_0x110_110)
  clear_has_adu_controlbrake_0x110_110();
  ::jmc_auto::canbus::Adu_controlbrake_0x110_110* temp = adu_controlbrake_0x110_110_;
  adu_controlbrake_0x110_110_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_adu_controlbrake_0x110_110(::jmc_auto::canbus::Adu_controlbrake_0x110_110* adu_controlbrake_0x110_110) {
  delete adu_controlbrake_0x110_110_;
  adu_controlbrake_0x110_110_ = adu_controlbrake_0x110_110;
  if (adu_controlbrake_0x110_110) {
    set_has_adu_controlbrake_0x110_110();
  } else {
    clear_has_adu_controlbrake_0x110_110();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.adu_controlbrake_0x110_110)
}

// optional .jmc_auto.canbus.Eps2_status_0x112_112 eps2_status_0x112_112 = 10;
inline bool Teshun::has_eps2_status_0x112_112() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Teshun::set_has_eps2_status_0x112_112() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Teshun::clear_has_eps2_status_0x112_112() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Teshun::clear_eps2_status_0x112_112() {
  if (eps2_status_0x112_112_ != NULL) eps2_status_0x112_112_->::jmc_auto::canbus::Eps2_status_0x112_112::Clear();
  clear_has_eps2_status_0x112_112();
}
inline const ::jmc_auto::canbus::Eps2_status_0x112_112& Teshun::eps2_status_0x112_112() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.eps2_status_0x112_112)
  return eps2_status_0x112_112_ != NULL ? *eps2_status_0x112_112_
                         : *::jmc_auto::canbus::Eps2_status_0x112_112::internal_default_instance();
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112* Teshun::mutable_eps2_status_0x112_112() {
  set_has_eps2_status_0x112_112();
  if (eps2_status_0x112_112_ == NULL) {
    eps2_status_0x112_112_ = new ::jmc_auto::canbus::Eps2_status_0x112_112;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.eps2_status_0x112_112)
  return eps2_status_0x112_112_;
}
inline ::jmc_auto::canbus::Eps2_status_0x112_112* Teshun::release_eps2_status_0x112_112() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.eps2_status_0x112_112)
  clear_has_eps2_status_0x112_112();
  ::jmc_auto::canbus::Eps2_status_0x112_112* temp = eps2_status_0x112_112_;
  eps2_status_0x112_112_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_eps2_status_0x112_112(::jmc_auto::canbus::Eps2_status_0x112_112* eps2_status_0x112_112) {
  delete eps2_status_0x112_112_;
  eps2_status_0x112_112_ = eps2_status_0x112_112;
  if (eps2_status_0x112_112) {
    set_has_eps2_status_0x112_112();
  } else {
    clear_has_eps2_status_0x112_112();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.eps2_status_0x112_112)
}

// optional .jmc_auto.canbus.Gw_mcu_power_0x226_226 gw_mcu_power_0x226_226 = 11;
inline bool Teshun::has_gw_mcu_power_0x226_226() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Teshun::set_has_gw_mcu_power_0x226_226() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Teshun::clear_has_gw_mcu_power_0x226_226() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Teshun::clear_gw_mcu_power_0x226_226() {
  if (gw_mcu_power_0x226_226_ != NULL) gw_mcu_power_0x226_226_->::jmc_auto::canbus::Gw_mcu_power_0x226_226::Clear();
  clear_has_gw_mcu_power_0x226_226();
}
inline const ::jmc_auto::canbus::Gw_mcu_power_0x226_226& Teshun::gw_mcu_power_0x226_226() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_mcu_power_0x226_226)
  return gw_mcu_power_0x226_226_ != NULL ? *gw_mcu_power_0x226_226_
                         : *::jmc_auto::canbus::Gw_mcu_power_0x226_226::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_mcu_power_0x226_226* Teshun::mutable_gw_mcu_power_0x226_226() {
  set_has_gw_mcu_power_0x226_226();
  if (gw_mcu_power_0x226_226_ == NULL) {
    gw_mcu_power_0x226_226_ = new ::jmc_auto::canbus::Gw_mcu_power_0x226_226;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_mcu_power_0x226_226)
  return gw_mcu_power_0x226_226_;
}
inline ::jmc_auto::canbus::Gw_mcu_power_0x226_226* Teshun::release_gw_mcu_power_0x226_226() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_mcu_power_0x226_226)
  clear_has_gw_mcu_power_0x226_226();
  ::jmc_auto::canbus::Gw_mcu_power_0x226_226* temp = gw_mcu_power_0x226_226_;
  gw_mcu_power_0x226_226_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_mcu_power_0x226_226(::jmc_auto::canbus::Gw_mcu_power_0x226_226* gw_mcu_power_0x226_226) {
  delete gw_mcu_power_0x226_226_;
  gw_mcu_power_0x226_226_ = gw_mcu_power_0x226_226;
  if (gw_mcu_power_0x226_226) {
    set_has_gw_mcu_power_0x226_226();
  } else {
    clear_has_gw_mcu_power_0x226_226();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_mcu_power_0x226_226)
}

// optional .jmc_auto.canbus.Adu_controleps2_0x100_100 adu_controleps2_0x100_100 = 12;
inline bool Teshun::has_adu_controleps2_0x100_100() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Teshun::set_has_adu_controleps2_0x100_100() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Teshun::clear_has_adu_controleps2_0x100_100() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Teshun::clear_adu_controleps2_0x100_100() {
  if (adu_controleps2_0x100_100_ != NULL) adu_controleps2_0x100_100_->::jmc_auto::canbus::Adu_controleps2_0x100_100::Clear();
  clear_has_adu_controleps2_0x100_100();
}
inline const ::jmc_auto::canbus::Adu_controleps2_0x100_100& Teshun::adu_controleps2_0x100_100() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.adu_controleps2_0x100_100)
  return adu_controleps2_0x100_100_ != NULL ? *adu_controleps2_0x100_100_
                         : *::jmc_auto::canbus::Adu_controleps2_0x100_100::internal_default_instance();
}
inline ::jmc_auto::canbus::Adu_controleps2_0x100_100* Teshun::mutable_adu_controleps2_0x100_100() {
  set_has_adu_controleps2_0x100_100();
  if (adu_controleps2_0x100_100_ == NULL) {
    adu_controleps2_0x100_100_ = new ::jmc_auto::canbus::Adu_controleps2_0x100_100;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.adu_controleps2_0x100_100)
  return adu_controleps2_0x100_100_;
}
inline ::jmc_auto::canbus::Adu_controleps2_0x100_100* Teshun::release_adu_controleps2_0x100_100() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.adu_controleps2_0x100_100)
  clear_has_adu_controleps2_0x100_100();
  ::jmc_auto::canbus::Adu_controleps2_0x100_100* temp = adu_controleps2_0x100_100_;
  adu_controleps2_0x100_100_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_adu_controleps2_0x100_100(::jmc_auto::canbus::Adu_controleps2_0x100_100* adu_controleps2_0x100_100) {
  delete adu_controleps2_0x100_100_;
  adu_controleps2_0x100_100_ = adu_controleps2_0x100_100;
  if (adu_controleps2_0x100_100) {
    set_has_adu_controleps2_0x100_100();
  } else {
    clear_has_adu_controleps2_0x100_100();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.adu_controleps2_0x100_100)
}

// optional .jmc_auto.canbus.Gw_mcu_output_0x225_225 gw_mcu_output_0x225_225 = 13;
inline bool Teshun::has_gw_mcu_output_0x225_225() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Teshun::set_has_gw_mcu_output_0x225_225() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Teshun::clear_has_gw_mcu_output_0x225_225() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Teshun::clear_gw_mcu_output_0x225_225() {
  if (gw_mcu_output_0x225_225_ != NULL) gw_mcu_output_0x225_225_->::jmc_auto::canbus::Gw_mcu_output_0x225_225::Clear();
  clear_has_gw_mcu_output_0x225_225();
}
inline const ::jmc_auto::canbus::Gw_mcu_output_0x225_225& Teshun::gw_mcu_output_0x225_225() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_mcu_output_0x225_225)
  return gw_mcu_output_0x225_225_ != NULL ? *gw_mcu_output_0x225_225_
                         : *::jmc_auto::canbus::Gw_mcu_output_0x225_225::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_mcu_output_0x225_225* Teshun::mutable_gw_mcu_output_0x225_225() {
  set_has_gw_mcu_output_0x225_225();
  if (gw_mcu_output_0x225_225_ == NULL) {
    gw_mcu_output_0x225_225_ = new ::jmc_auto::canbus::Gw_mcu_output_0x225_225;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_mcu_output_0x225_225)
  return gw_mcu_output_0x225_225_;
}
inline ::jmc_auto::canbus::Gw_mcu_output_0x225_225* Teshun::release_gw_mcu_output_0x225_225() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_mcu_output_0x225_225)
  clear_has_gw_mcu_output_0x225_225();
  ::jmc_auto::canbus::Gw_mcu_output_0x225_225* temp = gw_mcu_output_0x225_225_;
  gw_mcu_output_0x225_225_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_mcu_output_0x225_225(::jmc_auto::canbus::Gw_mcu_output_0x225_225* gw_mcu_output_0x225_225) {
  delete gw_mcu_output_0x225_225_;
  gw_mcu_output_0x225_225_ = gw_mcu_output_0x225_225;
  if (gw_mcu_output_0x225_225) {
    set_has_gw_mcu_output_0x225_225();
  } else {
    clear_has_gw_mcu_output_0x225_225();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_mcu_output_0x225_225)
}

// optional .jmc_auto.canbus.Gw_abs_sts_0x221_221 gw_abs_sts_0x221_221 = 14;
inline bool Teshun::has_gw_abs_sts_0x221_221() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Teshun::set_has_gw_abs_sts_0x221_221() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Teshun::clear_has_gw_abs_sts_0x221_221() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Teshun::clear_gw_abs_sts_0x221_221() {
  if (gw_abs_sts_0x221_221_ != NULL) gw_abs_sts_0x221_221_->::jmc_auto::canbus::Gw_abs_sts_0x221_221::Clear();
  clear_has_gw_abs_sts_0x221_221();
}
inline const ::jmc_auto::canbus::Gw_abs_sts_0x221_221& Teshun::gw_abs_sts_0x221_221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_abs_sts_0x221_221)
  return gw_abs_sts_0x221_221_ != NULL ? *gw_abs_sts_0x221_221_
                         : *::jmc_auto::canbus::Gw_abs_sts_0x221_221::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221* Teshun::mutable_gw_abs_sts_0x221_221() {
  set_has_gw_abs_sts_0x221_221();
  if (gw_abs_sts_0x221_221_ == NULL) {
    gw_abs_sts_0x221_221_ = new ::jmc_auto::canbus::Gw_abs_sts_0x221_221;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_abs_sts_0x221_221)
  return gw_abs_sts_0x221_221_;
}
inline ::jmc_auto::canbus::Gw_abs_sts_0x221_221* Teshun::release_gw_abs_sts_0x221_221() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_abs_sts_0x221_221)
  clear_has_gw_abs_sts_0x221_221();
  ::jmc_auto::canbus::Gw_abs_sts_0x221_221* temp = gw_abs_sts_0x221_221_;
  gw_abs_sts_0x221_221_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_abs_sts_0x221_221(::jmc_auto::canbus::Gw_abs_sts_0x221_221* gw_abs_sts_0x221_221) {
  delete gw_abs_sts_0x221_221_;
  gw_abs_sts_0x221_221_ = gw_abs_sts_0x221_221;
  if (gw_abs_sts_0x221_221) {
    set_has_gw_abs_sts_0x221_221();
  } else {
    clear_has_gw_abs_sts_0x221_221();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_abs_sts_0x221_221)
}

// optional .jmc_auto.canbus.Ibc_status_0x122_122 ibc_status_0x122_122 = 15;
inline bool Teshun::has_ibc_status_0x122_122() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Teshun::set_has_ibc_status_0x122_122() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Teshun::clear_has_ibc_status_0x122_122() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Teshun::clear_ibc_status_0x122_122() {
  if (ibc_status_0x122_122_ != NULL) ibc_status_0x122_122_->::jmc_auto::canbus::Ibc_status_0x122_122::Clear();
  clear_has_ibc_status_0x122_122();
}
inline const ::jmc_auto::canbus::Ibc_status_0x122_122& Teshun::ibc_status_0x122_122() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.ibc_status_0x122_122)
  return ibc_status_0x122_122_ != NULL ? *ibc_status_0x122_122_
                         : *::jmc_auto::canbus::Ibc_status_0x122_122::internal_default_instance();
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122* Teshun::mutable_ibc_status_0x122_122() {
  set_has_ibc_status_0x122_122();
  if (ibc_status_0x122_122_ == NULL) {
    ibc_status_0x122_122_ = new ::jmc_auto::canbus::Ibc_status_0x122_122;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.ibc_status_0x122_122)
  return ibc_status_0x122_122_;
}
inline ::jmc_auto::canbus::Ibc_status_0x122_122* Teshun::release_ibc_status_0x122_122() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.ibc_status_0x122_122)
  clear_has_ibc_status_0x122_122();
  ::jmc_auto::canbus::Ibc_status_0x122_122* temp = ibc_status_0x122_122_;
  ibc_status_0x122_122_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_ibc_status_0x122_122(::jmc_auto::canbus::Ibc_status_0x122_122* ibc_status_0x122_122) {
  delete ibc_status_0x122_122_;
  ibc_status_0x122_122_ = ibc_status_0x122_122;
  if (ibc_status_0x122_122) {
    set_has_ibc_status_0x122_122();
  } else {
    clear_has_ibc_status_0x122_122();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.ibc_status_0x122_122)
}

// optional .jmc_auto.canbus.Gw_vcu_whltq_0x107_107 gw_vcu_whltq_0x107_107 = 16;
inline bool Teshun::has_gw_vcu_whltq_0x107_107() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Teshun::set_has_gw_vcu_whltq_0x107_107() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Teshun::clear_has_gw_vcu_whltq_0x107_107() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Teshun::clear_gw_vcu_whltq_0x107_107() {
  if (gw_vcu_whltq_0x107_107_ != NULL) gw_vcu_whltq_0x107_107_->::jmc_auto::canbus::Gw_vcu_whltq_0x107_107::Clear();
  clear_has_gw_vcu_whltq_0x107_107();
}
inline const ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107& Teshun::gw_vcu_whltq_0x107_107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_whltq_0x107_107)
  return gw_vcu_whltq_0x107_107_ != NULL ? *gw_vcu_whltq_0x107_107_
                         : *::jmc_auto::canbus::Gw_vcu_whltq_0x107_107::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* Teshun::mutable_gw_vcu_whltq_0x107_107() {
  set_has_gw_vcu_whltq_0x107_107();
  if (gw_vcu_whltq_0x107_107_ == NULL) {
    gw_vcu_whltq_0x107_107_ = new ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_whltq_0x107_107)
  return gw_vcu_whltq_0x107_107_;
}
inline ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* Teshun::release_gw_vcu_whltq_0x107_107() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_whltq_0x107_107)
  clear_has_gw_vcu_whltq_0x107_107();
  ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* temp = gw_vcu_whltq_0x107_107_;
  gw_vcu_whltq_0x107_107_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_whltq_0x107_107(::jmc_auto::canbus::Gw_vcu_whltq_0x107_107* gw_vcu_whltq_0x107_107) {
  delete gw_vcu_whltq_0x107_107_;
  gw_vcu_whltq_0x107_107_ = gw_vcu_whltq_0x107_107;
  if (gw_vcu_whltq_0x107_107) {
    set_has_gw_vcu_whltq_0x107_107();
  } else {
    clear_has_gw_vcu_whltq_0x107_107();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_whltq_0x107_107)
}

// optional .jmc_auto.canbus.Bcm_bodysts_0x344_344 bcm_bodysts_0x344_344 = 17;
inline bool Teshun::has_bcm_bodysts_0x344_344() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Teshun::set_has_bcm_bodysts_0x344_344() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Teshun::clear_has_bcm_bodysts_0x344_344() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Teshun::clear_bcm_bodysts_0x344_344() {
  if (bcm_bodysts_0x344_344_ != NULL) bcm_bodysts_0x344_344_->::jmc_auto::canbus::Bcm_bodysts_0x344_344::Clear();
  clear_has_bcm_bodysts_0x344_344();
}
inline const ::jmc_auto::canbus::Bcm_bodysts_0x344_344& Teshun::bcm_bodysts_0x344_344() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.bcm_bodysts_0x344_344)
  return bcm_bodysts_0x344_344_ != NULL ? *bcm_bodysts_0x344_344_
                         : *::jmc_auto::canbus::Bcm_bodysts_0x344_344::internal_default_instance();
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344* Teshun::mutable_bcm_bodysts_0x344_344() {
  set_has_bcm_bodysts_0x344_344();
  if (bcm_bodysts_0x344_344_ == NULL) {
    bcm_bodysts_0x344_344_ = new ::jmc_auto::canbus::Bcm_bodysts_0x344_344;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.bcm_bodysts_0x344_344)
  return bcm_bodysts_0x344_344_;
}
inline ::jmc_auto::canbus::Bcm_bodysts_0x344_344* Teshun::release_bcm_bodysts_0x344_344() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.bcm_bodysts_0x344_344)
  clear_has_bcm_bodysts_0x344_344();
  ::jmc_auto::canbus::Bcm_bodysts_0x344_344* temp = bcm_bodysts_0x344_344_;
  bcm_bodysts_0x344_344_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_bcm_bodysts_0x344_344(::jmc_auto::canbus::Bcm_bodysts_0x344_344* bcm_bodysts_0x344_344) {
  delete bcm_bodysts_0x344_344_;
  bcm_bodysts_0x344_344_ = bcm_bodysts_0x344_344;
  if (bcm_bodysts_0x344_344) {
    set_has_bcm_bodysts_0x344_344();
  } else {
    clear_has_bcm_bodysts_0x344_344();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.bcm_bodysts_0x344_344)
}

// optional .jmc_auto.canbus.Gw_bms_display_0x323_323 gw_bms_display_0x323_323 = 18;
inline bool Teshun::has_gw_bms_display_0x323_323() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Teshun::set_has_gw_bms_display_0x323_323() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Teshun::clear_has_gw_bms_display_0x323_323() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Teshun::clear_gw_bms_display_0x323_323() {
  if (gw_bms_display_0x323_323_ != NULL) gw_bms_display_0x323_323_->::jmc_auto::canbus::Gw_bms_display_0x323_323::Clear();
  clear_has_gw_bms_display_0x323_323();
}
inline const ::jmc_auto::canbus::Gw_bms_display_0x323_323& Teshun::gw_bms_display_0x323_323() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_bms_display_0x323_323)
  return gw_bms_display_0x323_323_ != NULL ? *gw_bms_display_0x323_323_
                         : *::jmc_auto::canbus::Gw_bms_display_0x323_323::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_bms_display_0x323_323* Teshun::mutable_gw_bms_display_0x323_323() {
  set_has_gw_bms_display_0x323_323();
  if (gw_bms_display_0x323_323_ == NULL) {
    gw_bms_display_0x323_323_ = new ::jmc_auto::canbus::Gw_bms_display_0x323_323;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_bms_display_0x323_323)
  return gw_bms_display_0x323_323_;
}
inline ::jmc_auto::canbus::Gw_bms_display_0x323_323* Teshun::release_gw_bms_display_0x323_323() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_bms_display_0x323_323)
  clear_has_gw_bms_display_0x323_323();
  ::jmc_auto::canbus::Gw_bms_display_0x323_323* temp = gw_bms_display_0x323_323_;
  gw_bms_display_0x323_323_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_bms_display_0x323_323(::jmc_auto::canbus::Gw_bms_display_0x323_323* gw_bms_display_0x323_323) {
  delete gw_bms_display_0x323_323_;
  gw_bms_display_0x323_323_ = gw_bms_display_0x323_323;
  if (gw_bms_display_0x323_323) {
    set_has_gw_bms_display_0x323_323();
  } else {
    clear_has_gw_bms_display_0x323_323();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_bms_display_0x323_323)
}

// optional .jmc_auto.canbus.Adu_bodycontrol_0x333_333 adu_bodycontrol_0x333_333 = 19;
inline bool Teshun::has_adu_bodycontrol_0x333_333() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Teshun::set_has_adu_bodycontrol_0x333_333() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Teshun::clear_has_adu_bodycontrol_0x333_333() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Teshun::clear_adu_bodycontrol_0x333_333() {
  if (adu_bodycontrol_0x333_333_ != NULL) adu_bodycontrol_0x333_333_->::jmc_auto::canbus::Adu_bodycontrol_0x333_333::Clear();
  clear_has_adu_bodycontrol_0x333_333();
}
inline const ::jmc_auto::canbus::Adu_bodycontrol_0x333_333& Teshun::adu_bodycontrol_0x333_333() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.adu_bodycontrol_0x333_333)
  return adu_bodycontrol_0x333_333_ != NULL ? *adu_bodycontrol_0x333_333_
                         : *::jmc_auto::canbus::Adu_bodycontrol_0x333_333::internal_default_instance();
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* Teshun::mutable_adu_bodycontrol_0x333_333() {
  set_has_adu_bodycontrol_0x333_333();
  if (adu_bodycontrol_0x333_333_ == NULL) {
    adu_bodycontrol_0x333_333_ = new ::jmc_auto::canbus::Adu_bodycontrol_0x333_333;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.adu_bodycontrol_0x333_333)
  return adu_bodycontrol_0x333_333_;
}
inline ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* Teshun::release_adu_bodycontrol_0x333_333() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.adu_bodycontrol_0x333_333)
  clear_has_adu_bodycontrol_0x333_333();
  ::jmc_auto::canbus::Adu_bodycontrol_0x333_333* temp = adu_bodycontrol_0x333_333_;
  adu_bodycontrol_0x333_333_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_adu_bodycontrol_0x333_333(::jmc_auto::canbus::Adu_bodycontrol_0x333_333* adu_bodycontrol_0x333_333) {
  delete adu_bodycontrol_0x333_333_;
  adu_bodycontrol_0x333_333_ = adu_bodycontrol_0x333_333;
  if (adu_bodycontrol_0x333_333) {
    set_has_adu_bodycontrol_0x333_333();
  } else {
    clear_has_adu_bodycontrol_0x333_333();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.adu_bodycontrol_0x333_333)
}

// optional .jmc_auto.canbus.Gw_bms_sts_0x181_181 gw_bms_sts_0x181_181 = 20;
inline bool Teshun::has_gw_bms_sts_0x181_181() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Teshun::set_has_gw_bms_sts_0x181_181() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Teshun::clear_has_gw_bms_sts_0x181_181() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Teshun::clear_gw_bms_sts_0x181_181() {
  if (gw_bms_sts_0x181_181_ != NULL) gw_bms_sts_0x181_181_->::jmc_auto::canbus::Gw_bms_sts_0x181_181::Clear();
  clear_has_gw_bms_sts_0x181_181();
}
inline const ::jmc_auto::canbus::Gw_bms_sts_0x181_181& Teshun::gw_bms_sts_0x181_181() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_bms_sts_0x181_181)
  return gw_bms_sts_0x181_181_ != NULL ? *gw_bms_sts_0x181_181_
                         : *::jmc_auto::canbus::Gw_bms_sts_0x181_181::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181* Teshun::mutable_gw_bms_sts_0x181_181() {
  set_has_gw_bms_sts_0x181_181();
  if (gw_bms_sts_0x181_181_ == NULL) {
    gw_bms_sts_0x181_181_ = new ::jmc_auto::canbus::Gw_bms_sts_0x181_181;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_bms_sts_0x181_181)
  return gw_bms_sts_0x181_181_;
}
inline ::jmc_auto::canbus::Gw_bms_sts_0x181_181* Teshun::release_gw_bms_sts_0x181_181() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_bms_sts_0x181_181)
  clear_has_gw_bms_sts_0x181_181();
  ::jmc_auto::canbus::Gw_bms_sts_0x181_181* temp = gw_bms_sts_0x181_181_;
  gw_bms_sts_0x181_181_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_bms_sts_0x181_181(::jmc_auto::canbus::Gw_bms_sts_0x181_181* gw_bms_sts_0x181_181) {
  delete gw_bms_sts_0x181_181_;
  gw_bms_sts_0x181_181_ = gw_bms_sts_0x181_181;
  if (gw_bms_sts_0x181_181) {
    set_has_gw_bms_sts_0x181_181();
  } else {
    clear_has_gw_bms_sts_0x181_181();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_bms_sts_0x181_181)
}

// optional .jmc_auto.canbus.Gw_vcu_control_0x185_185 gw_vcu_control_0x185_185 = 21;
inline bool Teshun::has_gw_vcu_control_0x185_185() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Teshun::set_has_gw_vcu_control_0x185_185() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Teshun::clear_has_gw_vcu_control_0x185_185() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Teshun::clear_gw_vcu_control_0x185_185() {
  if (gw_vcu_control_0x185_185_ != NULL) gw_vcu_control_0x185_185_->::jmc_auto::canbus::Gw_vcu_control_0x185_185::Clear();
  clear_has_gw_vcu_control_0x185_185();
}
inline const ::jmc_auto::canbus::Gw_vcu_control_0x185_185& Teshun::gw_vcu_control_0x185_185() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_control_0x185_185)
  return gw_vcu_control_0x185_185_ != NULL ? *gw_vcu_control_0x185_185_
                         : *::jmc_auto::canbus::Gw_vcu_control_0x185_185::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_control_0x185_185* Teshun::mutable_gw_vcu_control_0x185_185() {
  set_has_gw_vcu_control_0x185_185();
  if (gw_vcu_control_0x185_185_ == NULL) {
    gw_vcu_control_0x185_185_ = new ::jmc_auto::canbus::Gw_vcu_control_0x185_185;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_control_0x185_185)
  return gw_vcu_control_0x185_185_;
}
inline ::jmc_auto::canbus::Gw_vcu_control_0x185_185* Teshun::release_gw_vcu_control_0x185_185() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_control_0x185_185)
  clear_has_gw_vcu_control_0x185_185();
  ::jmc_auto::canbus::Gw_vcu_control_0x185_185* temp = gw_vcu_control_0x185_185_;
  gw_vcu_control_0x185_185_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_control_0x185_185(::jmc_auto::canbus::Gw_vcu_control_0x185_185* gw_vcu_control_0x185_185) {
  delete gw_vcu_control_0x185_185_;
  gw_vcu_control_0x185_185_ = gw_vcu_control_0x185_185;
  if (gw_vcu_control_0x185_185) {
    set_has_gw_vcu_control_0x185_185();
  } else {
    clear_has_gw_vcu_control_0x185_185();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_control_0x185_185)
}

// optional .jmc_auto.canbus.Ibc_status2_0x124_124 ibc_status2_0x124_124 = 22;
inline bool Teshun::has_ibc_status2_0x124_124() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Teshun::set_has_ibc_status2_0x124_124() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Teshun::clear_has_ibc_status2_0x124_124() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Teshun::clear_ibc_status2_0x124_124() {
  if (ibc_status2_0x124_124_ != NULL) ibc_status2_0x124_124_->::jmc_auto::canbus::Ibc_status2_0x124_124::Clear();
  clear_has_ibc_status2_0x124_124();
}
inline const ::jmc_auto::canbus::Ibc_status2_0x124_124& Teshun::ibc_status2_0x124_124() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.ibc_status2_0x124_124)
  return ibc_status2_0x124_124_ != NULL ? *ibc_status2_0x124_124_
                         : *::jmc_auto::canbus::Ibc_status2_0x124_124::internal_default_instance();
}
inline ::jmc_auto::canbus::Ibc_status2_0x124_124* Teshun::mutable_ibc_status2_0x124_124() {
  set_has_ibc_status2_0x124_124();
  if (ibc_status2_0x124_124_ == NULL) {
    ibc_status2_0x124_124_ = new ::jmc_auto::canbus::Ibc_status2_0x124_124;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.ibc_status2_0x124_124)
  return ibc_status2_0x124_124_;
}
inline ::jmc_auto::canbus::Ibc_status2_0x124_124* Teshun::release_ibc_status2_0x124_124() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.ibc_status2_0x124_124)
  clear_has_ibc_status2_0x124_124();
  ::jmc_auto::canbus::Ibc_status2_0x124_124* temp = ibc_status2_0x124_124_;
  ibc_status2_0x124_124_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_ibc_status2_0x124_124(::jmc_auto::canbus::Ibc_status2_0x124_124* ibc_status2_0x124_124) {
  delete ibc_status2_0x124_124_;
  ibc_status2_0x124_124_ = ibc_status2_0x124_124;
  if (ibc_status2_0x124_124) {
    set_has_ibc_status2_0x124_124();
  } else {
    clear_has_ibc_status2_0x124_124();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.ibc_status2_0x124_124)
}

// optional .jmc_auto.canbus.Gw_vcu_hmi_0x358_358 gw_vcu_hmi_0x358_358 = 23;
inline bool Teshun::has_gw_vcu_hmi_0x358_358() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Teshun::set_has_gw_vcu_hmi_0x358_358() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Teshun::clear_has_gw_vcu_hmi_0x358_358() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Teshun::clear_gw_vcu_hmi_0x358_358() {
  if (gw_vcu_hmi_0x358_358_ != NULL) gw_vcu_hmi_0x358_358_->::jmc_auto::canbus::Gw_vcu_hmi_0x358_358::Clear();
  clear_has_gw_vcu_hmi_0x358_358();
}
inline const ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358& Teshun::gw_vcu_hmi_0x358_358() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Teshun.gw_vcu_hmi_0x358_358)
  return gw_vcu_hmi_0x358_358_ != NULL ? *gw_vcu_hmi_0x358_358_
                         : *::jmc_auto::canbus::Gw_vcu_hmi_0x358_358::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* Teshun::mutable_gw_vcu_hmi_0x358_358() {
  set_has_gw_vcu_hmi_0x358_358();
  if (gw_vcu_hmi_0x358_358_ == NULL) {
    gw_vcu_hmi_0x358_358_ = new ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Teshun.gw_vcu_hmi_0x358_358)
  return gw_vcu_hmi_0x358_358_;
}
inline ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* Teshun::release_gw_vcu_hmi_0x358_358() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Teshun.gw_vcu_hmi_0x358_358)
  clear_has_gw_vcu_hmi_0x358_358();
  ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* temp = gw_vcu_hmi_0x358_358_;
  gw_vcu_hmi_0x358_358_ = NULL;
  return temp;
}
inline void Teshun::set_allocated_gw_vcu_hmi_0x358_358(::jmc_auto::canbus::Gw_vcu_hmi_0x358_358* gw_vcu_hmi_0x358_358) {
  delete gw_vcu_hmi_0x358_358_;
  gw_vcu_hmi_0x358_358_ = gw_vcu_hmi_0x358_358;
  if (gw_vcu_hmi_0x358_358) {
    set_has_gw_vcu_hmi_0x358_358();
  } else {
    clear_has_gw_vcu_hmi_0x358_358();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Teshun.gw_vcu_hmi_0x358_358)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType>() {
  return ::jmc_auto::canbus::Epb_status_0x152_152_Epb_brakelampreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType>() {
  return ::jmc_auto::canbus::Epb_status_0x152_152_Epb_sysfaultstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType>() {
  return ::jmc_auto::canbus::Epb_status_0x152_152_Epb_parkingstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType>() {
  return ::jmc_auto::canbus::Epb_status_0x152_152_Epb_switchstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType>() {
  return ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdreristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType>() {
  return ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdrelestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType>() {
  return ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType>() {
  return ::jmc_auto::canbus::Gw_abs_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_chargeplugstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType>() {
  return ::jmc_auto::canbus::Bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_nlockrequestType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_plockrequestType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehicle_modeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engaddfuel_rqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_fan_rqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_engstart_rqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_dcu_parkrequestType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_actualgearlevelpositionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_chgstart_alwType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bms_hvonoff_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_vehfailgrade_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_running_modeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_bp_sleep_allowedType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_inType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType>() {
  return ::jmc_auto::canbus::Gw_vcu_sts_0x218_218_Vcu_hvil_outType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType>() {
  return ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_rawflagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType>() {
  return ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_controtorque_enableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType>() {
  return ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_positionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType>() {
  return ::jmc_auto::canbus::Adu_controldrive_0x120_120_Adu_targetgear_enableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType>() {
  return ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_sts_vcuType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType>() {
  return ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_brake_flagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType>() {
  return ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_tractor_flagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType>() {
  return ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_pwt_mode_dashType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType>() {
  return ::jmc_auto::canbus::Gw_vcu_control2_0x131_131_Vcu_mcu_motor1_capdischarge_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Scu_shifterlockstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterlockstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionfailureType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_ShifterpositioninvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType>() {
  return ::jmc_auto::canbus::Gw_scu_shiftersts_0xc8_c8_Sys_sts_scuType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_vehicleerror_interveneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torque_controlstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_torquedriver_interveneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearpos_controlstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_gearposdriver_interveneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_veh_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType>() {
  return ::jmc_auto::canbus::Gw_vcu_drivests_0x10a_10a_Vcu_axlespdstType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType>() {
  return ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_parkrelease_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType>() {
  return ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_standstillType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType>() {
  return ::jmc_auto::canbus::Adu_controlbrake_0x110_110_Adu_controbrk_enableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType>() {
  return ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_controlstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType>() {
  return ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_driver_interveneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType>() {
  return ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_sasfailurestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType>() {
  return ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquedirType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType>() {
  return ::jmc_auto::canbus::Eps2_status_0x112_112_Eps_torsionbartorquevalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType>() {
  return ::jmc_auto::canbus::Gw_mcu_power_0x226_226_Mcu_sys_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType>() {
  return ::jmc_auto::canbus::Adu_controleps2_0x100_100_Adu_controepsenableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType>() {
  return ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_work_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType>() {
  return ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_ctrmode_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType>() {
  return ::jmc_auto::canbus::Gw_mcu_output_0x225_225_Mcu_capacitor_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType>() {
  return ::jmc_auto::canbus::Gw_abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_parkrelease_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_mastercylinderpressvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakeactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakereqavailabeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_brakepressurereqackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_controlstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_driver_interveneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType>() {
  return ::jmc_auto::canbus::Ibc_status_0x122_122_Ibc_systemstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType>() {
  return ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_kickdownType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType>() {
  return ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_accpedalratioerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType>() {
  return ::jmc_auto::canbus::Gw_vcu_whltq_0x107_107_Vcu_brkpedalstasusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_brakelampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rearfoglampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_frontfoglampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_washerstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_wiperstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_doorlockfeedbackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hornstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_highbeamlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_lowbeamlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_positionlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_hazardlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_rightturnlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType>() {
  return ::jmc_auto::canbus::Bcm_bodysts_0x344_344_Bcm_leftturnlampstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rearfoglampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_frontfoglampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_washercontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_wipercontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_doorcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_horncontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_highbeamlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_lowbeamlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_positionlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_hazardlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_rightturnlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType>() {
  return ::jmc_auto::canbus::Adu_bodycontrol_0x333_333_Adu_leftturnlampcontrolType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_err_levType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_idu_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_batbalance_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_chg_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_balance_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvdown_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_hvonoff_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType>() {
  return ::jmc_auto::canbus::Gw_bms_sts_0x181_181_Bms_sys_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_ems_engoperationstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType>() {
  return ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_asd_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType>() {
  return ::jmc_auto::canbus::Gw_vcu_control_0x185_185_Vcu_mcu_motor1_ctrmode_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType>() {
  return ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_decelerationvaildType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType>() {
  return ::jmc_auto::canbus::Ibc_status2_0x124_124_Ibc_brktmcpositionvaildType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_VehiclehvstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatcircuiterrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackheatstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_PackcoolingcircuiterrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_MotorcoolingcircuiterrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_batteryvoltageerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_cruisecontrolstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_driverstatus_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_drivemode_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_vehchg_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_tbox_veh_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_energyrecoverymodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_vehhvil_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_mot_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packvoltoff_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_chggearlvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_packsys_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_drvsys_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType>() {
  return ::jmc_auto::canbus::Gw_vcu_hmi_0x358_358_Vcu_icm_veh_errType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fteshun_2eproto__INCLUDED
