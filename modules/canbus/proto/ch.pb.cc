// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/canbus/proto/ch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace canbus {
class Control_command_115DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_command_115> {
} _Control_command_115_default_instance_;
class Gear_command_114DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gear_command_114> {
} _Gear_command_114_default_instance_;
class Brake_command_111DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Brake_command_111> {
} _Brake_command_111_default_instance_;
class Throttle_command_110DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Throttle_command_110> {
} _Throttle_command_110_default_instance_;
class Turnsignal_command_113DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Turnsignal_command_113> {
} _Turnsignal_command_113_default_instance_;
class Steer_command_112DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Steer_command_112> {
} _Steer_command_112_default_instance_;
class Brake_status__511DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Brake_status__511> {
} _Brake_status__511_default_instance_;
class Throttle_status__510DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Throttle_status__510> {
} _Throttle_status__510_default_instance_;
class Turnsignal_status__513DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Turnsignal_status__513> {
} _Turnsignal_status__513_default_instance_;
class Steer_status__512DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Steer_status__512> {
} _Steer_status__512_default_instance_;
class Ecu_status_1_515DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ecu_status_1_515> {
} _Ecu_status_1_515_default_instance_;
class Gear_status_514DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gear_status_514> {
} _Gear_status_514_default_instance_;
class Ecu_status_3_517DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ecu_status_3_517> {
} _Ecu_status_3_517_default_instance_;
class Ecu_status_2_516DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ecu_status_2_516> {
} _Ecu_status_2_516_default_instance_;
class ChDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ch> {
} _Ch_default_instance_;

namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[21];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_command_115, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_command_115, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_command_115, ctrl_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_command_114, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_command_114, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_command_114, gear_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_command_111, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_command_111, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_command_111, brake_pedal_en_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_command_111, brake_pedal_cmd_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_command_110, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_command_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_command_110, throttle_pedal_en_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_command_110, throttle_pedal_cmd_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_command_113, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_command_113, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_command_113, turn_signal_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_command_112, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_command_112, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_command_112, steer_angle_en_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_command_112, steer_angle_cmd_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, brake_pedal_en_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, brake_pedal_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, brake_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, emergency_btn_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, front_bump_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, back_bump_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake_status__511, overspd_env_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, throttle_pedal_en_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, throttle_pedal_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, drive_motor_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle_status__510, battery_bms_err_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_status__513, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_status__513, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turnsignal_status__513, turn_signal_sts_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, steer_angle_en_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, steer_angle_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, steer_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Steer_status__512, sensor_err_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, acc_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, ctrl_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, chassis_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_1_515, chassis_err_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_status_514, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_status_514, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear_status_514, gear_sts_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_3_517, ultrasound_dist_8_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, battery_remaining_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, battery_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, battery_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ecu_status_2_516, battery_temperature_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, control_command_115_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, gear_command_114_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, brake_command_111_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, throttle_command_110_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, turnsignal_command_113_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, steer_command_112_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, brake_status__511_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, throttle_status__510_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, turnsignal_status__513_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, steer_status__512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, ecu_status_1_515_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, gear_status_514_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, ecu_status_3_517_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch, ecu_status_2_516_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Control_command_115)},
  { 7, 13, sizeof(Gear_command_114)},
  { 14, 21, sizeof(Brake_command_111)},
  { 23, 30, sizeof(Throttle_command_110)},
  { 32, 38, sizeof(Turnsignal_command_113)},
  { 39, 46, sizeof(Steer_command_112)},
  { 48, 60, sizeof(Brake_status__511)},
  { 67, 76, sizeof(Throttle_status__510)},
  { 80, 86, sizeof(Turnsignal_status__513)},
  { 87, 96, sizeof(Steer_status__512)},
  { 100, 110, sizeof(Ecu_status_1_515)},
  { 115, 121, sizeof(Gear_status_514)},
  { 122, 135, sizeof(Ecu_status_3_517)},
  { 143, 152, sizeof(Ecu_status_2_516)},
  { 156, 175, sizeof(Ch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_command_115_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gear_command_114_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Brake_command_111_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Throttle_command_110_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Turnsignal_command_113_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Steer_command_112_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Brake_status__511_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Throttle_status__510_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Turnsignal_status__513_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Steer_status__512_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ecu_status_1_515_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gear_status_514_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ecu_status_3_517_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ecu_status_2_516_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ch_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/canbus/proto/ch.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _Control_command_115_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Gear_command_114_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Brake_command_111_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Throttle_command_110_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Turnsignal_command_113_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Steer_command_112_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Brake_status__511_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Throttle_status__510_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Turnsignal_status__513_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Steer_status__512_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Ecu_status_1_515_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Gear_status_514_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Ecu_status_3_517_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Ecu_status_2_516_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Ch_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Control_command_115_default_instance_.DefaultConstruct();
  _Gear_command_114_default_instance_.DefaultConstruct();
  _Brake_command_111_default_instance_.DefaultConstruct();
  _Throttle_command_110_default_instance_.DefaultConstruct();
  _Turnsignal_command_113_default_instance_.DefaultConstruct();
  _Steer_command_112_default_instance_.DefaultConstruct();
  _Brake_status__511_default_instance_.DefaultConstruct();
  _Throttle_status__510_default_instance_.DefaultConstruct();
  _Turnsignal_status__513_default_instance_.DefaultConstruct();
  _Steer_status__512_default_instance_.DefaultConstruct();
  _Ecu_status_1_515_default_instance_.DefaultConstruct();
  _Gear_status_514_default_instance_.DefaultConstruct();
  _Ecu_status_3_517_default_instance_.DefaultConstruct();
  _Ecu_status_2_516_default_instance_.DefaultConstruct();
  _Ch_default_instance_.DefaultConstruct();
  _Ch_default_instance_.get_mutable()->control_command_115_ = const_cast< ::jmc_auto::canbus::Control_command_115*>(
      ::jmc_auto::canbus::Control_command_115::internal_default_instance());
  _Ch_default_instance_.get_mutable()->gear_command_114_ = const_cast< ::jmc_auto::canbus::Gear_command_114*>(
      ::jmc_auto::canbus::Gear_command_114::internal_default_instance());
  _Ch_default_instance_.get_mutable()->brake_command_111_ = const_cast< ::jmc_auto::canbus::Brake_command_111*>(
      ::jmc_auto::canbus::Brake_command_111::internal_default_instance());
  _Ch_default_instance_.get_mutable()->throttle_command_110_ = const_cast< ::jmc_auto::canbus::Throttle_command_110*>(
      ::jmc_auto::canbus::Throttle_command_110::internal_default_instance());
  _Ch_default_instance_.get_mutable()->turnsignal_command_113_ = const_cast< ::jmc_auto::canbus::Turnsignal_command_113*>(
      ::jmc_auto::canbus::Turnsignal_command_113::internal_default_instance());
  _Ch_default_instance_.get_mutable()->steer_command_112_ = const_cast< ::jmc_auto::canbus::Steer_command_112*>(
      ::jmc_auto::canbus::Steer_command_112::internal_default_instance());
  _Ch_default_instance_.get_mutable()->brake_status__511_ = const_cast< ::jmc_auto::canbus::Brake_status__511*>(
      ::jmc_auto::canbus::Brake_status__511::internal_default_instance());
  _Ch_default_instance_.get_mutable()->throttle_status__510_ = const_cast< ::jmc_auto::canbus::Throttle_status__510*>(
      ::jmc_auto::canbus::Throttle_status__510::internal_default_instance());
  _Ch_default_instance_.get_mutable()->turnsignal_status__513_ = const_cast< ::jmc_auto::canbus::Turnsignal_status__513*>(
      ::jmc_auto::canbus::Turnsignal_status__513::internal_default_instance());
  _Ch_default_instance_.get_mutable()->steer_status__512_ = const_cast< ::jmc_auto::canbus::Steer_status__512*>(
      ::jmc_auto::canbus::Steer_status__512::internal_default_instance());
  _Ch_default_instance_.get_mutable()->ecu_status_1_515_ = const_cast< ::jmc_auto::canbus::Ecu_status_1_515*>(
      ::jmc_auto::canbus::Ecu_status_1_515::internal_default_instance());
  _Ch_default_instance_.get_mutable()->gear_status_514_ = const_cast< ::jmc_auto::canbus::Gear_status_514*>(
      ::jmc_auto::canbus::Gear_status_514::internal_default_instance());
  _Ch_default_instance_.get_mutable()->ecu_status_3_517_ = const_cast< ::jmc_auto::canbus::Ecu_status_3_517*>(
      ::jmc_auto::canbus::Ecu_status_3_517::internal_default_instance());
  _Ch_default_instance_.get_mutable()->ecu_status_2_516_ = const_cast< ::jmc_auto::canbus::Ecu_status_2_516*>(
      ::jmc_auto::canbus::Ecu_status_2_516::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\035modules/canbus/proto/ch.proto\022\017jmc_aut"
      "o.canbus\"\243\001\n\023Control_command_115\022C\n\010ctrl"
      "_cmd\030\001 \001(\01621.jmc_auto.canbus.Control_com"
      "mand_115.Ctrl_cmdType\"G\n\014Ctrl_cmdType\022\033\n"
      "\027CTRL_CMD_OUT_OF_CONTROL\020\000\022\032\n\026CTRL_CMD_U"
      "NDER_CONTROL\020\001\"\267\001\n\020Gear_command_114\022@\n\010g"
      "ear_cmd\030\001 \001(\0162..jmc_auto.canbus.Gear_com"
      "mand_114.Gear_cmdType\"a\n\014Gear_cmdType\022\021\n"
      "\rGEAR_CMD_PARK\020\001\022\024\n\020GEAR_CMD_REVERSE\020\002\022\024"
      "\n\020GEAR_CMD_NEUTRAL\020\003\022\022\n\016GEAR_CMD_DRIVE\020\004"
      "\"\341\001\n\021Brake_command_111\022W\n\023brake_pedal_en"
      "_ctrl\030\001 \001(\0162:.jmc_auto.canbus.Brake_comm"
      "and_111.Brake_pedal_en_ctrlType\022\027\n\017brake"
      "_pedal_cmd\030\002 \001(\005\"Z\n\027Brake_pedal_en_ctrlT"
      "ype\022\037\n\033BRAKE_PEDAL_EN_CTRL_DISABLE\020\000\022\036\n\032"
      "BRAKE_PEDAL_EN_CTRL_ENABLE\020\001\"\371\001\n\024Throttl"
      "e_command_110\022`\n\026throttle_pedal_en_ctrl\030"
      "\001 \001(\0162@.jmc_auto.canbus.Throttle_command"
      "_110.Throttle_pedal_en_ctrlType\022\032\n\022throt"
      "tle_pedal_cmd\030\002 \001(\005\"c\n\032Throttle_pedal_en"
      "_ctrlType\022\"\n\036THROTTLE_PEDAL_EN_CTRL_DISA"
      "BLE\020\000\022!\n\035THROTTLE_PEDAL_EN_CTRL_ENABLE\020\001"
      "\"\324\001\n\026Turnsignal_command_113\022T\n\017turn_sign"
      "al_cmd\030\001 \001(\0162;.jmc_auto.canbus.Turnsigna"
      "l_command_113.Turn_signal_cmdType\"d\n\023Tur"
      "n_signal_cmdType\022\030\n\024TURN_SIGNAL_CMD_NONE"
      "\020\000\022\030\n\024TURN_SIGNAL_CMD_LEFT\020\001\022\031\n\025TURN_SIG"
      "NAL_CMD_RIGHT\020\002\"\341\001\n\021Steer_command_112\022W\n"
      "\023steer_angle_en_ctrl\030\001 \001(\0162:.jmc_auto.ca"
      "nbus.Steer_command_112.Steer_angle_en_ct"
      "rlType\022\027\n\017steer_angle_cmd\030\002 \001(\001\"Z\n\027Steer"
      "_angle_en_ctrlType\022\037\n\033STEER_ANGLE_EN_CTR"
      "L_DISABLE\020\000\022\036\n\032STEER_ANGLE_EN_CTRL_ENABL"
      "E\020\001\"\223\010\n\021Brake_status__511\022U\n\022brake_pedal"
      "_en_sts\030\001 \001(\01629.jmc_auto.canbus.Brake_st"
      "atus__511.Brake_pedal_en_stsType\022\027\n\017brak"
      "e_pedal_sts\030\002 \001(\005\022C\n\tbrake_err\030\003 \001(\01620.j"
      "mc_auto.canbus.Brake_status__511.Brake_e"
      "rrType\022S\n\021emergency_btn_env\030\004 \001(\01628.jmc_"
      "auto.canbus.Brake_status__511.Emergency_"
      "btn_envType\022M\n\016front_bump_env\030\005 \001(\01625.jm"
      "c_auto.canbus.Brake_status__511.Front_bu"
      "mp_envType\022K\n\rback_bump_env\030\006 \001(\01624.jmc_"
      "auto.canbus.Brake_status__511.Back_bump_"
      "envType\022G\n\013overspd_env\030\007 \001(\01622.jmc_auto."
      "canbus.Brake_status__511.Overspd_envType"
      "\"x\n\026Brake_pedal_en_stsType\022\036\n\032BRAKE_PEDA"
      "L_EN_STS_DISABLE\020\000\022\035\n\031BRAKE_PEDAL_EN_STS"
      "_ENABLE\020\001\022\037\n\033BRAKE_PEDAL_EN_STS_TAKEOVER"
      "\020\002\"D\n\rBrake_errType\022\023\n\017BRAKE_ERR_NOERR\020\000"
      "\022\036\n\032BRAKE_ERR_BRAKE_SYSTEM_ERR\020\001\"`\n\025Emer"
      "gency_btn_envType\022\033\n\027EMERGENCY_BTN_ENV_N"
      "OENV\020\000\022*\n&EMERGENCY_BTN_ENV_EMERGENCY_BU"
      "TTON_ENV\020\001\"S\n\022Front_bump_envType\022\030\n\024FRON"
      "T_BUMP_ENV_NOENV\020\000\022#\n\037FRONT_BUMP_ENV_FRO"
      "NT_BUMPER_ENV\020\001\"O\n\021Back_bump_envType\022\027\n\023"
      "BACK_BUMP_ENV_NOENV\020\000\022!\n\035BACK_BUMP_ENV_B"
      "ACK_BUMPER_ENV\020\001\"G\n\017Overspd_envType\022\025\n\021O"
      "VERSPD_ENV_NOENV\020\000\022\035\n\031OVERSPD_ENV_OVERSP"
      "EED_ENV\020\001\"\351\004\n\024Throttle_status__510\022^\n\025th"
      "rottle_pedal_en_sts\030\001 \001(\0162\?.jmc_auto.can"
      "bus.Throttle_status__510.Throttle_pedal_"
      "en_stsType\022\032\n\022throttle_pedal_sts\030\002 \001(\005\022R"
      "\n\017drive_motor_err\030\003 \001(\01629.jmc_auto.canbu"
      "s.Throttle_status__510.Drive_motor_errTy"
      "pe\022R\n\017battery_bms_err\030\004 \001(\01629.jmc_auto.c"
      "anbus.Throttle_status__510.Battery_bms_e"
      "rrType\"\204\001\n\031Throttle_pedal_en_stsType\022!\n\035"
      "THROTTLE_PEDAL_EN_STS_DISABLE\020\000\022 \n\034THROT"
      "TLE_PEDAL_EN_STS_ENABLE\020\001\022\"\n\036THROTTLE_PE"
      "DAL_EN_STS_TAKEOVER\020\002\"S\n\023Drive_motor_err"
      "Type\022\031\n\025DRIVE_MOTOR_ERR_NOERR\020\000\022!\n\035DRIVE"
      "_MOTOR_ERR_DRV_MOTOR_ERR\020\001\"Q\n\023Battery_bm"
      "s_errType\022\031\n\025BATTERY_BMS_ERR_NOERR\020\000\022\037\n\033"
      "BATTERY_BMS_ERR_BATTERY_ERR\020\001\"\324\001\n\026Turnsi"
      "gnal_status__513\022T\n\017turn_signal_sts\030\001 \001("
      "\0162;.jmc_auto.canbus.Turnsignal_status__5"
      "13.Turn_signal_stsType\"d\n\023Turn_signal_st"
      "sType\022\030\n\024TURN_SIGNAL_STS_NONE\020\000\022\030\n\024TURN_"
      "SIGNAL_STS_LEFT\020\001\022\031\n\025TURN_SIGNAL_STS_RIG"
      "HT\020\002\"\227\004\n\021Steer_status__512\022U\n\022steer_angl"
      "e_en_sts\030\001 \001(\01629.jmc_auto.canbus.Steer_s"
      "tatus__512.Steer_angle_en_stsType\022\027\n\017ste"
      "er_angle_sts\030\002 \001(\001\022C\n\tsteer_err\030\003 \001(\01620."
      "jmc_auto.canbus.Steer_status__512.Steer_"
      "errType\022E\n\nsensor_err\030\004 \001(\01621.jmc_auto.c"
      "anbus.Steer_status__512.Sensor_errType\"x"
      "\n\026Steer_angle_en_stsType\022\036\n\032STEER_ANGLE_"
      "EN_STS_DISABLE\020\000\022\035\n\031STEER_ANGLE_EN_STS_E"
      "NABLE\020\001\022\037\n\033STEER_ANGLE_EN_STS_TAKEOVER\020\002"
      "\"C\n\rSteer_errType\022\023\n\017STEER_ERR_NOERR\020\000\022\035"
      "\n\031STEER_ERR_STEER_MOTOR_ERR\020\001\"G\n\016Sensor_"
      "errType\022\024\n\020SENSOR_ERR_NOERR\020\000\022\037\n\033SENSOR_"
      "ERR_STEER_SENSOR_ERR\020\001\"\351\001\n\020Ecu_status_1_"
      "515\022\r\n\005speed\030\001 \001(\001\022\021\n\tacc_speed\030\002 \001(\001\022@\n"
      "\010ctrl_sts\030\003 \001(\0162..jmc_auto.canbus.Ecu_st"
      "atus_1_515.Ctrl_stsType\022\023\n\013chassis_sts\030\004"
      " \001(\005\022\023\n\013chassis_err\030\005 \001(\005\"G\n\014Ctrl_stsTyp"
      "e\022\033\n\027CTRL_STS_OUT_OF_CONTROL\020\000\022\032\n\026CTRL_S"
      "TS_UNDER_CONTROL\020\001\"\265\001\n\017Gear_status_514\022\?"
      "\n\010gear_sts\030\001 \001(\0162-.jmc_auto.canbus.Gear_"
      "status_514.Gear_stsType\"a\n\014Gear_stsType\022"
      "\021\n\rGEAR_STS_PARK\020\001\022\024\n\020GEAR_STS_REVERSE\020\002"
      "\022\024\n\020GEAR_STS_NEUTRAL\020\003\022\022\n\016GEAR_STS_DRIVE"
      "\020\004\"\352\001\n\020Ecu_status_3_517\022\031\n\021ultrasound_di"
      "st_1\030\001 \001(\005\022\031\n\021ultrasound_dist_2\030\002 \001(\005\022\031\n"
      "\021ultrasound_dist_3\030\003 \001(\005\022\031\n\021ultrasound_d"
      "ist_4\030\004 \001(\005\022\031\n\021ultrasound_dist_5\030\005 \001(\005\022\031"
      "\n\021ultrasound_dist_6\030\006 \001(\005\022\031\n\021ultrasound_"
      "dist_7\030\007 \001(\005\022\031\n\021ultrasound_dist_8\030\010 \001(\005\""
      "\205\001\n\020Ecu_status_2_516\022\"\n\032battery_remainin"
      "g_capacity\030\001 \001(\005\022\027\n\017battery_voltage\030\002 \001("
      "\001\022\027\n\017battery_current\030\003 \001(\001\022\033\n\023battery_te"
      "mperature\030\004 \001(\005\"\216\007\n\002Ch\022A\n\023control_comman"
      "d_115\030\001 \001(\0132$.jmc_auto.canbus.Control_co"
      "mmand_115\022;\n\020gear_command_114\030\002 \001(\0132!.jm"
      "c_auto.canbus.Gear_command_114\022=\n\021brake_"
      "command_111\030\003 \001(\0132\".jmc_auto.canbus.Brak"
      "e_command_111\022C\n\024throttle_command_110\030\004 "
      "\001(\0132%.jmc_auto.canbus.Throttle_command_1"
      "10\022G\n\026turnsignal_command_113\030\005 \001(\0132\'.jmc"
      "_auto.canbus.Turnsignal_command_113\022=\n\021s"
      "teer_command_112\030\006 \001(\0132\".jmc_auto.canbus"
      ".Steer_command_112\022=\n\021brake_status__511\030"
      "\007 \001(\0132\".jmc_auto.canbus.Brake_status__51"
      "1\022C\n\024throttle_status__510\030\010 \001(\0132%.jmc_au"
      "to.canbus.Throttle_status__510\022G\n\026turnsi"
      "gnal_status__513\030\t \001(\0132\'.jmc_auto.canbus"
      ".Turnsignal_status__513\022=\n\021steer_status_"
      "_512\030\n \001(\0132\".jmc_auto.canbus.Steer_statu"
      "s__512\022;\n\020ecu_status_1_515\030\013 \001(\0132!.jmc_a"
      "uto.canbus.Ecu_status_1_515\0229\n\017gear_stat"
      "us_514\030\014 \001(\0132 .jmc_auto.canbus.Gear_stat"
      "us_514\022;\n\020ecu_status_3_517\030\r \001(\0132!.jmc_a"
      "uto.canbus.Ecu_status_3_517\022;\n\020ecu_statu"
      "s_2_516\030\016 \001(\0132!.jmc_auto.canbus.Ecu_stat"
      "us_2_516"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/ch.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto

const ::google::protobuf::EnumDescriptor* Control_command_115_Ctrl_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[0];
}
bool Control_command_115_Ctrl_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_OUT_OF_CONTROL;
const Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_UNDER_CONTROL;
const Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MIN;
const Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MAX;
const int Control_command_115::Ctrl_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gear_command_114_Gear_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[1];
}
bool Gear_command_114_Gear_cmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_PARK;
const Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_REVERSE;
const Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_NEUTRAL;
const Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_DRIVE;
const Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MIN;
const Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MAX;
const int Gear_command_114::Gear_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_command_111_Brake_pedal_en_ctrlType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[2];
}
bool Brake_command_111_Brake_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_DISABLE;
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_ENABLE;
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MIN;
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MAX;
const int Brake_command_111::Brake_pedal_en_ctrlType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[3];
}
bool Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_DISABLE;
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_ENABLE;
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MIN;
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MAX;
const int Throttle_command_110::Throttle_pedal_en_ctrlType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turnsignal_command_113_Turn_signal_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[4];
}
bool Turnsignal_command_113_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_NONE;
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_LEFT;
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_RIGHT;
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MIN;
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MAX;
const int Turnsignal_command_113::Turn_signal_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Steer_command_112_Steer_angle_en_ctrlType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[5];
}
bool Steer_command_112_Steer_angle_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_DISABLE;
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_ENABLE;
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MIN;
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MAX;
const int Steer_command_112::Steer_angle_en_ctrlType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Brake_pedal_en_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[6];
}
bool Brake_status__511_Brake_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_DISABLE;
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_ENABLE;
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_TAKEOVER;
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MIN;
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MAX;
const int Brake_status__511::Brake_pedal_en_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Brake_errType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[7];
}
bool Brake_status__511_Brake_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Brake_errType Brake_status__511::BRAKE_ERR_NOERR;
const Brake_status__511_Brake_errType Brake_status__511::BRAKE_ERR_BRAKE_SYSTEM_ERR;
const Brake_status__511_Brake_errType Brake_status__511::Brake_errType_MIN;
const Brake_status__511_Brake_errType Brake_status__511::Brake_errType_MAX;
const int Brake_status__511::Brake_errType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Emergency_btn_envType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[8];
}
bool Brake_status__511_Emergency_btn_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Emergency_btn_envType Brake_status__511::EMERGENCY_BTN_ENV_NOENV;
const Brake_status__511_Emergency_btn_envType Brake_status__511::EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
const Brake_status__511_Emergency_btn_envType Brake_status__511::Emergency_btn_envType_MIN;
const Brake_status__511_Emergency_btn_envType Brake_status__511::Emergency_btn_envType_MAX;
const int Brake_status__511::Emergency_btn_envType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Front_bump_envType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[9];
}
bool Brake_status__511_Front_bump_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Front_bump_envType Brake_status__511::FRONT_BUMP_ENV_NOENV;
const Brake_status__511_Front_bump_envType Brake_status__511::FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
const Brake_status__511_Front_bump_envType Brake_status__511::Front_bump_envType_MIN;
const Brake_status__511_Front_bump_envType Brake_status__511::Front_bump_envType_MAX;
const int Brake_status__511::Front_bump_envType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Back_bump_envType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[10];
}
bool Brake_status__511_Back_bump_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Back_bump_envType Brake_status__511::BACK_BUMP_ENV_NOENV;
const Brake_status__511_Back_bump_envType Brake_status__511::BACK_BUMP_ENV_BACK_BUMPER_ENV;
const Brake_status__511_Back_bump_envType Brake_status__511::Back_bump_envType_MIN;
const Brake_status__511_Back_bump_envType Brake_status__511::Back_bump_envType_MAX;
const int Brake_status__511::Back_bump_envType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_status__511_Overspd_envType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[11];
}
bool Brake_status__511_Overspd_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_status__511_Overspd_envType Brake_status__511::OVERSPD_ENV_NOENV;
const Brake_status__511_Overspd_envType Brake_status__511::OVERSPD_ENV_OVERSPEED_ENV;
const Brake_status__511_Overspd_envType Brake_status__511::Overspd_envType_MIN;
const Brake_status__511_Overspd_envType Brake_status__511::Overspd_envType_MAX;
const int Brake_status__511::Overspd_envType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Throttle_status__510_Throttle_pedal_en_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[12];
}
bool Throttle_status__510_Throttle_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_DISABLE;
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_ENABLE;
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_TAKEOVER;
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MIN;
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MAX;
const int Throttle_status__510::Throttle_pedal_en_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Throttle_status__510_Drive_motor_errType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[13];
}
bool Throttle_status__510_Drive_motor_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Throttle_status__510_Drive_motor_errType Throttle_status__510::DRIVE_MOTOR_ERR_NOERR;
const Throttle_status__510_Drive_motor_errType Throttle_status__510::DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
const Throttle_status__510_Drive_motor_errType Throttle_status__510::Drive_motor_errType_MIN;
const Throttle_status__510_Drive_motor_errType Throttle_status__510::Drive_motor_errType_MAX;
const int Throttle_status__510::Drive_motor_errType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Throttle_status__510_Battery_bms_errType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[14];
}
bool Throttle_status__510_Battery_bms_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Throttle_status__510_Battery_bms_errType Throttle_status__510::BATTERY_BMS_ERR_NOERR;
const Throttle_status__510_Battery_bms_errType Throttle_status__510::BATTERY_BMS_ERR_BATTERY_ERR;
const Throttle_status__510_Battery_bms_errType Throttle_status__510::Battery_bms_errType_MIN;
const Throttle_status__510_Battery_bms_errType Throttle_status__510::Battery_bms_errType_MAX;
const int Throttle_status__510::Battery_bms_errType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turnsignal_status__513_Turn_signal_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[15];
}
bool Turnsignal_status__513_Turn_signal_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_NONE;
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_LEFT;
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_RIGHT;
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MIN;
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MAX;
const int Turnsignal_status__513::Turn_signal_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Steer_status__512_Steer_angle_en_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[16];
}
bool Steer_status__512_Steer_angle_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_DISABLE;
const Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_ENABLE;
const Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_TAKEOVER;
const Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MIN;
const Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MAX;
const int Steer_status__512::Steer_angle_en_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Steer_status__512_Steer_errType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[17];
}
bool Steer_status__512_Steer_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steer_status__512_Steer_errType Steer_status__512::STEER_ERR_NOERR;
const Steer_status__512_Steer_errType Steer_status__512::STEER_ERR_STEER_MOTOR_ERR;
const Steer_status__512_Steer_errType Steer_status__512::Steer_errType_MIN;
const Steer_status__512_Steer_errType Steer_status__512::Steer_errType_MAX;
const int Steer_status__512::Steer_errType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Steer_status__512_Sensor_errType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[18];
}
bool Steer_status__512_Sensor_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steer_status__512_Sensor_errType Steer_status__512::SENSOR_ERR_NOERR;
const Steer_status__512_Sensor_errType Steer_status__512::SENSOR_ERR_STEER_SENSOR_ERR;
const Steer_status__512_Sensor_errType Steer_status__512::Sensor_errType_MIN;
const Steer_status__512_Sensor_errType Steer_status__512::Sensor_errType_MAX;
const int Steer_status__512::Sensor_errType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ecu_status_1_515_Ctrl_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[19];
}
bool Ecu_status_1_515_Ctrl_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_OUT_OF_CONTROL;
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_UNDER_CONTROL;
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MIN;
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MAX;
const int Ecu_status_1_515::Ctrl_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gear_status_514_Gear_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_enum_descriptors[20];
}
bool Gear_status_514_Gear_stsType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_PARK;
const Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_REVERSE;
const Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_NEUTRAL;
const Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_DRIVE;
const Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MIN;
const Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MAX;
const int Gear_status_514::Gear_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_command_115::kCtrlCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_command_115::Control_command_115()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Control_command_115)
}
Control_command_115::Control_command_115(const Control_command_115& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctrl_cmd_ = from.ctrl_cmd_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Control_command_115)
}

void Control_command_115::SharedCtor() {
  _cached_size_ = 0;
  ctrl_cmd_ = 0;
}

Control_command_115::~Control_command_115() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Control_command_115)
  SharedDtor();
}

void Control_command_115::SharedDtor() {
}

void Control_command_115::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_command_115::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Control_command_115& Control_command_115::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_command_115* Control_command_115::New(::google::protobuf::Arena* arena) const {
  Control_command_115* n = new Control_command_115;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_command_115::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Control_command_115)
  ctrl_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Control_command_115::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Control_command_115)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Control_command_115_Ctrl_cmdType_IsValid(value)) {
            set_ctrl_cmd(static_cast< ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Control_command_115)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Control_command_115)
  return false;
#undef DO_
}

void Control_command_115::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Control_command_115)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctrl_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Control_command_115)
}

::google::protobuf::uint8* Control_command_115::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Control_command_115)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctrl_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Control_command_115)
  return target;
}

size_t Control_command_115::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Control_command_115)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  if (has_ctrl_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_command_115::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Control_command_115)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_command_115* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_command_115>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Control_command_115)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Control_command_115)
    MergeFrom(*source);
  }
}

void Control_command_115::MergeFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Control_command_115)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctrl_cmd()) {
    set_ctrl_cmd(from.ctrl_cmd());
  }
}

void Control_command_115::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Control_command_115)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_command_115::CopyFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Control_command_115)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_command_115::IsInitialized() const {
  return true;
}

void Control_command_115::Swap(Control_command_115* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_command_115::InternalSwap(Control_command_115* other) {
  std::swap(ctrl_cmd_, other->ctrl_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_command_115::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_command_115

// optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
bool Control_command_115::has_ctrl_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Control_command_115::set_has_ctrl_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void Control_command_115::clear_has_ctrl_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Control_command_115::clear_ctrl_cmd() {
  ctrl_cmd_ = 0;
  clear_has_ctrl_cmd();
}
::jmc_auto::canbus::Control_command_115_Ctrl_cmdType Control_command_115::ctrl_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Control_command_115.ctrl_cmd)
  return static_cast< ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType >(ctrl_cmd_);
}
void Control_command_115::set_ctrl_cmd(::jmc_auto::canbus::Control_command_115_Ctrl_cmdType value) {
  assert(::jmc_auto::canbus::Control_command_115_Ctrl_cmdType_IsValid(value));
  set_has_ctrl_cmd();
  ctrl_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Control_command_115.ctrl_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear_command_114::kGearCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear_command_114::Gear_command_114()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gear_command_114)
}
Gear_command_114::Gear_command_114(const Gear_command_114& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gear_cmd_ = from.gear_cmd_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gear_command_114)
}

void Gear_command_114::SharedCtor() {
  _cached_size_ = 0;
  gear_cmd_ = 1;
}

Gear_command_114::~Gear_command_114() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gear_command_114)
  SharedDtor();
}

void Gear_command_114::SharedDtor() {
}

void Gear_command_114::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gear_command_114::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gear_command_114& Gear_command_114::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gear_command_114* Gear_command_114::New(::google::protobuf::Arena* arena) const {
  Gear_command_114* n = new Gear_command_114;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gear_command_114::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gear_command_114)
  gear_cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gear_command_114::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gear_command_114)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gear_command_114_Gear_cmdType_IsValid(value)) {
            set_gear_cmd(static_cast< ::jmc_auto::canbus::Gear_command_114_Gear_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gear_command_114)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gear_command_114)
  return false;
#undef DO_
}

void Gear_command_114::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gear_command_114)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gear_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gear_command_114)
}

::google::protobuf::uint8* Gear_command_114::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gear_command_114)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gear_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gear_command_114)
  return target;
}

size_t Gear_command_114::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gear_command_114)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  if (has_gear_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gear_command_114::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gear_command_114)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear_command_114* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear_command_114>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gear_command_114)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gear_command_114)
    MergeFrom(*source);
  }
}

void Gear_command_114::MergeFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gear_command_114)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gear_cmd()) {
    set_gear_cmd(from.gear_cmd());
  }
}

void Gear_command_114::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gear_command_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear_command_114::CopyFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gear_command_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_command_114::IsInitialized() const {
  return true;
}

void Gear_command_114::Swap(Gear_command_114* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear_command_114::InternalSwap(Gear_command_114* other) {
  std::swap(gear_cmd_, other->gear_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gear_command_114::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gear_command_114

// optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
bool Gear_command_114::has_gear_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gear_command_114::set_has_gear_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void Gear_command_114::clear_has_gear_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gear_command_114::clear_gear_cmd() {
  gear_cmd_ = 1;
  clear_has_gear_cmd();
}
::jmc_auto::canbus::Gear_command_114_Gear_cmdType Gear_command_114::gear_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gear_command_114.gear_cmd)
  return static_cast< ::jmc_auto::canbus::Gear_command_114_Gear_cmdType >(gear_cmd_);
}
void Gear_command_114::set_gear_cmd(::jmc_auto::canbus::Gear_command_114_Gear_cmdType value) {
  assert(::jmc_auto::canbus::Gear_command_114_Gear_cmdType_IsValid(value));
  set_has_gear_cmd();
  gear_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gear_command_114.gear_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_command_111::kBrakePedalEnCtrlFieldNumber;
const int Brake_command_111::kBrakePedalCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_command_111::Brake_command_111()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Brake_command_111)
}
Brake_command_111::Brake_command_111(const Brake_command_111& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_en_ctrl_, &from.brake_pedal_en_ctrl_,
    reinterpret_cast<char*>(&brake_pedal_cmd_) -
    reinterpret_cast<char*>(&brake_pedal_en_ctrl_) + sizeof(brake_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Brake_command_111)
}

void Brake_command_111::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brake_pedal_en_ctrl_, 0, reinterpret_cast<char*>(&brake_pedal_cmd_) -
    reinterpret_cast<char*>(&brake_pedal_en_ctrl_) + sizeof(brake_pedal_cmd_));
}

Brake_command_111::~Brake_command_111() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Brake_command_111)
  SharedDtor();
}

void Brake_command_111::SharedDtor() {
}

void Brake_command_111::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brake_command_111::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_command_111& Brake_command_111::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Brake_command_111* Brake_command_111::New(::google::protobuf::Arena* arena) const {
  Brake_command_111* n = new Brake_command_111;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brake_command_111::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Brake_command_111)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&brake_pedal_en_ctrl_, 0, reinterpret_cast<char*>(&brake_pedal_cmd_) -
      reinterpret_cast<char*>(&brake_pedal_en_ctrl_) + sizeof(brake_pedal_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_command_111::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Brake_command_111)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value)) {
            set_brake_pedal_en_ctrl(static_cast< ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 brake_pedal_cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_brake_pedal_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_pedal_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Brake_command_111)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Brake_command_111)
  return false;
#undef DO_
}

void Brake_command_111::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Brake_command_111)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brake_pedal_en_ctrl(), output);
  }

  // optional int32 brake_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brake_pedal_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Brake_command_111)
}

::google::protobuf::uint8* Brake_command_111::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Brake_command_111)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brake_pedal_en_ctrl(), target);
  }

  // optional int32 brake_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brake_pedal_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Brake_command_111)
  return target;
}

size_t Brake_command_111::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Brake_command_111)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
    if (has_brake_pedal_en_ctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_pedal_en_ctrl());
    }

    // optional int32 brake_pedal_cmd = 2;
    if (has_brake_pedal_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brake_pedal_cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brake_command_111::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Brake_command_111)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_command_111* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_command_111>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Brake_command_111)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Brake_command_111)
    MergeFrom(*source);
  }
}

void Brake_command_111::MergeFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Brake_command_111)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_en_ctrl_ = from.brake_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_pedal_cmd_ = from.brake_pedal_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_command_111::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Brake_command_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_command_111::CopyFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Brake_command_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_command_111::IsInitialized() const {
  return true;
}

void Brake_command_111::Swap(Brake_command_111* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_command_111::InternalSwap(Brake_command_111* other) {
  std::swap(brake_pedal_en_ctrl_, other->brake_pedal_en_ctrl_);
  std::swap(brake_pedal_cmd_, other->brake_pedal_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brake_command_111::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brake_command_111

// optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
bool Brake_command_111::has_brake_pedal_en_ctrl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Brake_command_111::set_has_brake_pedal_en_ctrl() {
  _has_bits_[0] |= 0x00000001u;
}
void Brake_command_111::clear_has_brake_pedal_en_ctrl() {
  _has_bits_[0] &= ~0x00000001u;
}
void Brake_command_111::clear_brake_pedal_en_ctrl() {
  brake_pedal_en_ctrl_ = 0;
  clear_has_brake_pedal_en_ctrl();
}
::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::brake_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_command_111.brake_pedal_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType >(brake_pedal_en_ctrl_);
}
void Brake_command_111::set_brake_pedal_en_ctrl(::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType value) {
  assert(::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value));
  set_has_brake_pedal_en_ctrl();
  brake_pedal_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_command_111.brake_pedal_en_ctrl)
}

// optional int32 brake_pedal_cmd = 2;
bool Brake_command_111::has_brake_pedal_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Brake_command_111::set_has_brake_pedal_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Brake_command_111::clear_has_brake_pedal_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Brake_command_111::clear_brake_pedal_cmd() {
  brake_pedal_cmd_ = 0;
  clear_has_brake_pedal_cmd();
}
::google::protobuf::int32 Brake_command_111::brake_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_command_111.brake_pedal_cmd)
  return brake_pedal_cmd_;
}
void Brake_command_111::set_brake_pedal_cmd(::google::protobuf::int32 value) {
  set_has_brake_pedal_cmd();
  brake_pedal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_command_111.brake_pedal_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Throttle_command_110::kThrottlePedalEnCtrlFieldNumber;
const int Throttle_command_110::kThrottlePedalCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Throttle_command_110::Throttle_command_110()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Throttle_command_110)
}
Throttle_command_110::Throttle_command_110(const Throttle_command_110& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&throttle_pedal_en_ctrl_, &from.throttle_pedal_en_ctrl_,
    reinterpret_cast<char*>(&throttle_pedal_cmd_) -
    reinterpret_cast<char*>(&throttle_pedal_en_ctrl_) + sizeof(throttle_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Throttle_command_110)
}

void Throttle_command_110::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&throttle_pedal_en_ctrl_, 0, reinterpret_cast<char*>(&throttle_pedal_cmd_) -
    reinterpret_cast<char*>(&throttle_pedal_en_ctrl_) + sizeof(throttle_pedal_cmd_));
}

Throttle_command_110::~Throttle_command_110() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Throttle_command_110)
  SharedDtor();
}

void Throttle_command_110::SharedDtor() {
}

void Throttle_command_110::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Throttle_command_110::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Throttle_command_110& Throttle_command_110::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Throttle_command_110* Throttle_command_110::New(::google::protobuf::Arena* arena) const {
  Throttle_command_110* n = new Throttle_command_110;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Throttle_command_110::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Throttle_command_110)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&throttle_pedal_en_ctrl_, 0, reinterpret_cast<char*>(&throttle_pedal_cmd_) -
      reinterpret_cast<char*>(&throttle_pedal_en_ctrl_) + sizeof(throttle_pedal_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Throttle_command_110::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Throttle_command_110)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value)) {
            set_throttle_pedal_en_ctrl(static_cast< ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 throttle_pedal_cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_throttle_pedal_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &throttle_pedal_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Throttle_command_110)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Throttle_command_110)
  return false;
#undef DO_
}

void Throttle_command_110::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Throttle_command_110)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->throttle_pedal_en_ctrl(), output);
  }

  // optional int32 throttle_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->throttle_pedal_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Throttle_command_110)
}

::google::protobuf::uint8* Throttle_command_110::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Throttle_command_110)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->throttle_pedal_en_ctrl(), target);
  }

  // optional int32 throttle_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->throttle_pedal_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Throttle_command_110)
  return target;
}

size_t Throttle_command_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Throttle_command_110)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
    if (has_throttle_pedal_en_ctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->throttle_pedal_en_ctrl());
    }

    // optional int32 throttle_pedal_cmd = 2;
    if (has_throttle_pedal_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->throttle_pedal_cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Throttle_command_110::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Throttle_command_110)
  GOOGLE_DCHECK_NE(&from, this);
  const Throttle_command_110* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Throttle_command_110>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Throttle_command_110)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Throttle_command_110)
    MergeFrom(*source);
  }
}

void Throttle_command_110::MergeFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Throttle_command_110)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      throttle_pedal_en_ctrl_ = from.throttle_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_pedal_cmd_ = from.throttle_pedal_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Throttle_command_110::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Throttle_command_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Throttle_command_110::CopyFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Throttle_command_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_command_110::IsInitialized() const {
  return true;
}

void Throttle_command_110::Swap(Throttle_command_110* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Throttle_command_110::InternalSwap(Throttle_command_110* other) {
  std::swap(throttle_pedal_en_ctrl_, other->throttle_pedal_en_ctrl_);
  std::swap(throttle_pedal_cmd_, other->throttle_pedal_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Throttle_command_110::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Throttle_command_110

// optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
bool Throttle_command_110::has_throttle_pedal_en_ctrl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Throttle_command_110::set_has_throttle_pedal_en_ctrl() {
  _has_bits_[0] |= 0x00000001u;
}
void Throttle_command_110::clear_has_throttle_pedal_en_ctrl() {
  _has_bits_[0] &= ~0x00000001u;
}
void Throttle_command_110::clear_throttle_pedal_en_ctrl() {
  throttle_pedal_en_ctrl_ = 0;
  clear_has_throttle_pedal_en_ctrl();
}
::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::throttle_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType >(throttle_pedal_en_ctrl_);
}
void Throttle_command_110::set_throttle_pedal_en_ctrl(::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value) {
  assert(::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value));
  set_has_throttle_pedal_en_ctrl();
  throttle_pedal_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
}

// optional int32 throttle_pedal_cmd = 2;
bool Throttle_command_110::has_throttle_pedal_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Throttle_command_110::set_has_throttle_pedal_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Throttle_command_110::clear_has_throttle_pedal_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Throttle_command_110::clear_throttle_pedal_cmd() {
  throttle_pedal_cmd_ = 0;
  clear_has_throttle_pedal_cmd();
}
::google::protobuf::int32 Throttle_command_110::throttle_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_command_110.throttle_pedal_cmd)
  return throttle_pedal_cmd_;
}
void Throttle_command_110::set_throttle_pedal_cmd(::google::protobuf::int32 value) {
  set_has_throttle_pedal_cmd();
  throttle_pedal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_command_110.throttle_pedal_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Turnsignal_command_113::kTurnSignalCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Turnsignal_command_113::Turnsignal_command_113()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Turnsignal_command_113)
}
Turnsignal_command_113::Turnsignal_command_113(const Turnsignal_command_113& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_cmd_ = from.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Turnsignal_command_113)
}

void Turnsignal_command_113::SharedCtor() {
  _cached_size_ = 0;
  turn_signal_cmd_ = 0;
}

Turnsignal_command_113::~Turnsignal_command_113() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Turnsignal_command_113)
  SharedDtor();
}

void Turnsignal_command_113::SharedDtor() {
}

void Turnsignal_command_113::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Turnsignal_command_113::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Turnsignal_command_113& Turnsignal_command_113::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Turnsignal_command_113* Turnsignal_command_113::New(::google::protobuf::Arena* arena) const {
  Turnsignal_command_113* n = new Turnsignal_command_113;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Turnsignal_command_113::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Turnsignal_command_113)
  turn_signal_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Turnsignal_command_113::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Turnsignal_command_113)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(value)) {
            set_turn_signal_cmd(static_cast< ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Turnsignal_command_113)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Turnsignal_command_113)
  return false;
#undef DO_
}

void Turnsignal_command_113::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Turnsignal_command_113)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Turnsignal_command_113)
}

::google::protobuf::uint8* Turnsignal_command_113::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Turnsignal_command_113)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Turnsignal_command_113)
  return target;
}

size_t Turnsignal_command_113::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Turnsignal_command_113)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  if (has_turn_signal_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Turnsignal_command_113::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Turnsignal_command_113)
  GOOGLE_DCHECK_NE(&from, this);
  const Turnsignal_command_113* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Turnsignal_command_113>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Turnsignal_command_113)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Turnsignal_command_113)
    MergeFrom(*source);
  }
}

void Turnsignal_command_113::MergeFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Turnsignal_command_113)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_turn_signal_cmd()) {
    set_turn_signal_cmd(from.turn_signal_cmd());
  }
}

void Turnsignal_command_113::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Turnsignal_command_113)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turnsignal_command_113::CopyFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Turnsignal_command_113)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_command_113::IsInitialized() const {
  return true;
}

void Turnsignal_command_113::Swap(Turnsignal_command_113* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Turnsignal_command_113::InternalSwap(Turnsignal_command_113* other) {
  std::swap(turn_signal_cmd_, other->turn_signal_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Turnsignal_command_113::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Turnsignal_command_113

// optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
bool Turnsignal_command_113::has_turn_signal_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Turnsignal_command_113::set_has_turn_signal_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void Turnsignal_command_113::clear_has_turn_signal_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Turnsignal_command_113::clear_turn_signal_cmd() {
  turn_signal_cmd_ = 0;
  clear_has_turn_signal_cmd();
}
::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::turn_signal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Turnsignal_command_113.turn_signal_cmd)
  return static_cast< ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType >(turn_signal_cmd_);
}
void Turnsignal_command_113::set_turn_signal_cmd(::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType value) {
  assert(::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(value));
  set_has_turn_signal_cmd();
  turn_signal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Turnsignal_command_113.turn_signal_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steer_command_112::kSteerAngleEnCtrlFieldNumber;
const int Steer_command_112::kSteerAngleCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steer_command_112::Steer_command_112()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Steer_command_112)
}
Steer_command_112::Steer_command_112(const Steer_command_112& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_angle_cmd_, &from.steer_angle_cmd_,
    reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
    reinterpret_cast<char*>(&steer_angle_cmd_) + sizeof(steer_angle_en_ctrl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Steer_command_112)
}

void Steer_command_112::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steer_angle_cmd_, 0, reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
    reinterpret_cast<char*>(&steer_angle_cmd_) + sizeof(steer_angle_en_ctrl_));
}

Steer_command_112::~Steer_command_112() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Steer_command_112)
  SharedDtor();
}

void Steer_command_112::SharedDtor() {
}

void Steer_command_112::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Steer_command_112::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steer_command_112& Steer_command_112::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Steer_command_112* Steer_command_112::New(::google::protobuf::Arena* arena) const {
  Steer_command_112* n = new Steer_command_112;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Steer_command_112::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Steer_command_112)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steer_angle_cmd_, 0, reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
      reinterpret_cast<char*>(&steer_angle_cmd_) + sizeof(steer_angle_en_ctrl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steer_command_112::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Steer_command_112)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(value)) {
            set_steer_angle_en_ctrl(static_cast< ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steer_angle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Steer_command_112)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Steer_command_112)
  return false;
#undef DO_
}

void Steer_command_112::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Steer_command_112)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->steer_angle_en_ctrl(), output);
  }

  // optional double steer_angle_cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steer_angle_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Steer_command_112)
}

::google::protobuf::uint8* Steer_command_112::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Steer_command_112)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->steer_angle_en_ctrl(), target);
  }

  // optional double steer_angle_cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steer_angle_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Steer_command_112)
  return target;
}

size_t Steer_command_112::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Steer_command_112)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double steer_angle_cmd = 2;
    if (has_steer_angle_cmd()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
    if (has_steer_angle_en_ctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steer_angle_en_ctrl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Steer_command_112::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Steer_command_112)
  GOOGLE_DCHECK_NE(&from, this);
  const Steer_command_112* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steer_command_112>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Steer_command_112)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Steer_command_112)
    MergeFrom(*source);
  }
}

void Steer_command_112::MergeFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Steer_command_112)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steer_angle_cmd_ = from.steer_angle_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_en_ctrl_ = from.steer_angle_en_ctrl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steer_command_112::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Steer_command_112)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steer_command_112::CopyFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Steer_command_112)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_command_112::IsInitialized() const {
  return true;
}

void Steer_command_112::Swap(Steer_command_112* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steer_command_112::InternalSwap(Steer_command_112* other) {
  std::swap(steer_angle_cmd_, other->steer_angle_cmd_);
  std::swap(steer_angle_en_ctrl_, other->steer_angle_en_ctrl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Steer_command_112::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Steer_command_112

// optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
bool Steer_command_112::has_steer_angle_en_ctrl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Steer_command_112::set_has_steer_angle_en_ctrl() {
  _has_bits_[0] |= 0x00000002u;
}
void Steer_command_112::clear_has_steer_angle_en_ctrl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Steer_command_112::clear_steer_angle_en_ctrl() {
  steer_angle_en_ctrl_ = 0;
  clear_has_steer_angle_en_ctrl();
}
::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::steer_angle_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_command_112.steer_angle_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType >(steer_angle_en_ctrl_);
}
void Steer_command_112::set_steer_angle_en_ctrl(::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType value) {
  assert(::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(value));
  set_has_steer_angle_en_ctrl();
  steer_angle_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_command_112.steer_angle_en_ctrl)
}

// optional double steer_angle_cmd = 2;
bool Steer_command_112::has_steer_angle_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Steer_command_112::set_has_steer_angle_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void Steer_command_112::clear_has_steer_angle_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Steer_command_112::clear_steer_angle_cmd() {
  steer_angle_cmd_ = 0;
  clear_has_steer_angle_cmd();
}
double Steer_command_112::steer_angle_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_command_112.steer_angle_cmd)
  return steer_angle_cmd_;
}
void Steer_command_112::set_steer_angle_cmd(double value) {
  set_has_steer_angle_cmd();
  steer_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_command_112.steer_angle_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_status__511::kBrakePedalEnStsFieldNumber;
const int Brake_status__511::kBrakePedalStsFieldNumber;
const int Brake_status__511::kBrakeErrFieldNumber;
const int Brake_status__511::kEmergencyBtnEnvFieldNumber;
const int Brake_status__511::kFrontBumpEnvFieldNumber;
const int Brake_status__511::kBackBumpEnvFieldNumber;
const int Brake_status__511::kOverspdEnvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_status__511::Brake_status__511()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Brake_status__511)
}
Brake_status__511::Brake_status__511(const Brake_status__511& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_en_sts_, &from.brake_pedal_en_sts_,
    reinterpret_cast<char*>(&overspd_env_) -
    reinterpret_cast<char*>(&brake_pedal_en_sts_) + sizeof(overspd_env_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Brake_status__511)
}

void Brake_status__511::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brake_pedal_en_sts_, 0, reinterpret_cast<char*>(&overspd_env_) -
    reinterpret_cast<char*>(&brake_pedal_en_sts_) + sizeof(overspd_env_));
}

Brake_status__511::~Brake_status__511() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Brake_status__511)
  SharedDtor();
}

void Brake_status__511::SharedDtor() {
}

void Brake_status__511::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brake_status__511::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_status__511& Brake_status__511::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Brake_status__511* Brake_status__511::New(::google::protobuf::Arena* arena) const {
  Brake_status__511* n = new Brake_status__511;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brake_status__511::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Brake_status__511)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&brake_pedal_en_sts_, 0, reinterpret_cast<char*>(&overspd_env_) -
      reinterpret_cast<char*>(&brake_pedal_en_sts_) + sizeof(overspd_env_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_status__511::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Brake_status__511)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(value)) {
            set_brake_pedal_en_sts(static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 brake_pedal_sts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_brake_pedal_sts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_pedal_sts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Brake_errType_IsValid(value)) {
            set_brake_err(static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_errType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType_IsValid(value)) {
            set_emergency_btn_env(static_cast< ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Front_bump_envType_IsValid(value)) {
            set_front_bump_env(static_cast< ::jmc_auto::canbus::Brake_status__511_Front_bump_envType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Back_bump_envType_IsValid(value)) {
            set_back_bump_env(static_cast< ::jmc_auto::canbus::Brake_status__511_Back_bump_envType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Brake_status__511_Overspd_envType_IsValid(value)) {
            set_overspd_env(static_cast< ::jmc_auto::canbus::Brake_status__511_Overspd_envType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Brake_status__511)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Brake_status__511)
  return false;
#undef DO_
}

void Brake_status__511::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Brake_status__511)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brake_pedal_en_sts(), output);
  }

  // optional int32 brake_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brake_pedal_sts(), output);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->brake_err(), output);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->emergency_btn_env(), output);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->front_bump_env(), output);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->back_bump_env(), output);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->overspd_env(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Brake_status__511)
}

::google::protobuf::uint8* Brake_status__511::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Brake_status__511)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brake_pedal_en_sts(), target);
  }

  // optional int32 brake_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brake_pedal_sts(), target);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->brake_err(), target);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->emergency_btn_env(), target);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->front_bump_env(), target);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->back_bump_env(), target);
  }

  // optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->overspd_env(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Brake_status__511)
  return target;
}

size_t Brake_status__511::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Brake_status__511)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
    if (has_brake_pedal_en_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_pedal_en_sts());
    }

    // optional int32 brake_pedal_sts = 2;
    if (has_brake_pedal_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brake_pedal_sts());
    }

    // optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
    if (has_brake_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_err());
    }

    // optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
    if (has_emergency_btn_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->emergency_btn_env());
    }

    // optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
    if (has_front_bump_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->front_bump_env());
    }

    // optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
    if (has_back_bump_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->back_bump_env());
    }

    // optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
    if (has_overspd_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->overspd_env());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brake_status__511::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Brake_status__511)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_status__511* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_status__511>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Brake_status__511)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Brake_status__511)
    MergeFrom(*source);
  }
}

void Brake_status__511::MergeFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Brake_status__511)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_en_sts_ = from.brake_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_pedal_sts_ = from.brake_pedal_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      brake_err_ = from.brake_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      emergency_btn_env_ = from.emergency_btn_env_;
    }
    if (cached_has_bits & 0x00000010u) {
      front_bump_env_ = from.front_bump_env_;
    }
    if (cached_has_bits & 0x00000020u) {
      back_bump_env_ = from.back_bump_env_;
    }
    if (cached_has_bits & 0x00000040u) {
      overspd_env_ = from.overspd_env_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_status__511::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Brake_status__511)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_status__511::CopyFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Brake_status__511)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_status__511::IsInitialized() const {
  return true;
}

void Brake_status__511::Swap(Brake_status__511* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_status__511::InternalSwap(Brake_status__511* other) {
  std::swap(brake_pedal_en_sts_, other->brake_pedal_en_sts_);
  std::swap(brake_pedal_sts_, other->brake_pedal_sts_);
  std::swap(brake_err_, other->brake_err_);
  std::swap(emergency_btn_env_, other->emergency_btn_env_);
  std::swap(front_bump_env_, other->front_bump_env_);
  std::swap(back_bump_env_, other->back_bump_env_);
  std::swap(overspd_env_, other->overspd_env_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brake_status__511::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brake_status__511

// optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
bool Brake_status__511::has_brake_pedal_en_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Brake_status__511::set_has_brake_pedal_en_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Brake_status__511::clear_has_brake_pedal_en_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Brake_status__511::clear_brake_pedal_en_sts() {
  brake_pedal_en_sts_ = 0;
  clear_has_brake_pedal_en_sts();
}
::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType Brake_status__511::brake_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_pedal_en_sts)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType >(brake_pedal_en_sts_);
}
void Brake_status__511::set_brake_pedal_en_sts(::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(value));
  set_has_brake_pedal_en_sts();
  brake_pedal_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_pedal_en_sts)
}

// optional int32 brake_pedal_sts = 2;
bool Brake_status__511::has_brake_pedal_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Brake_status__511::set_has_brake_pedal_sts() {
  _has_bits_[0] |= 0x00000002u;
}
void Brake_status__511::clear_has_brake_pedal_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
void Brake_status__511::clear_brake_pedal_sts() {
  brake_pedal_sts_ = 0;
  clear_has_brake_pedal_sts();
}
::google::protobuf::int32 Brake_status__511::brake_pedal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_pedal_sts)
  return brake_pedal_sts_;
}
void Brake_status__511::set_brake_pedal_sts(::google::protobuf::int32 value) {
  set_has_brake_pedal_sts();
  brake_pedal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_pedal_sts)
}

// optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
bool Brake_status__511::has_brake_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Brake_status__511::set_has_brake_err() {
  _has_bits_[0] |= 0x00000004u;
}
void Brake_status__511::clear_has_brake_err() {
  _has_bits_[0] &= ~0x00000004u;
}
void Brake_status__511::clear_brake_err() {
  brake_err_ = 0;
  clear_has_brake_err();
}
::jmc_auto::canbus::Brake_status__511_Brake_errType Brake_status__511::brake_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_err)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_errType >(brake_err_);
}
void Brake_status__511::set_brake_err(::jmc_auto::canbus::Brake_status__511_Brake_errType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Brake_errType_IsValid(value));
  set_has_brake_err();
  brake_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_err)
}

// optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
bool Brake_status__511::has_emergency_btn_env() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Brake_status__511::set_has_emergency_btn_env() {
  _has_bits_[0] |= 0x00000008u;
}
void Brake_status__511::clear_has_emergency_btn_env() {
  _has_bits_[0] &= ~0x00000008u;
}
void Brake_status__511::clear_emergency_btn_env() {
  emergency_btn_env_ = 0;
  clear_has_emergency_btn_env();
}
::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType Brake_status__511::emergency_btn_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.emergency_btn_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType >(emergency_btn_env_);
}
void Brake_status__511::set_emergency_btn_env(::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType_IsValid(value));
  set_has_emergency_btn_env();
  emergency_btn_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.emergency_btn_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
bool Brake_status__511::has_front_bump_env() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Brake_status__511::set_has_front_bump_env() {
  _has_bits_[0] |= 0x00000010u;
}
void Brake_status__511::clear_has_front_bump_env() {
  _has_bits_[0] &= ~0x00000010u;
}
void Brake_status__511::clear_front_bump_env() {
  front_bump_env_ = 0;
  clear_has_front_bump_env();
}
::jmc_auto::canbus::Brake_status__511_Front_bump_envType Brake_status__511::front_bump_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.front_bump_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Front_bump_envType >(front_bump_env_);
}
void Brake_status__511::set_front_bump_env(::jmc_auto::canbus::Brake_status__511_Front_bump_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Front_bump_envType_IsValid(value));
  set_has_front_bump_env();
  front_bump_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.front_bump_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
bool Brake_status__511::has_back_bump_env() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Brake_status__511::set_has_back_bump_env() {
  _has_bits_[0] |= 0x00000020u;
}
void Brake_status__511::clear_has_back_bump_env() {
  _has_bits_[0] &= ~0x00000020u;
}
void Brake_status__511::clear_back_bump_env() {
  back_bump_env_ = 0;
  clear_has_back_bump_env();
}
::jmc_auto::canbus::Brake_status__511_Back_bump_envType Brake_status__511::back_bump_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.back_bump_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Back_bump_envType >(back_bump_env_);
}
void Brake_status__511::set_back_bump_env(::jmc_auto::canbus::Brake_status__511_Back_bump_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Back_bump_envType_IsValid(value));
  set_has_back_bump_env();
  back_bump_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.back_bump_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
bool Brake_status__511::has_overspd_env() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Brake_status__511::set_has_overspd_env() {
  _has_bits_[0] |= 0x00000040u;
}
void Brake_status__511::clear_has_overspd_env() {
  _has_bits_[0] &= ~0x00000040u;
}
void Brake_status__511::clear_overspd_env() {
  overspd_env_ = 0;
  clear_has_overspd_env();
}
::jmc_auto::canbus::Brake_status__511_Overspd_envType Brake_status__511::overspd_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.overspd_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Overspd_envType >(overspd_env_);
}
void Brake_status__511::set_overspd_env(::jmc_auto::canbus::Brake_status__511_Overspd_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Overspd_envType_IsValid(value));
  set_has_overspd_env();
  overspd_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.overspd_env)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Throttle_status__510::kThrottlePedalEnStsFieldNumber;
const int Throttle_status__510::kThrottlePedalStsFieldNumber;
const int Throttle_status__510::kDriveMotorErrFieldNumber;
const int Throttle_status__510::kBatteryBmsErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Throttle_status__510::Throttle_status__510()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Throttle_status__510)
}
Throttle_status__510::Throttle_status__510(const Throttle_status__510& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&throttle_pedal_en_sts_, &from.throttle_pedal_en_sts_,
    reinterpret_cast<char*>(&battery_bms_err_) -
    reinterpret_cast<char*>(&throttle_pedal_en_sts_) + sizeof(battery_bms_err_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Throttle_status__510)
}

void Throttle_status__510::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&throttle_pedal_en_sts_, 0, reinterpret_cast<char*>(&battery_bms_err_) -
    reinterpret_cast<char*>(&throttle_pedal_en_sts_) + sizeof(battery_bms_err_));
}

Throttle_status__510::~Throttle_status__510() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Throttle_status__510)
  SharedDtor();
}

void Throttle_status__510::SharedDtor() {
}

void Throttle_status__510::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Throttle_status__510::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Throttle_status__510& Throttle_status__510::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Throttle_status__510* Throttle_status__510::New(::google::protobuf::Arena* arena) const {
  Throttle_status__510* n = new Throttle_status__510;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Throttle_status__510::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Throttle_status__510)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&throttle_pedal_en_sts_, 0, reinterpret_cast<char*>(&battery_bms_err_) -
      reinterpret_cast<char*>(&throttle_pedal_en_sts_) + sizeof(battery_bms_err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Throttle_status__510::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Throttle_status__510)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value)) {
            set_throttle_pedal_en_sts(static_cast< ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 throttle_pedal_sts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_throttle_pedal_sts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &throttle_pedal_sts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType_IsValid(value)) {
            set_drive_motor_err(static_cast< ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType_IsValid(value)) {
            set_battery_bms_err(static_cast< ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Throttle_status__510)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Throttle_status__510)
  return false;
#undef DO_
}

void Throttle_status__510::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Throttle_status__510)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->throttle_pedal_en_sts(), output);
  }

  // optional int32 throttle_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->throttle_pedal_sts(), output);
  }

  // optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drive_motor_err(), output);
  }

  // optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->battery_bms_err(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Throttle_status__510)
}

::google::protobuf::uint8* Throttle_status__510::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Throttle_status__510)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->throttle_pedal_en_sts(), target);
  }

  // optional int32 throttle_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->throttle_pedal_sts(), target);
  }

  // optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->drive_motor_err(), target);
  }

  // optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->battery_bms_err(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Throttle_status__510)
  return target;
}

size_t Throttle_status__510::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Throttle_status__510)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
    if (has_throttle_pedal_en_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->throttle_pedal_en_sts());
    }

    // optional int32 throttle_pedal_sts = 2;
    if (has_throttle_pedal_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->throttle_pedal_sts());
    }

    // optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
    if (has_drive_motor_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->drive_motor_err());
    }

    // optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
    if (has_battery_bms_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battery_bms_err());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Throttle_status__510::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Throttle_status__510)
  GOOGLE_DCHECK_NE(&from, this);
  const Throttle_status__510* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Throttle_status__510>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Throttle_status__510)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Throttle_status__510)
    MergeFrom(*source);
  }
}

void Throttle_status__510::MergeFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Throttle_status__510)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      throttle_pedal_en_sts_ = from.throttle_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_pedal_sts_ = from.throttle_pedal_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      drive_motor_err_ = from.drive_motor_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_bms_err_ = from.battery_bms_err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Throttle_status__510::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Throttle_status__510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Throttle_status__510::CopyFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Throttle_status__510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_status__510::IsInitialized() const {
  return true;
}

void Throttle_status__510::Swap(Throttle_status__510* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Throttle_status__510::InternalSwap(Throttle_status__510* other) {
  std::swap(throttle_pedal_en_sts_, other->throttle_pedal_en_sts_);
  std::swap(throttle_pedal_sts_, other->throttle_pedal_sts_);
  std::swap(drive_motor_err_, other->drive_motor_err_);
  std::swap(battery_bms_err_, other->battery_bms_err_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Throttle_status__510::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Throttle_status__510

// optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
bool Throttle_status__510::has_throttle_pedal_en_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Throttle_status__510::set_has_throttle_pedal_en_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Throttle_status__510::clear_has_throttle_pedal_en_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Throttle_status__510::clear_throttle_pedal_en_sts() {
  throttle_pedal_en_sts_ = 0;
  clear_has_throttle_pedal_en_sts();
}
::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::throttle_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.throttle_pedal_en_sts)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType >(throttle_pedal_en_sts_);
}
void Throttle_status__510::set_throttle_pedal_en_sts(::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value));
  set_has_throttle_pedal_en_sts();
  throttle_pedal_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.throttle_pedal_en_sts)
}

// optional int32 throttle_pedal_sts = 2;
bool Throttle_status__510::has_throttle_pedal_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Throttle_status__510::set_has_throttle_pedal_sts() {
  _has_bits_[0] |= 0x00000002u;
}
void Throttle_status__510::clear_has_throttle_pedal_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
void Throttle_status__510::clear_throttle_pedal_sts() {
  throttle_pedal_sts_ = 0;
  clear_has_throttle_pedal_sts();
}
::google::protobuf::int32 Throttle_status__510::throttle_pedal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.throttle_pedal_sts)
  return throttle_pedal_sts_;
}
void Throttle_status__510::set_throttle_pedal_sts(::google::protobuf::int32 value) {
  set_has_throttle_pedal_sts();
  throttle_pedal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.throttle_pedal_sts)
}

// optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
bool Throttle_status__510::has_drive_motor_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Throttle_status__510::set_has_drive_motor_err() {
  _has_bits_[0] |= 0x00000004u;
}
void Throttle_status__510::clear_has_drive_motor_err() {
  _has_bits_[0] &= ~0x00000004u;
}
void Throttle_status__510::clear_drive_motor_err() {
  drive_motor_err_ = 0;
  clear_has_drive_motor_err();
}
::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType Throttle_status__510::drive_motor_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.drive_motor_err)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType >(drive_motor_err_);
}
void Throttle_status__510::set_drive_motor_err(::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType_IsValid(value));
  set_has_drive_motor_err();
  drive_motor_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.drive_motor_err)
}

// optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
bool Throttle_status__510::has_battery_bms_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Throttle_status__510::set_has_battery_bms_err() {
  _has_bits_[0] |= 0x00000008u;
}
void Throttle_status__510::clear_has_battery_bms_err() {
  _has_bits_[0] &= ~0x00000008u;
}
void Throttle_status__510::clear_battery_bms_err() {
  battery_bms_err_ = 0;
  clear_has_battery_bms_err();
}
::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType Throttle_status__510::battery_bms_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.battery_bms_err)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType >(battery_bms_err_);
}
void Throttle_status__510::set_battery_bms_err(::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType_IsValid(value));
  set_has_battery_bms_err();
  battery_bms_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.battery_bms_err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Turnsignal_status__513::kTurnSignalStsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Turnsignal_status__513::Turnsignal_status__513()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Turnsignal_status__513)
}
Turnsignal_status__513::Turnsignal_status__513(const Turnsignal_status__513& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_sts_ = from.turn_signal_sts_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Turnsignal_status__513)
}

void Turnsignal_status__513::SharedCtor() {
  _cached_size_ = 0;
  turn_signal_sts_ = 0;
}

Turnsignal_status__513::~Turnsignal_status__513() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Turnsignal_status__513)
  SharedDtor();
}

void Turnsignal_status__513::SharedDtor() {
}

void Turnsignal_status__513::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Turnsignal_status__513::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Turnsignal_status__513& Turnsignal_status__513::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Turnsignal_status__513* Turnsignal_status__513::New(::google::protobuf::Arena* arena) const {
  Turnsignal_status__513* n = new Turnsignal_status__513;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Turnsignal_status__513::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Turnsignal_status__513)
  turn_signal_sts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Turnsignal_status__513::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Turnsignal_status__513)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(value)) {
            set_turn_signal_sts(static_cast< ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Turnsignal_status__513)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Turnsignal_status__513)
  return false;
#undef DO_
}

void Turnsignal_status__513::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Turnsignal_status__513)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal_sts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Turnsignal_status__513)
}

::google::protobuf::uint8* Turnsignal_status__513::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Turnsignal_status__513)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal_sts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Turnsignal_status__513)
  return target;
}

size_t Turnsignal_status__513::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Turnsignal_status__513)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  if (has_turn_signal_sts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal_sts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Turnsignal_status__513::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Turnsignal_status__513)
  GOOGLE_DCHECK_NE(&from, this);
  const Turnsignal_status__513* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Turnsignal_status__513>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Turnsignal_status__513)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Turnsignal_status__513)
    MergeFrom(*source);
  }
}

void Turnsignal_status__513::MergeFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Turnsignal_status__513)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_turn_signal_sts()) {
    set_turn_signal_sts(from.turn_signal_sts());
  }
}

void Turnsignal_status__513::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Turnsignal_status__513)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turnsignal_status__513::CopyFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Turnsignal_status__513)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_status__513::IsInitialized() const {
  return true;
}

void Turnsignal_status__513::Swap(Turnsignal_status__513* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Turnsignal_status__513::InternalSwap(Turnsignal_status__513* other) {
  std::swap(turn_signal_sts_, other->turn_signal_sts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Turnsignal_status__513::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Turnsignal_status__513

// optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
bool Turnsignal_status__513::has_turn_signal_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Turnsignal_status__513::set_has_turn_signal_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Turnsignal_status__513::clear_has_turn_signal_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Turnsignal_status__513::clear_turn_signal_sts() {
  turn_signal_sts_ = 0;
  clear_has_turn_signal_sts();
}
::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::turn_signal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Turnsignal_status__513.turn_signal_sts)
  return static_cast< ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType >(turn_signal_sts_);
}
void Turnsignal_status__513::set_turn_signal_sts(::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType value) {
  assert(::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(value));
  set_has_turn_signal_sts();
  turn_signal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Turnsignal_status__513.turn_signal_sts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steer_status__512::kSteerAngleEnStsFieldNumber;
const int Steer_status__512::kSteerAngleStsFieldNumber;
const int Steer_status__512::kSteerErrFieldNumber;
const int Steer_status__512::kSensorErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steer_status__512::Steer_status__512()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Steer_status__512)
}
Steer_status__512::Steer_status__512(const Steer_status__512& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_angle_sts_, &from.steer_angle_sts_,
    reinterpret_cast<char*>(&sensor_err_) -
    reinterpret_cast<char*>(&steer_angle_sts_) + sizeof(sensor_err_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Steer_status__512)
}

void Steer_status__512::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steer_angle_sts_, 0, reinterpret_cast<char*>(&sensor_err_) -
    reinterpret_cast<char*>(&steer_angle_sts_) + sizeof(sensor_err_));
}

Steer_status__512::~Steer_status__512() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Steer_status__512)
  SharedDtor();
}

void Steer_status__512::SharedDtor() {
}

void Steer_status__512::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Steer_status__512::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steer_status__512& Steer_status__512::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Steer_status__512* Steer_status__512::New(::google::protobuf::Arena* arena) const {
  Steer_status__512* n = new Steer_status__512;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Steer_status__512::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Steer_status__512)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steer_angle_sts_, 0, reinterpret_cast<char*>(&sensor_err_) -
      reinterpret_cast<char*>(&steer_angle_sts_) + sizeof(sensor_err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steer_status__512::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Steer_status__512)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(value)) {
            set_steer_angle_en_sts(static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_sts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steer_angle_sts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_sts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Steer_status__512_Steer_errType_IsValid(value)) {
            set_steer_err(static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_errType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Steer_status__512_Sensor_errType_IsValid(value)) {
            set_sensor_err(static_cast< ::jmc_auto::canbus::Steer_status__512_Sensor_errType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Steer_status__512)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Steer_status__512)
  return false;
#undef DO_
}

void Steer_status__512::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Steer_status__512)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->steer_angle_en_sts(), output);
  }

  // optional double steer_angle_sts = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steer_angle_sts(), output);
  }

  // optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->steer_err(), output);
  }

  // optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sensor_err(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Steer_status__512)
}

::google::protobuf::uint8* Steer_status__512::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Steer_status__512)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->steer_angle_en_sts(), target);
  }

  // optional double steer_angle_sts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steer_angle_sts(), target);
  }

  // optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->steer_err(), target);
  }

  // optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sensor_err(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Steer_status__512)
  return target;
}

size_t Steer_status__512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Steer_status__512)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double steer_angle_sts = 2;
    if (has_steer_angle_sts()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
    if (has_steer_angle_en_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steer_angle_en_sts());
    }

    // optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
    if (has_steer_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steer_err());
    }

    // optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
    if (has_sensor_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_err());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Steer_status__512::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Steer_status__512)
  GOOGLE_DCHECK_NE(&from, this);
  const Steer_status__512* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steer_status__512>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Steer_status__512)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Steer_status__512)
    MergeFrom(*source);
  }
}

void Steer_status__512::MergeFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Steer_status__512)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steer_angle_sts_ = from.steer_angle_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_en_sts_ = from.steer_angle_en_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      steer_err_ = from.steer_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      sensor_err_ = from.sensor_err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steer_status__512::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Steer_status__512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steer_status__512::CopyFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Steer_status__512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_status__512::IsInitialized() const {
  return true;
}

void Steer_status__512::Swap(Steer_status__512* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steer_status__512::InternalSwap(Steer_status__512* other) {
  std::swap(steer_angle_sts_, other->steer_angle_sts_);
  std::swap(steer_angle_en_sts_, other->steer_angle_en_sts_);
  std::swap(steer_err_, other->steer_err_);
  std::swap(sensor_err_, other->sensor_err_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Steer_status__512::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Steer_status__512

// optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
bool Steer_status__512::has_steer_angle_en_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Steer_status__512::set_has_steer_angle_en_sts() {
  _has_bits_[0] |= 0x00000002u;
}
void Steer_status__512::clear_has_steer_angle_en_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
void Steer_status__512::clear_steer_angle_en_sts() {
  steer_angle_en_sts_ = 0;
  clear_has_steer_angle_en_sts();
}
::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType Steer_status__512::steer_angle_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_angle_en_sts)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType >(steer_angle_en_sts_);
}
void Steer_status__512::set_steer_angle_en_sts(::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(value));
  set_has_steer_angle_en_sts();
  steer_angle_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_angle_en_sts)
}

// optional double steer_angle_sts = 2;
bool Steer_status__512::has_steer_angle_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Steer_status__512::set_has_steer_angle_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Steer_status__512::clear_has_steer_angle_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Steer_status__512::clear_steer_angle_sts() {
  steer_angle_sts_ = 0;
  clear_has_steer_angle_sts();
}
double Steer_status__512::steer_angle_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_angle_sts)
  return steer_angle_sts_;
}
void Steer_status__512::set_steer_angle_sts(double value) {
  set_has_steer_angle_sts();
  steer_angle_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_angle_sts)
}

// optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
bool Steer_status__512::has_steer_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Steer_status__512::set_has_steer_err() {
  _has_bits_[0] |= 0x00000004u;
}
void Steer_status__512::clear_has_steer_err() {
  _has_bits_[0] &= ~0x00000004u;
}
void Steer_status__512::clear_steer_err() {
  steer_err_ = 0;
  clear_has_steer_err();
}
::jmc_auto::canbus::Steer_status__512_Steer_errType Steer_status__512::steer_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_err)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_errType >(steer_err_);
}
void Steer_status__512::set_steer_err(::jmc_auto::canbus::Steer_status__512_Steer_errType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Steer_errType_IsValid(value));
  set_has_steer_err();
  steer_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_err)
}

// optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
bool Steer_status__512::has_sensor_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Steer_status__512::set_has_sensor_err() {
  _has_bits_[0] |= 0x00000008u;
}
void Steer_status__512::clear_has_sensor_err() {
  _has_bits_[0] &= ~0x00000008u;
}
void Steer_status__512::clear_sensor_err() {
  sensor_err_ = 0;
  clear_has_sensor_err();
}
::jmc_auto::canbus::Steer_status__512_Sensor_errType Steer_status__512::sensor_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.sensor_err)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Sensor_errType >(sensor_err_);
}
void Steer_status__512::set_sensor_err(::jmc_auto::canbus::Steer_status__512_Sensor_errType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Sensor_errType_IsValid(value));
  set_has_sensor_err();
  sensor_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.sensor_err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ecu_status_1_515::kSpeedFieldNumber;
const int Ecu_status_1_515::kAccSpeedFieldNumber;
const int Ecu_status_1_515::kCtrlStsFieldNumber;
const int Ecu_status_1_515::kChassisStsFieldNumber;
const int Ecu_status_1_515::kChassisErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ecu_status_1_515::Ecu_status_1_515()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ecu_status_1_515)
}
Ecu_status_1_515::Ecu_status_1_515(const Ecu_status_1_515& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    reinterpret_cast<char*>(&chassis_err_) -
    reinterpret_cast<char*>(&speed_) + sizeof(chassis_err_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ecu_status_1_515)
}

void Ecu_status_1_515::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&speed_, 0, reinterpret_cast<char*>(&chassis_err_) -
    reinterpret_cast<char*>(&speed_) + sizeof(chassis_err_));
}

Ecu_status_1_515::~Ecu_status_1_515() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ecu_status_1_515)
  SharedDtor();
}

void Ecu_status_1_515::SharedDtor() {
}

void Ecu_status_1_515::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ecu_status_1_515::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ecu_status_1_515& Ecu_status_1_515::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ecu_status_1_515* Ecu_status_1_515::New(::google::protobuf::Arena* arena) const {
  Ecu_status_1_515* n = new Ecu_status_1_515;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ecu_status_1_515::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ecu_status_1_515)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&speed_, 0, reinterpret_cast<char*>(&chassis_err_) -
      reinterpret_cast<char*>(&speed_) + sizeof(chassis_err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ecu_status_1_515::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ecu_status_1_515)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_acc_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(value)) {
            set_ctrl_sts(static_cast< ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_sts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_chassis_sts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_sts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_err = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_chassis_err();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ecu_status_1_515)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ecu_status_1_515)
  return false;
#undef DO_
}

void Ecu_status_1_515::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ecu_status_1_515)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // optional double acc_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_speed(), output);
  }

  // optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ctrl_sts(), output);
  }

  // optional int32 chassis_sts = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chassis_sts(), output);
  }

  // optional int32 chassis_err = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chassis_err(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ecu_status_1_515)
}

::google::protobuf::uint8* Ecu_status_1_515::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ecu_status_1_515)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // optional double acc_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_speed(), target);
  }

  // optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ctrl_sts(), target);
  }

  // optional int32 chassis_sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chassis_sts(), target);
  }

  // optional int32 chassis_err = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chassis_err(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ecu_status_1_515)
  return target;
}

size_t Ecu_status_1_515::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ecu_status_1_515)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acc_speed = 2;
    if (has_acc_speed()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
    if (has_ctrl_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_sts());
    }

    // optional int32 chassis_sts = 4;
    if (has_chassis_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_sts());
    }

    // optional int32 chassis_err = 5;
    if (has_chassis_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_err());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ecu_status_1_515::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ecu_status_1_515)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_1_515* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ecu_status_1_515>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ecu_status_1_515)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ecu_status_1_515)
    MergeFrom(*source);
  }
}

void Ecu_status_1_515::MergeFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ecu_status_1_515)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_speed_ = from.acc_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      ctrl_sts_ = from.ctrl_sts_;
    }
    if (cached_has_bits & 0x00000008u) {
      chassis_sts_ = from.chassis_sts_;
    }
    if (cached_has_bits & 0x00000010u) {
      chassis_err_ = from.chassis_err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_1_515::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ecu_status_1_515)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_1_515::CopyFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ecu_status_1_515)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_1_515::IsInitialized() const {
  return true;
}

void Ecu_status_1_515::Swap(Ecu_status_1_515* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ecu_status_1_515::InternalSwap(Ecu_status_1_515* other) {
  std::swap(speed_, other->speed_);
  std::swap(acc_speed_, other->acc_speed_);
  std::swap(ctrl_sts_, other->ctrl_sts_);
  std::swap(chassis_sts_, other->chassis_sts_);
  std::swap(chassis_err_, other->chassis_err_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ecu_status_1_515::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ecu_status_1_515

// optional double speed = 1;
bool Ecu_status_1_515::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ecu_status_1_515::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void Ecu_status_1_515::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ecu_status_1_515::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double Ecu_status_1_515::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.speed)
  return speed_;
}
void Ecu_status_1_515::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.speed)
}

// optional double acc_speed = 2;
bool Ecu_status_1_515::has_acc_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ecu_status_1_515::set_has_acc_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void Ecu_status_1_515::clear_has_acc_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ecu_status_1_515::clear_acc_speed() {
  acc_speed_ = 0;
  clear_has_acc_speed();
}
double Ecu_status_1_515::acc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.acc_speed)
  return acc_speed_;
}
void Ecu_status_1_515::set_acc_speed(double value) {
  set_has_acc_speed();
  acc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.acc_speed)
}

// optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
bool Ecu_status_1_515::has_ctrl_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ecu_status_1_515::set_has_ctrl_sts() {
  _has_bits_[0] |= 0x00000004u;
}
void Ecu_status_1_515::clear_has_ctrl_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ecu_status_1_515::clear_ctrl_sts() {
  ctrl_sts_ = 0;
  clear_has_ctrl_sts();
}
::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::ctrl_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.ctrl_sts)
  return static_cast< ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType >(ctrl_sts_);
}
void Ecu_status_1_515::set_ctrl_sts(::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType value) {
  assert(::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(value));
  set_has_ctrl_sts();
  ctrl_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.ctrl_sts)
}

// optional int32 chassis_sts = 4;
bool Ecu_status_1_515::has_chassis_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ecu_status_1_515::set_has_chassis_sts() {
  _has_bits_[0] |= 0x00000008u;
}
void Ecu_status_1_515::clear_has_chassis_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ecu_status_1_515::clear_chassis_sts() {
  chassis_sts_ = 0;
  clear_has_chassis_sts();
}
::google::protobuf::int32 Ecu_status_1_515::chassis_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.chassis_sts)
  return chassis_sts_;
}
void Ecu_status_1_515::set_chassis_sts(::google::protobuf::int32 value) {
  set_has_chassis_sts();
  chassis_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.chassis_sts)
}

// optional int32 chassis_err = 5;
bool Ecu_status_1_515::has_chassis_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ecu_status_1_515::set_has_chassis_err() {
  _has_bits_[0] |= 0x00000010u;
}
void Ecu_status_1_515::clear_has_chassis_err() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ecu_status_1_515::clear_chassis_err() {
  chassis_err_ = 0;
  clear_has_chassis_err();
}
::google::protobuf::int32 Ecu_status_1_515::chassis_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.chassis_err)
  return chassis_err_;
}
void Ecu_status_1_515::set_chassis_err(::google::protobuf::int32 value) {
  set_has_chassis_err();
  chassis_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.chassis_err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear_status_514::kGearStsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear_status_514::Gear_status_514()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gear_status_514)
}
Gear_status_514::Gear_status_514(const Gear_status_514& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gear_sts_ = from.gear_sts_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gear_status_514)
}

void Gear_status_514::SharedCtor() {
  _cached_size_ = 0;
  gear_sts_ = 1;
}

Gear_status_514::~Gear_status_514() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gear_status_514)
  SharedDtor();
}

void Gear_status_514::SharedDtor() {
}

void Gear_status_514::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gear_status_514::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gear_status_514& Gear_status_514::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gear_status_514* Gear_status_514::New(::google::protobuf::Arena* arena) const {
  Gear_status_514* n = new Gear_status_514;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gear_status_514::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gear_status_514)
  gear_sts_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gear_status_514::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gear_status_514)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gear_status_514_Gear_stsType_IsValid(value)) {
            set_gear_sts(static_cast< ::jmc_auto::canbus::Gear_status_514_Gear_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gear_status_514)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gear_status_514)
  return false;
#undef DO_
}

void Gear_status_514::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gear_status_514)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gear_sts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gear_status_514)
}

::google::protobuf::uint8* Gear_status_514::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gear_status_514)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gear_sts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gear_status_514)
  return target;
}

size_t Gear_status_514::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gear_status_514)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  if (has_gear_sts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_sts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gear_status_514::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gear_status_514)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear_status_514* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear_status_514>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gear_status_514)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gear_status_514)
    MergeFrom(*source);
  }
}

void Gear_status_514::MergeFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gear_status_514)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gear_sts()) {
    set_gear_sts(from.gear_sts());
  }
}

void Gear_status_514::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gear_status_514)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear_status_514::CopyFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gear_status_514)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_status_514::IsInitialized() const {
  return true;
}

void Gear_status_514::Swap(Gear_status_514* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear_status_514::InternalSwap(Gear_status_514* other) {
  std::swap(gear_sts_, other->gear_sts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gear_status_514::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gear_status_514

// optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
bool Gear_status_514::has_gear_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gear_status_514::set_has_gear_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Gear_status_514::clear_has_gear_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gear_status_514::clear_gear_sts() {
  gear_sts_ = 1;
  clear_has_gear_sts();
}
::jmc_auto::canbus::Gear_status_514_Gear_stsType Gear_status_514::gear_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gear_status_514.gear_sts)
  return static_cast< ::jmc_auto::canbus::Gear_status_514_Gear_stsType >(gear_sts_);
}
void Gear_status_514::set_gear_sts(::jmc_auto::canbus::Gear_status_514_Gear_stsType value) {
  assert(::jmc_auto::canbus::Gear_status_514_Gear_stsType_IsValid(value));
  set_has_gear_sts();
  gear_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gear_status_514.gear_sts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ecu_status_3_517::kUltrasoundDist1FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist2FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist3FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist4FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist5FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist6FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist7FieldNumber;
const int Ecu_status_3_517::kUltrasoundDist8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ecu_status_3_517::Ecu_status_3_517()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ecu_status_3_517)
}
Ecu_status_3_517::Ecu_status_3_517(const Ecu_status_3_517& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ultrasound_dist_1_, &from.ultrasound_dist_1_,
    reinterpret_cast<char*>(&ultrasound_dist_8_) -
    reinterpret_cast<char*>(&ultrasound_dist_1_) + sizeof(ultrasound_dist_8_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ecu_status_3_517)
}

void Ecu_status_3_517::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ultrasound_dist_1_, 0, reinterpret_cast<char*>(&ultrasound_dist_8_) -
    reinterpret_cast<char*>(&ultrasound_dist_1_) + sizeof(ultrasound_dist_8_));
}

Ecu_status_3_517::~Ecu_status_3_517() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ecu_status_3_517)
  SharedDtor();
}

void Ecu_status_3_517::SharedDtor() {
}

void Ecu_status_3_517::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ecu_status_3_517::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ecu_status_3_517& Ecu_status_3_517::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ecu_status_3_517* Ecu_status_3_517::New(::google::protobuf::Arena* arena) const {
  Ecu_status_3_517* n = new Ecu_status_3_517;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ecu_status_3_517::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ecu_status_3_517)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ultrasound_dist_1_, 0, reinterpret_cast<char*>(&ultrasound_dist_8_) -
      reinterpret_cast<char*>(&ultrasound_dist_1_) + sizeof(ultrasound_dist_8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ecu_status_3_517::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ecu_status_3_517)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ultrasound_dist_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ultrasound_dist_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ultrasound_dist_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ultrasound_dist_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ultrasound_dist_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ultrasound_dist_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ultrasound_dist_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ultrasound_dist_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ultrasound_dist_8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ultrasound_dist_8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultrasound_dist_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ecu_status_3_517)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ecu_status_3_517)
  return false;
#undef DO_
}

void Ecu_status_3_517::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ecu_status_3_517)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ultrasound_dist_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ultrasound_dist_1(), output);
  }

  // optional int32 ultrasound_dist_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ultrasound_dist_2(), output);
  }

  // optional int32 ultrasound_dist_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ultrasound_dist_3(), output);
  }

  // optional int32 ultrasound_dist_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ultrasound_dist_4(), output);
  }

  // optional int32 ultrasound_dist_5 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ultrasound_dist_5(), output);
  }

  // optional int32 ultrasound_dist_6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ultrasound_dist_6(), output);
  }

  // optional int32 ultrasound_dist_7 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ultrasound_dist_7(), output);
  }

  // optional int32 ultrasound_dist_8 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ultrasound_dist_8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ecu_status_3_517)
}

::google::protobuf::uint8* Ecu_status_3_517::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ecu_status_3_517)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ultrasound_dist_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ultrasound_dist_1(), target);
  }

  // optional int32 ultrasound_dist_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ultrasound_dist_2(), target);
  }

  // optional int32 ultrasound_dist_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ultrasound_dist_3(), target);
  }

  // optional int32 ultrasound_dist_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ultrasound_dist_4(), target);
  }

  // optional int32 ultrasound_dist_5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ultrasound_dist_5(), target);
  }

  // optional int32 ultrasound_dist_6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ultrasound_dist_6(), target);
  }

  // optional int32 ultrasound_dist_7 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ultrasound_dist_7(), target);
  }

  // optional int32 ultrasound_dist_8 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ultrasound_dist_8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ecu_status_3_517)
  return target;
}

size_t Ecu_status_3_517::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ecu_status_3_517)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ultrasound_dist_1 = 1;
    if (has_ultrasound_dist_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_1());
    }

    // optional int32 ultrasound_dist_2 = 2;
    if (has_ultrasound_dist_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_2());
    }

    // optional int32 ultrasound_dist_3 = 3;
    if (has_ultrasound_dist_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_3());
    }

    // optional int32 ultrasound_dist_4 = 4;
    if (has_ultrasound_dist_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_4());
    }

    // optional int32 ultrasound_dist_5 = 5;
    if (has_ultrasound_dist_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_5());
    }

    // optional int32 ultrasound_dist_6 = 6;
    if (has_ultrasound_dist_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_6());
    }

    // optional int32 ultrasound_dist_7 = 7;
    if (has_ultrasound_dist_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_7());
    }

    // optional int32 ultrasound_dist_8 = 8;
    if (has_ultrasound_dist_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultrasound_dist_8());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ecu_status_3_517::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ecu_status_3_517)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_3_517* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ecu_status_3_517>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ecu_status_3_517)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ecu_status_3_517)
    MergeFrom(*source);
  }
}

void Ecu_status_3_517::MergeFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ecu_status_3_517)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ultrasound_dist_1_ = from.ultrasound_dist_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      ultrasound_dist_2_ = from.ultrasound_dist_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      ultrasound_dist_3_ = from.ultrasound_dist_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      ultrasound_dist_4_ = from.ultrasound_dist_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      ultrasound_dist_5_ = from.ultrasound_dist_5_;
    }
    if (cached_has_bits & 0x00000020u) {
      ultrasound_dist_6_ = from.ultrasound_dist_6_;
    }
    if (cached_has_bits & 0x00000040u) {
      ultrasound_dist_7_ = from.ultrasound_dist_7_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultrasound_dist_8_ = from.ultrasound_dist_8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_3_517::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ecu_status_3_517)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_3_517::CopyFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ecu_status_3_517)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_3_517::IsInitialized() const {
  return true;
}

void Ecu_status_3_517::Swap(Ecu_status_3_517* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ecu_status_3_517::InternalSwap(Ecu_status_3_517* other) {
  std::swap(ultrasound_dist_1_, other->ultrasound_dist_1_);
  std::swap(ultrasound_dist_2_, other->ultrasound_dist_2_);
  std::swap(ultrasound_dist_3_, other->ultrasound_dist_3_);
  std::swap(ultrasound_dist_4_, other->ultrasound_dist_4_);
  std::swap(ultrasound_dist_5_, other->ultrasound_dist_5_);
  std::swap(ultrasound_dist_6_, other->ultrasound_dist_6_);
  std::swap(ultrasound_dist_7_, other->ultrasound_dist_7_);
  std::swap(ultrasound_dist_8_, other->ultrasound_dist_8_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ecu_status_3_517::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ecu_status_3_517

// optional int32 ultrasound_dist_1 = 1;
bool Ecu_status_3_517::has_ultrasound_dist_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_1() {
  _has_bits_[0] |= 0x00000001u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ecu_status_3_517::clear_ultrasound_dist_1() {
  ultrasound_dist_1_ = 0;
  clear_has_ultrasound_dist_1();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_1() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_1)
  return ultrasound_dist_1_;
}
void Ecu_status_3_517::set_ultrasound_dist_1(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_1();
  ultrasound_dist_1_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_1)
}

// optional int32 ultrasound_dist_2 = 2;
bool Ecu_status_3_517::has_ultrasound_dist_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_2() {
  _has_bits_[0] |= 0x00000002u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ecu_status_3_517::clear_ultrasound_dist_2() {
  ultrasound_dist_2_ = 0;
  clear_has_ultrasound_dist_2();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_2() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_2)
  return ultrasound_dist_2_;
}
void Ecu_status_3_517::set_ultrasound_dist_2(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_2();
  ultrasound_dist_2_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_2)
}

// optional int32 ultrasound_dist_3 = 3;
bool Ecu_status_3_517::has_ultrasound_dist_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_3() {
  _has_bits_[0] |= 0x00000004u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_3() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ecu_status_3_517::clear_ultrasound_dist_3() {
  ultrasound_dist_3_ = 0;
  clear_has_ultrasound_dist_3();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_3() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_3)
  return ultrasound_dist_3_;
}
void Ecu_status_3_517::set_ultrasound_dist_3(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_3();
  ultrasound_dist_3_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_3)
}

// optional int32 ultrasound_dist_4 = 4;
bool Ecu_status_3_517::has_ultrasound_dist_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_4() {
  _has_bits_[0] |= 0x00000008u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_4() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ecu_status_3_517::clear_ultrasound_dist_4() {
  ultrasound_dist_4_ = 0;
  clear_has_ultrasound_dist_4();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_4() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_4)
  return ultrasound_dist_4_;
}
void Ecu_status_3_517::set_ultrasound_dist_4(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_4();
  ultrasound_dist_4_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_4)
}

// optional int32 ultrasound_dist_5 = 5;
bool Ecu_status_3_517::has_ultrasound_dist_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_5() {
  _has_bits_[0] |= 0x00000010u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_5() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ecu_status_3_517::clear_ultrasound_dist_5() {
  ultrasound_dist_5_ = 0;
  clear_has_ultrasound_dist_5();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_5() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_5)
  return ultrasound_dist_5_;
}
void Ecu_status_3_517::set_ultrasound_dist_5(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_5();
  ultrasound_dist_5_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_5)
}

// optional int32 ultrasound_dist_6 = 6;
bool Ecu_status_3_517::has_ultrasound_dist_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_6() {
  _has_bits_[0] |= 0x00000020u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_6() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ecu_status_3_517::clear_ultrasound_dist_6() {
  ultrasound_dist_6_ = 0;
  clear_has_ultrasound_dist_6();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_6() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_6)
  return ultrasound_dist_6_;
}
void Ecu_status_3_517::set_ultrasound_dist_6(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_6();
  ultrasound_dist_6_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_6)
}

// optional int32 ultrasound_dist_7 = 7;
bool Ecu_status_3_517::has_ultrasound_dist_7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_7() {
  _has_bits_[0] |= 0x00000040u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_7() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ecu_status_3_517::clear_ultrasound_dist_7() {
  ultrasound_dist_7_ = 0;
  clear_has_ultrasound_dist_7();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_7() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_7)
  return ultrasound_dist_7_;
}
void Ecu_status_3_517::set_ultrasound_dist_7(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_7();
  ultrasound_dist_7_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_7)
}

// optional int32 ultrasound_dist_8 = 8;
bool Ecu_status_3_517::has_ultrasound_dist_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ecu_status_3_517::set_has_ultrasound_dist_8() {
  _has_bits_[0] |= 0x00000080u;
}
void Ecu_status_3_517::clear_has_ultrasound_dist_8() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ecu_status_3_517::clear_ultrasound_dist_8() {
  ultrasound_dist_8_ = 0;
  clear_has_ultrasound_dist_8();
}
::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_8() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_8)
  return ultrasound_dist_8_;
}
void Ecu_status_3_517::set_ultrasound_dist_8(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_8();
  ultrasound_dist_8_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ecu_status_2_516::kBatteryRemainingCapacityFieldNumber;
const int Ecu_status_2_516::kBatteryVoltageFieldNumber;
const int Ecu_status_2_516::kBatteryCurrentFieldNumber;
const int Ecu_status_2_516::kBatteryTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ecu_status_2_516::Ecu_status_2_516()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ecu_status_2_516)
}
Ecu_status_2_516::Ecu_status_2_516(const Ecu_status_2_516& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_voltage_, &from.battery_voltage_,
    reinterpret_cast<char*>(&battery_current_) -
    reinterpret_cast<char*>(&battery_voltage_) + sizeof(battery_current_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ecu_status_2_516)
}

void Ecu_status_2_516::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&battery_voltage_, 0, reinterpret_cast<char*>(&battery_current_) -
    reinterpret_cast<char*>(&battery_voltage_) + sizeof(battery_current_));
}

Ecu_status_2_516::~Ecu_status_2_516() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ecu_status_2_516)
  SharedDtor();
}

void Ecu_status_2_516::SharedDtor() {
}

void Ecu_status_2_516::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ecu_status_2_516::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ecu_status_2_516& Ecu_status_2_516::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ecu_status_2_516* Ecu_status_2_516::New(::google::protobuf::Arena* arena) const {
  Ecu_status_2_516* n = new Ecu_status_2_516;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ecu_status_2_516::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ecu_status_2_516)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&battery_voltage_, 0, reinterpret_cast<char*>(&battery_current_) -
      reinterpret_cast<char*>(&battery_voltage_) + sizeof(battery_current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ecu_status_2_516::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ecu_status_2_516)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battery_remaining_capacity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_battery_remaining_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_remaining_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double battery_voltage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_battery_voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double battery_current = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_battery_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_battery_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ecu_status_2_516)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ecu_status_2_516)
  return false;
#undef DO_
}

void Ecu_status_2_516::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ecu_status_2_516)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 battery_remaining_capacity = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battery_remaining_capacity(), output);
  }

  // optional double battery_voltage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->battery_voltage(), output);
  }

  // optional double battery_current = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->battery_current(), output);
  }

  // optional int32 battery_temperature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battery_temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ecu_status_2_516)
}

::google::protobuf::uint8* Ecu_status_2_516::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ecu_status_2_516)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 battery_remaining_capacity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battery_remaining_capacity(), target);
  }

  // optional double battery_voltage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->battery_voltage(), target);
  }

  // optional double battery_current = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->battery_current(), target);
  }

  // optional int32 battery_temperature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battery_temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ecu_status_2_516)
  return target;
}

size_t Ecu_status_2_516::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ecu_status_2_516)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double battery_voltage = 2;
    if (has_battery_voltage()) {
      total_size += 1 + 8;
    }

    // optional int32 battery_remaining_capacity = 1;
    if (has_battery_remaining_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battery_remaining_capacity());
    }

    // optional int32 battery_temperature = 4;
    if (has_battery_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battery_temperature());
    }

    // optional double battery_current = 3;
    if (has_battery_current()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ecu_status_2_516::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ecu_status_2_516)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_2_516* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ecu_status_2_516>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ecu_status_2_516)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ecu_status_2_516)
    MergeFrom(*source);
  }
}

void Ecu_status_2_516::MergeFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ecu_status_2_516)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      battery_voltage_ = from.battery_voltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      battery_remaining_capacity_ = from.battery_remaining_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      battery_temperature_ = from.battery_temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_current_ = from.battery_current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_2_516::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ecu_status_2_516)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_2_516::CopyFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ecu_status_2_516)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_2_516::IsInitialized() const {
  return true;
}

void Ecu_status_2_516::Swap(Ecu_status_2_516* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ecu_status_2_516::InternalSwap(Ecu_status_2_516* other) {
  std::swap(battery_voltage_, other->battery_voltage_);
  std::swap(battery_remaining_capacity_, other->battery_remaining_capacity_);
  std::swap(battery_temperature_, other->battery_temperature_);
  std::swap(battery_current_, other->battery_current_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ecu_status_2_516::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ecu_status_2_516

// optional int32 battery_remaining_capacity = 1;
bool Ecu_status_2_516::has_battery_remaining_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ecu_status_2_516::set_has_battery_remaining_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
void Ecu_status_2_516::clear_has_battery_remaining_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ecu_status_2_516::clear_battery_remaining_capacity() {
  battery_remaining_capacity_ = 0;
  clear_has_battery_remaining_capacity();
}
::google::protobuf::int32 Ecu_status_2_516::battery_remaining_capacity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_remaining_capacity)
  return battery_remaining_capacity_;
}
void Ecu_status_2_516::set_battery_remaining_capacity(::google::protobuf::int32 value) {
  set_has_battery_remaining_capacity();
  battery_remaining_capacity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_remaining_capacity)
}

// optional double battery_voltage = 2;
bool Ecu_status_2_516::has_battery_voltage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ecu_status_2_516::set_has_battery_voltage() {
  _has_bits_[0] |= 0x00000001u;
}
void Ecu_status_2_516::clear_has_battery_voltage() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ecu_status_2_516::clear_battery_voltage() {
  battery_voltage_ = 0;
  clear_has_battery_voltage();
}
double Ecu_status_2_516::battery_voltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_voltage)
  return battery_voltage_;
}
void Ecu_status_2_516::set_battery_voltage(double value) {
  set_has_battery_voltage();
  battery_voltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_voltage)
}

// optional double battery_current = 3;
bool Ecu_status_2_516::has_battery_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ecu_status_2_516::set_has_battery_current() {
  _has_bits_[0] |= 0x00000008u;
}
void Ecu_status_2_516::clear_has_battery_current() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ecu_status_2_516::clear_battery_current() {
  battery_current_ = 0;
  clear_has_battery_current();
}
double Ecu_status_2_516::battery_current() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_current)
  return battery_current_;
}
void Ecu_status_2_516::set_battery_current(double value) {
  set_has_battery_current();
  battery_current_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_current)
}

// optional int32 battery_temperature = 4;
bool Ecu_status_2_516::has_battery_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ecu_status_2_516::set_has_battery_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
void Ecu_status_2_516::clear_has_battery_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ecu_status_2_516::clear_battery_temperature() {
  battery_temperature_ = 0;
  clear_has_battery_temperature();
}
::google::protobuf::int32 Ecu_status_2_516::battery_temperature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_temperature)
  return battery_temperature_;
}
void Ecu_status_2_516::set_battery_temperature(::google::protobuf::int32 value) {
  set_has_battery_temperature();
  battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ch::kControlCommand115FieldNumber;
const int Ch::kGearCommand114FieldNumber;
const int Ch::kBrakeCommand111FieldNumber;
const int Ch::kThrottleCommand110FieldNumber;
const int Ch::kTurnsignalCommand113FieldNumber;
const int Ch::kSteerCommand112FieldNumber;
const int Ch::kBrakeStatus511FieldNumber;
const int Ch::kThrottleStatus510FieldNumber;
const int Ch::kTurnsignalStatus513FieldNumber;
const int Ch::kSteerStatus512FieldNumber;
const int Ch::kEcuStatus1515FieldNumber;
const int Ch::kGearStatus514FieldNumber;
const int Ch::kEcuStatus3517FieldNumber;
const int Ch::kEcuStatus2516FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ch::Ch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ch)
}
Ch::Ch(const Ch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_command_115()) {
    control_command_115_ = new ::jmc_auto::canbus::Control_command_115(*from.control_command_115_);
  } else {
    control_command_115_ = NULL;
  }
  if (from.has_gear_command_114()) {
    gear_command_114_ = new ::jmc_auto::canbus::Gear_command_114(*from.gear_command_114_);
  } else {
    gear_command_114_ = NULL;
  }
  if (from.has_brake_command_111()) {
    brake_command_111_ = new ::jmc_auto::canbus::Brake_command_111(*from.brake_command_111_);
  } else {
    brake_command_111_ = NULL;
  }
  if (from.has_throttle_command_110()) {
    throttle_command_110_ = new ::jmc_auto::canbus::Throttle_command_110(*from.throttle_command_110_);
  } else {
    throttle_command_110_ = NULL;
  }
  if (from.has_turnsignal_command_113()) {
    turnsignal_command_113_ = new ::jmc_auto::canbus::Turnsignal_command_113(*from.turnsignal_command_113_);
  } else {
    turnsignal_command_113_ = NULL;
  }
  if (from.has_steer_command_112()) {
    steer_command_112_ = new ::jmc_auto::canbus::Steer_command_112(*from.steer_command_112_);
  } else {
    steer_command_112_ = NULL;
  }
  if (from.has_brake_status__511()) {
    brake_status__511_ = new ::jmc_auto::canbus::Brake_status__511(*from.brake_status__511_);
  } else {
    brake_status__511_ = NULL;
  }
  if (from.has_throttle_status__510()) {
    throttle_status__510_ = new ::jmc_auto::canbus::Throttle_status__510(*from.throttle_status__510_);
  } else {
    throttle_status__510_ = NULL;
  }
  if (from.has_turnsignal_status__513()) {
    turnsignal_status__513_ = new ::jmc_auto::canbus::Turnsignal_status__513(*from.turnsignal_status__513_);
  } else {
    turnsignal_status__513_ = NULL;
  }
  if (from.has_steer_status__512()) {
    steer_status__512_ = new ::jmc_auto::canbus::Steer_status__512(*from.steer_status__512_);
  } else {
    steer_status__512_ = NULL;
  }
  if (from.has_ecu_status_1_515()) {
    ecu_status_1_515_ = new ::jmc_auto::canbus::Ecu_status_1_515(*from.ecu_status_1_515_);
  } else {
    ecu_status_1_515_ = NULL;
  }
  if (from.has_gear_status_514()) {
    gear_status_514_ = new ::jmc_auto::canbus::Gear_status_514(*from.gear_status_514_);
  } else {
    gear_status_514_ = NULL;
  }
  if (from.has_ecu_status_3_517()) {
    ecu_status_3_517_ = new ::jmc_auto::canbus::Ecu_status_3_517(*from.ecu_status_3_517_);
  } else {
    ecu_status_3_517_ = NULL;
  }
  if (from.has_ecu_status_2_516()) {
    ecu_status_2_516_ = new ::jmc_auto::canbus::Ecu_status_2_516(*from.ecu_status_2_516_);
  } else {
    ecu_status_2_516_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ch)
}

void Ch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&control_command_115_, 0, reinterpret_cast<char*>(&ecu_status_2_516_) -
    reinterpret_cast<char*>(&control_command_115_) + sizeof(ecu_status_2_516_));
}

Ch::~Ch() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ch)
  SharedDtor();
}

void Ch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete control_command_115_;
  }
  if (this != internal_default_instance()) {
    delete gear_command_114_;
  }
  if (this != internal_default_instance()) {
    delete brake_command_111_;
  }
  if (this != internal_default_instance()) {
    delete throttle_command_110_;
  }
  if (this != internal_default_instance()) {
    delete turnsignal_command_113_;
  }
  if (this != internal_default_instance()) {
    delete steer_command_112_;
  }
  if (this != internal_default_instance()) {
    delete brake_status__511_;
  }
  if (this != internal_default_instance()) {
    delete throttle_status__510_;
  }
  if (this != internal_default_instance()) {
    delete turnsignal_status__513_;
  }
  if (this != internal_default_instance()) {
    delete steer_status__512_;
  }
  if (this != internal_default_instance()) {
    delete ecu_status_1_515_;
  }
  if (this != internal_default_instance()) {
    delete gear_status_514_;
  }
  if (this != internal_default_instance()) {
    delete ecu_status_3_517_;
  }
  if (this != internal_default_instance()) {
    delete ecu_status_2_516_;
  }
}

void Ch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ch::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ch& Ch::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ch* Ch::New(::google::protobuf::Arena* arena) const {
  Ch* n = new Ch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ch::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ch)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_control_command_115()) {
      GOOGLE_DCHECK(control_command_115_ != NULL);
      control_command_115_->::jmc_auto::canbus::Control_command_115::Clear();
    }
    if (has_gear_command_114()) {
      GOOGLE_DCHECK(gear_command_114_ != NULL);
      gear_command_114_->::jmc_auto::canbus::Gear_command_114::Clear();
    }
    if (has_brake_command_111()) {
      GOOGLE_DCHECK(brake_command_111_ != NULL);
      brake_command_111_->::jmc_auto::canbus::Brake_command_111::Clear();
    }
    if (has_throttle_command_110()) {
      GOOGLE_DCHECK(throttle_command_110_ != NULL);
      throttle_command_110_->::jmc_auto::canbus::Throttle_command_110::Clear();
    }
    if (has_turnsignal_command_113()) {
      GOOGLE_DCHECK(turnsignal_command_113_ != NULL);
      turnsignal_command_113_->::jmc_auto::canbus::Turnsignal_command_113::Clear();
    }
    if (has_steer_command_112()) {
      GOOGLE_DCHECK(steer_command_112_ != NULL);
      steer_command_112_->::jmc_auto::canbus::Steer_command_112::Clear();
    }
    if (has_brake_status__511()) {
      GOOGLE_DCHECK(brake_status__511_ != NULL);
      brake_status__511_->::jmc_auto::canbus::Brake_status__511::Clear();
    }
    if (has_throttle_status__510()) {
      GOOGLE_DCHECK(throttle_status__510_ != NULL);
      throttle_status__510_->::jmc_auto::canbus::Throttle_status__510::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_turnsignal_status__513()) {
      GOOGLE_DCHECK(turnsignal_status__513_ != NULL);
      turnsignal_status__513_->::jmc_auto::canbus::Turnsignal_status__513::Clear();
    }
    if (has_steer_status__512()) {
      GOOGLE_DCHECK(steer_status__512_ != NULL);
      steer_status__512_->::jmc_auto::canbus::Steer_status__512::Clear();
    }
    if (has_ecu_status_1_515()) {
      GOOGLE_DCHECK(ecu_status_1_515_ != NULL);
      ecu_status_1_515_->::jmc_auto::canbus::Ecu_status_1_515::Clear();
    }
    if (has_gear_status_514()) {
      GOOGLE_DCHECK(gear_status_514_ != NULL);
      gear_status_514_->::jmc_auto::canbus::Gear_status_514::Clear();
    }
    if (has_ecu_status_3_517()) {
      GOOGLE_DCHECK(ecu_status_3_517_ != NULL);
      ecu_status_3_517_->::jmc_auto::canbus::Ecu_status_3_517::Clear();
    }
    if (has_ecu_status_2_516()) {
      GOOGLE_DCHECK(ecu_status_2_516_ != NULL);
      ecu_status_2_516_->::jmc_auto::canbus::Ecu_status_2_516::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_command_115()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_command_114()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake_command_111()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle_command_110()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turnsignal_command_113()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steer_command_112()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake_status__511()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle_status__510()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turnsignal_status__513()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steer_status__512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecu_status_1_515()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_status_514()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecu_status_3_517()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecu_status_2_516()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ch)
  return false;
#undef DO_
}

void Ch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->control_command_115_, output);
  }

  // optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gear_command_114_, output);
  }

  // optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->brake_command_111_, output);
  }

  // optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->throttle_command_110_, output);
  }

  // optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->turnsignal_command_113_, output);
  }

  // optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->steer_command_112_, output);
  }

  // optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->brake_status__511_, output);
  }

  // optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->throttle_status__510_, output);
  }

  // optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->turnsignal_status__513_, output);
  }

  // optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->steer_status__512_, output);
  }

  // optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->ecu_status_1_515_, output);
  }

  // optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->gear_status_514_, output);
  }

  // optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->ecu_status_3_517_, output);
  }

  // optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->ecu_status_2_516_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ch)
}

::google::protobuf::uint8* Ch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->control_command_115_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gear_command_114_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->brake_command_111_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->throttle_command_110_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->turnsignal_command_113_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->steer_command_112_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->brake_status__511_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->throttle_status__510_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->turnsignal_status__513_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->steer_status__512_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->ecu_status_1_515_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->gear_status_514_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->ecu_status_3_517_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->ecu_status_2_516_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ch)
  return target;
}

size_t Ch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
    if (has_control_command_115()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->control_command_115_);
    }

    // optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
    if (has_gear_command_114()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gear_command_114_);
    }

    // optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
    if (has_brake_command_111()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brake_command_111_);
    }

    // optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
    if (has_throttle_command_110()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->throttle_command_110_);
    }

    // optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
    if (has_turnsignal_command_113()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->turnsignal_command_113_);
    }

    // optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
    if (has_steer_command_112()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->steer_command_112_);
    }

    // optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
    if (has_brake_status__511()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brake_status__511_);
    }

    // optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
    if (has_throttle_status__510()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->throttle_status__510_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
    if (has_turnsignal_status__513()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->turnsignal_status__513_);
    }

    // optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
    if (has_steer_status__512()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->steer_status__512_);
    }

    // optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
    if (has_ecu_status_1_515()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ecu_status_1_515_);
    }

    // optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
    if (has_gear_status_514()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gear_status_514_);
    }

    // optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
    if (has_ecu_status_3_517()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ecu_status_3_517_);
    }

    // optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
    if (has_ecu_status_2_516()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ecu_status_2_516_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ch)
  GOOGLE_DCHECK_NE(&from, this);
  const Ch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ch)
    MergeFrom(*source);
  }
}

void Ch::MergeFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_command_115()->::jmc_auto::canbus::Control_command_115::MergeFrom(from.control_command_115());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gear_command_114()->::jmc_auto::canbus::Gear_command_114::MergeFrom(from.gear_command_114());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brake_command_111()->::jmc_auto::canbus::Brake_command_111::MergeFrom(from.brake_command_111());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_throttle_command_110()->::jmc_auto::canbus::Throttle_command_110::MergeFrom(from.throttle_command_110());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_turnsignal_command_113()->::jmc_auto::canbus::Turnsignal_command_113::MergeFrom(from.turnsignal_command_113());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_steer_command_112()->::jmc_auto::canbus::Steer_command_112::MergeFrom(from.steer_command_112());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_brake_status__511()->::jmc_auto::canbus::Brake_status__511::MergeFrom(from.brake_status__511());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_throttle_status__510()->::jmc_auto::canbus::Throttle_status__510::MergeFrom(from.throttle_status__510());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_turnsignal_status__513()->::jmc_auto::canbus::Turnsignal_status__513::MergeFrom(from.turnsignal_status__513());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_steer_status__512()->::jmc_auto::canbus::Steer_status__512::MergeFrom(from.steer_status__512());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_ecu_status_1_515()->::jmc_auto::canbus::Ecu_status_1_515::MergeFrom(from.ecu_status_1_515());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_gear_status_514()->::jmc_auto::canbus::Gear_status_514::MergeFrom(from.gear_status_514());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_ecu_status_3_517()->::jmc_auto::canbus::Ecu_status_3_517::MergeFrom(from.ecu_status_3_517());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_ecu_status_2_516()->::jmc_auto::canbus::Ecu_status_2_516::MergeFrom(from.ecu_status_2_516());
    }
  }
}

void Ch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ch::CopyFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ch::IsInitialized() const {
  return true;
}

void Ch::Swap(Ch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ch::InternalSwap(Ch* other) {
  std::swap(control_command_115_, other->control_command_115_);
  std::swap(gear_command_114_, other->gear_command_114_);
  std::swap(brake_command_111_, other->brake_command_111_);
  std::swap(throttle_command_110_, other->throttle_command_110_);
  std::swap(turnsignal_command_113_, other->turnsignal_command_113_);
  std::swap(steer_command_112_, other->steer_command_112_);
  std::swap(brake_status__511_, other->brake_status__511_);
  std::swap(throttle_status__510_, other->throttle_status__510_);
  std::swap(turnsignal_status__513_, other->turnsignal_status__513_);
  std::swap(steer_status__512_, other->steer_status__512_);
  std::swap(ecu_status_1_515_, other->ecu_status_1_515_);
  std::swap(gear_status_514_, other->gear_status_514_);
  std::swap(ecu_status_3_517_, other->ecu_status_3_517_);
  std::swap(ecu_status_2_516_, other->ecu_status_2_516_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ch::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ch

// optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
bool Ch::has_control_command_115() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ch::set_has_control_command_115() {
  _has_bits_[0] |= 0x00000001u;
}
void Ch::clear_has_control_command_115() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ch::clear_control_command_115() {
  if (control_command_115_ != NULL) control_command_115_->::jmc_auto::canbus::Control_command_115::Clear();
  clear_has_control_command_115();
}
const ::jmc_auto::canbus::Control_command_115& Ch::control_command_115() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.control_command_115)
  return control_command_115_ != NULL ? *control_command_115_
                         : *::jmc_auto::canbus::Control_command_115::internal_default_instance();
}
::jmc_auto::canbus::Control_command_115* Ch::mutable_control_command_115() {
  set_has_control_command_115();
  if (control_command_115_ == NULL) {
    control_command_115_ = new ::jmc_auto::canbus::Control_command_115;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.control_command_115)
  return control_command_115_;
}
::jmc_auto::canbus::Control_command_115* Ch::release_control_command_115() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.control_command_115)
  clear_has_control_command_115();
  ::jmc_auto::canbus::Control_command_115* temp = control_command_115_;
  control_command_115_ = NULL;
  return temp;
}
void Ch::set_allocated_control_command_115(::jmc_auto::canbus::Control_command_115* control_command_115) {
  delete control_command_115_;
  control_command_115_ = control_command_115;
  if (control_command_115) {
    set_has_control_command_115();
  } else {
    clear_has_control_command_115();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.control_command_115)
}

// optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
bool Ch::has_gear_command_114() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ch::set_has_gear_command_114() {
  _has_bits_[0] |= 0x00000002u;
}
void Ch::clear_has_gear_command_114() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ch::clear_gear_command_114() {
  if (gear_command_114_ != NULL) gear_command_114_->::jmc_auto::canbus::Gear_command_114::Clear();
  clear_has_gear_command_114();
}
const ::jmc_auto::canbus::Gear_command_114& Ch::gear_command_114() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.gear_command_114)
  return gear_command_114_ != NULL ? *gear_command_114_
                         : *::jmc_auto::canbus::Gear_command_114::internal_default_instance();
}
::jmc_auto::canbus::Gear_command_114* Ch::mutable_gear_command_114() {
  set_has_gear_command_114();
  if (gear_command_114_ == NULL) {
    gear_command_114_ = new ::jmc_auto::canbus::Gear_command_114;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.gear_command_114)
  return gear_command_114_;
}
::jmc_auto::canbus::Gear_command_114* Ch::release_gear_command_114() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.gear_command_114)
  clear_has_gear_command_114();
  ::jmc_auto::canbus::Gear_command_114* temp = gear_command_114_;
  gear_command_114_ = NULL;
  return temp;
}
void Ch::set_allocated_gear_command_114(::jmc_auto::canbus::Gear_command_114* gear_command_114) {
  delete gear_command_114_;
  gear_command_114_ = gear_command_114;
  if (gear_command_114) {
    set_has_gear_command_114();
  } else {
    clear_has_gear_command_114();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.gear_command_114)
}

// optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
bool Ch::has_brake_command_111() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ch::set_has_brake_command_111() {
  _has_bits_[0] |= 0x00000004u;
}
void Ch::clear_has_brake_command_111() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ch::clear_brake_command_111() {
  if (brake_command_111_ != NULL) brake_command_111_->::jmc_auto::canbus::Brake_command_111::Clear();
  clear_has_brake_command_111();
}
const ::jmc_auto::canbus::Brake_command_111& Ch::brake_command_111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.brake_command_111)
  return brake_command_111_ != NULL ? *brake_command_111_
                         : *::jmc_auto::canbus::Brake_command_111::internal_default_instance();
}
::jmc_auto::canbus::Brake_command_111* Ch::mutable_brake_command_111() {
  set_has_brake_command_111();
  if (brake_command_111_ == NULL) {
    brake_command_111_ = new ::jmc_auto::canbus::Brake_command_111;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.brake_command_111)
  return brake_command_111_;
}
::jmc_auto::canbus::Brake_command_111* Ch::release_brake_command_111() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.brake_command_111)
  clear_has_brake_command_111();
  ::jmc_auto::canbus::Brake_command_111* temp = brake_command_111_;
  brake_command_111_ = NULL;
  return temp;
}
void Ch::set_allocated_brake_command_111(::jmc_auto::canbus::Brake_command_111* brake_command_111) {
  delete brake_command_111_;
  brake_command_111_ = brake_command_111;
  if (brake_command_111) {
    set_has_brake_command_111();
  } else {
    clear_has_brake_command_111();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.brake_command_111)
}

// optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
bool Ch::has_throttle_command_110() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ch::set_has_throttle_command_110() {
  _has_bits_[0] |= 0x00000008u;
}
void Ch::clear_has_throttle_command_110() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ch::clear_throttle_command_110() {
  if (throttle_command_110_ != NULL) throttle_command_110_->::jmc_auto::canbus::Throttle_command_110::Clear();
  clear_has_throttle_command_110();
}
const ::jmc_auto::canbus::Throttle_command_110& Ch::throttle_command_110() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.throttle_command_110)
  return throttle_command_110_ != NULL ? *throttle_command_110_
                         : *::jmc_auto::canbus::Throttle_command_110::internal_default_instance();
}
::jmc_auto::canbus::Throttle_command_110* Ch::mutable_throttle_command_110() {
  set_has_throttle_command_110();
  if (throttle_command_110_ == NULL) {
    throttle_command_110_ = new ::jmc_auto::canbus::Throttle_command_110;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.throttle_command_110)
  return throttle_command_110_;
}
::jmc_auto::canbus::Throttle_command_110* Ch::release_throttle_command_110() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.throttle_command_110)
  clear_has_throttle_command_110();
  ::jmc_auto::canbus::Throttle_command_110* temp = throttle_command_110_;
  throttle_command_110_ = NULL;
  return temp;
}
void Ch::set_allocated_throttle_command_110(::jmc_auto::canbus::Throttle_command_110* throttle_command_110) {
  delete throttle_command_110_;
  throttle_command_110_ = throttle_command_110;
  if (throttle_command_110) {
    set_has_throttle_command_110();
  } else {
    clear_has_throttle_command_110();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.throttle_command_110)
}

// optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
bool Ch::has_turnsignal_command_113() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ch::set_has_turnsignal_command_113() {
  _has_bits_[0] |= 0x00000010u;
}
void Ch::clear_has_turnsignal_command_113() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ch::clear_turnsignal_command_113() {
  if (turnsignal_command_113_ != NULL) turnsignal_command_113_->::jmc_auto::canbus::Turnsignal_command_113::Clear();
  clear_has_turnsignal_command_113();
}
const ::jmc_auto::canbus::Turnsignal_command_113& Ch::turnsignal_command_113() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.turnsignal_command_113)
  return turnsignal_command_113_ != NULL ? *turnsignal_command_113_
                         : *::jmc_auto::canbus::Turnsignal_command_113::internal_default_instance();
}
::jmc_auto::canbus::Turnsignal_command_113* Ch::mutable_turnsignal_command_113() {
  set_has_turnsignal_command_113();
  if (turnsignal_command_113_ == NULL) {
    turnsignal_command_113_ = new ::jmc_auto::canbus::Turnsignal_command_113;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.turnsignal_command_113)
  return turnsignal_command_113_;
}
::jmc_auto::canbus::Turnsignal_command_113* Ch::release_turnsignal_command_113() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.turnsignal_command_113)
  clear_has_turnsignal_command_113();
  ::jmc_auto::canbus::Turnsignal_command_113* temp = turnsignal_command_113_;
  turnsignal_command_113_ = NULL;
  return temp;
}
void Ch::set_allocated_turnsignal_command_113(::jmc_auto::canbus::Turnsignal_command_113* turnsignal_command_113) {
  delete turnsignal_command_113_;
  turnsignal_command_113_ = turnsignal_command_113;
  if (turnsignal_command_113) {
    set_has_turnsignal_command_113();
  } else {
    clear_has_turnsignal_command_113();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.turnsignal_command_113)
}

// optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
bool Ch::has_steer_command_112() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ch::set_has_steer_command_112() {
  _has_bits_[0] |= 0x00000020u;
}
void Ch::clear_has_steer_command_112() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ch::clear_steer_command_112() {
  if (steer_command_112_ != NULL) steer_command_112_->::jmc_auto::canbus::Steer_command_112::Clear();
  clear_has_steer_command_112();
}
const ::jmc_auto::canbus::Steer_command_112& Ch::steer_command_112() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.steer_command_112)
  return steer_command_112_ != NULL ? *steer_command_112_
                         : *::jmc_auto::canbus::Steer_command_112::internal_default_instance();
}
::jmc_auto::canbus::Steer_command_112* Ch::mutable_steer_command_112() {
  set_has_steer_command_112();
  if (steer_command_112_ == NULL) {
    steer_command_112_ = new ::jmc_auto::canbus::Steer_command_112;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.steer_command_112)
  return steer_command_112_;
}
::jmc_auto::canbus::Steer_command_112* Ch::release_steer_command_112() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.steer_command_112)
  clear_has_steer_command_112();
  ::jmc_auto::canbus::Steer_command_112* temp = steer_command_112_;
  steer_command_112_ = NULL;
  return temp;
}
void Ch::set_allocated_steer_command_112(::jmc_auto::canbus::Steer_command_112* steer_command_112) {
  delete steer_command_112_;
  steer_command_112_ = steer_command_112;
  if (steer_command_112) {
    set_has_steer_command_112();
  } else {
    clear_has_steer_command_112();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.steer_command_112)
}

// optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
bool Ch::has_brake_status__511() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ch::set_has_brake_status__511() {
  _has_bits_[0] |= 0x00000040u;
}
void Ch::clear_has_brake_status__511() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ch::clear_brake_status__511() {
  if (brake_status__511_ != NULL) brake_status__511_->::jmc_auto::canbus::Brake_status__511::Clear();
  clear_has_brake_status__511();
}
const ::jmc_auto::canbus::Brake_status__511& Ch::brake_status__511() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.brake_status__511)
  return brake_status__511_ != NULL ? *brake_status__511_
                         : *::jmc_auto::canbus::Brake_status__511::internal_default_instance();
}
::jmc_auto::canbus::Brake_status__511* Ch::mutable_brake_status__511() {
  set_has_brake_status__511();
  if (brake_status__511_ == NULL) {
    brake_status__511_ = new ::jmc_auto::canbus::Brake_status__511;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.brake_status__511)
  return brake_status__511_;
}
::jmc_auto::canbus::Brake_status__511* Ch::release_brake_status__511() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.brake_status__511)
  clear_has_brake_status__511();
  ::jmc_auto::canbus::Brake_status__511* temp = brake_status__511_;
  brake_status__511_ = NULL;
  return temp;
}
void Ch::set_allocated_brake_status__511(::jmc_auto::canbus::Brake_status__511* brake_status__511) {
  delete brake_status__511_;
  brake_status__511_ = brake_status__511;
  if (brake_status__511) {
    set_has_brake_status__511();
  } else {
    clear_has_brake_status__511();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.brake_status__511)
}

// optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
bool Ch::has_throttle_status__510() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ch::set_has_throttle_status__510() {
  _has_bits_[0] |= 0x00000080u;
}
void Ch::clear_has_throttle_status__510() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ch::clear_throttle_status__510() {
  if (throttle_status__510_ != NULL) throttle_status__510_->::jmc_auto::canbus::Throttle_status__510::Clear();
  clear_has_throttle_status__510();
}
const ::jmc_auto::canbus::Throttle_status__510& Ch::throttle_status__510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.throttle_status__510)
  return throttle_status__510_ != NULL ? *throttle_status__510_
                         : *::jmc_auto::canbus::Throttle_status__510::internal_default_instance();
}
::jmc_auto::canbus::Throttle_status__510* Ch::mutable_throttle_status__510() {
  set_has_throttle_status__510();
  if (throttle_status__510_ == NULL) {
    throttle_status__510_ = new ::jmc_auto::canbus::Throttle_status__510;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.throttle_status__510)
  return throttle_status__510_;
}
::jmc_auto::canbus::Throttle_status__510* Ch::release_throttle_status__510() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.throttle_status__510)
  clear_has_throttle_status__510();
  ::jmc_auto::canbus::Throttle_status__510* temp = throttle_status__510_;
  throttle_status__510_ = NULL;
  return temp;
}
void Ch::set_allocated_throttle_status__510(::jmc_auto::canbus::Throttle_status__510* throttle_status__510) {
  delete throttle_status__510_;
  throttle_status__510_ = throttle_status__510;
  if (throttle_status__510) {
    set_has_throttle_status__510();
  } else {
    clear_has_throttle_status__510();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.throttle_status__510)
}

// optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
bool Ch::has_turnsignal_status__513() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ch::set_has_turnsignal_status__513() {
  _has_bits_[0] |= 0x00000100u;
}
void Ch::clear_has_turnsignal_status__513() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ch::clear_turnsignal_status__513() {
  if (turnsignal_status__513_ != NULL) turnsignal_status__513_->::jmc_auto::canbus::Turnsignal_status__513::Clear();
  clear_has_turnsignal_status__513();
}
const ::jmc_auto::canbus::Turnsignal_status__513& Ch::turnsignal_status__513() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.turnsignal_status__513)
  return turnsignal_status__513_ != NULL ? *turnsignal_status__513_
                         : *::jmc_auto::canbus::Turnsignal_status__513::internal_default_instance();
}
::jmc_auto::canbus::Turnsignal_status__513* Ch::mutable_turnsignal_status__513() {
  set_has_turnsignal_status__513();
  if (turnsignal_status__513_ == NULL) {
    turnsignal_status__513_ = new ::jmc_auto::canbus::Turnsignal_status__513;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.turnsignal_status__513)
  return turnsignal_status__513_;
}
::jmc_auto::canbus::Turnsignal_status__513* Ch::release_turnsignal_status__513() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.turnsignal_status__513)
  clear_has_turnsignal_status__513();
  ::jmc_auto::canbus::Turnsignal_status__513* temp = turnsignal_status__513_;
  turnsignal_status__513_ = NULL;
  return temp;
}
void Ch::set_allocated_turnsignal_status__513(::jmc_auto::canbus::Turnsignal_status__513* turnsignal_status__513) {
  delete turnsignal_status__513_;
  turnsignal_status__513_ = turnsignal_status__513;
  if (turnsignal_status__513) {
    set_has_turnsignal_status__513();
  } else {
    clear_has_turnsignal_status__513();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.turnsignal_status__513)
}

// optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
bool Ch::has_steer_status__512() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ch::set_has_steer_status__512() {
  _has_bits_[0] |= 0x00000200u;
}
void Ch::clear_has_steer_status__512() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ch::clear_steer_status__512() {
  if (steer_status__512_ != NULL) steer_status__512_->::jmc_auto::canbus::Steer_status__512::Clear();
  clear_has_steer_status__512();
}
const ::jmc_auto::canbus::Steer_status__512& Ch::steer_status__512() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.steer_status__512)
  return steer_status__512_ != NULL ? *steer_status__512_
                         : *::jmc_auto::canbus::Steer_status__512::internal_default_instance();
}
::jmc_auto::canbus::Steer_status__512* Ch::mutable_steer_status__512() {
  set_has_steer_status__512();
  if (steer_status__512_ == NULL) {
    steer_status__512_ = new ::jmc_auto::canbus::Steer_status__512;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.steer_status__512)
  return steer_status__512_;
}
::jmc_auto::canbus::Steer_status__512* Ch::release_steer_status__512() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.steer_status__512)
  clear_has_steer_status__512();
  ::jmc_auto::canbus::Steer_status__512* temp = steer_status__512_;
  steer_status__512_ = NULL;
  return temp;
}
void Ch::set_allocated_steer_status__512(::jmc_auto::canbus::Steer_status__512* steer_status__512) {
  delete steer_status__512_;
  steer_status__512_ = steer_status__512;
  if (steer_status__512) {
    set_has_steer_status__512();
  } else {
    clear_has_steer_status__512();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.steer_status__512)
}

// optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
bool Ch::has_ecu_status_1_515() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ch::set_has_ecu_status_1_515() {
  _has_bits_[0] |= 0x00000400u;
}
void Ch::clear_has_ecu_status_1_515() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ch::clear_ecu_status_1_515() {
  if (ecu_status_1_515_ != NULL) ecu_status_1_515_->::jmc_auto::canbus::Ecu_status_1_515::Clear();
  clear_has_ecu_status_1_515();
}
const ::jmc_auto::canbus::Ecu_status_1_515& Ch::ecu_status_1_515() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_1_515)
  return ecu_status_1_515_ != NULL ? *ecu_status_1_515_
                         : *::jmc_auto::canbus::Ecu_status_1_515::internal_default_instance();
}
::jmc_auto::canbus::Ecu_status_1_515* Ch::mutable_ecu_status_1_515() {
  set_has_ecu_status_1_515();
  if (ecu_status_1_515_ == NULL) {
    ecu_status_1_515_ = new ::jmc_auto::canbus::Ecu_status_1_515;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_1_515)
  return ecu_status_1_515_;
}
::jmc_auto::canbus::Ecu_status_1_515* Ch::release_ecu_status_1_515() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_1_515)
  clear_has_ecu_status_1_515();
  ::jmc_auto::canbus::Ecu_status_1_515* temp = ecu_status_1_515_;
  ecu_status_1_515_ = NULL;
  return temp;
}
void Ch::set_allocated_ecu_status_1_515(::jmc_auto::canbus::Ecu_status_1_515* ecu_status_1_515) {
  delete ecu_status_1_515_;
  ecu_status_1_515_ = ecu_status_1_515;
  if (ecu_status_1_515) {
    set_has_ecu_status_1_515();
  } else {
    clear_has_ecu_status_1_515();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_1_515)
}

// optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
bool Ch::has_gear_status_514() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Ch::set_has_gear_status_514() {
  _has_bits_[0] |= 0x00000800u;
}
void Ch::clear_has_gear_status_514() {
  _has_bits_[0] &= ~0x00000800u;
}
void Ch::clear_gear_status_514() {
  if (gear_status_514_ != NULL) gear_status_514_->::jmc_auto::canbus::Gear_status_514::Clear();
  clear_has_gear_status_514();
}
const ::jmc_auto::canbus::Gear_status_514& Ch::gear_status_514() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.gear_status_514)
  return gear_status_514_ != NULL ? *gear_status_514_
                         : *::jmc_auto::canbus::Gear_status_514::internal_default_instance();
}
::jmc_auto::canbus::Gear_status_514* Ch::mutable_gear_status_514() {
  set_has_gear_status_514();
  if (gear_status_514_ == NULL) {
    gear_status_514_ = new ::jmc_auto::canbus::Gear_status_514;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.gear_status_514)
  return gear_status_514_;
}
::jmc_auto::canbus::Gear_status_514* Ch::release_gear_status_514() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.gear_status_514)
  clear_has_gear_status_514();
  ::jmc_auto::canbus::Gear_status_514* temp = gear_status_514_;
  gear_status_514_ = NULL;
  return temp;
}
void Ch::set_allocated_gear_status_514(::jmc_auto::canbus::Gear_status_514* gear_status_514) {
  delete gear_status_514_;
  gear_status_514_ = gear_status_514;
  if (gear_status_514) {
    set_has_gear_status_514();
  } else {
    clear_has_gear_status_514();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.gear_status_514)
}

// optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
bool Ch::has_ecu_status_3_517() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Ch::set_has_ecu_status_3_517() {
  _has_bits_[0] |= 0x00001000u;
}
void Ch::clear_has_ecu_status_3_517() {
  _has_bits_[0] &= ~0x00001000u;
}
void Ch::clear_ecu_status_3_517() {
  if (ecu_status_3_517_ != NULL) ecu_status_3_517_->::jmc_auto::canbus::Ecu_status_3_517::Clear();
  clear_has_ecu_status_3_517();
}
const ::jmc_auto::canbus::Ecu_status_3_517& Ch::ecu_status_3_517() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_3_517)
  return ecu_status_3_517_ != NULL ? *ecu_status_3_517_
                         : *::jmc_auto::canbus::Ecu_status_3_517::internal_default_instance();
}
::jmc_auto::canbus::Ecu_status_3_517* Ch::mutable_ecu_status_3_517() {
  set_has_ecu_status_3_517();
  if (ecu_status_3_517_ == NULL) {
    ecu_status_3_517_ = new ::jmc_auto::canbus::Ecu_status_3_517;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_3_517)
  return ecu_status_3_517_;
}
::jmc_auto::canbus::Ecu_status_3_517* Ch::release_ecu_status_3_517() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_3_517)
  clear_has_ecu_status_3_517();
  ::jmc_auto::canbus::Ecu_status_3_517* temp = ecu_status_3_517_;
  ecu_status_3_517_ = NULL;
  return temp;
}
void Ch::set_allocated_ecu_status_3_517(::jmc_auto::canbus::Ecu_status_3_517* ecu_status_3_517) {
  delete ecu_status_3_517_;
  ecu_status_3_517_ = ecu_status_3_517;
  if (ecu_status_3_517) {
    set_has_ecu_status_3_517();
  } else {
    clear_has_ecu_status_3_517();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_3_517)
}

// optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
bool Ch::has_ecu_status_2_516() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Ch::set_has_ecu_status_2_516() {
  _has_bits_[0] |= 0x00002000u;
}
void Ch::clear_has_ecu_status_2_516() {
  _has_bits_[0] &= ~0x00002000u;
}
void Ch::clear_ecu_status_2_516() {
  if (ecu_status_2_516_ != NULL) ecu_status_2_516_->::jmc_auto::canbus::Ecu_status_2_516::Clear();
  clear_has_ecu_status_2_516();
}
const ::jmc_auto::canbus::Ecu_status_2_516& Ch::ecu_status_2_516() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_2_516)
  return ecu_status_2_516_ != NULL ? *ecu_status_2_516_
                         : *::jmc_auto::canbus::Ecu_status_2_516::internal_default_instance();
}
::jmc_auto::canbus::Ecu_status_2_516* Ch::mutable_ecu_status_2_516() {
  set_has_ecu_status_2_516();
  if (ecu_status_2_516_ == NULL) {
    ecu_status_2_516_ = new ::jmc_auto::canbus::Ecu_status_2_516;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_2_516)
  return ecu_status_2_516_;
}
::jmc_auto::canbus::Ecu_status_2_516* Ch::release_ecu_status_2_516() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_2_516)
  clear_has_ecu_status_2_516();
  ::jmc_auto::canbus::Ecu_status_2_516* temp = ecu_status_2_516_;
  ecu_status_2_516_ = NULL;
  return temp;
}
void Ch::set_allocated_ecu_status_2_516(::jmc_auto::canbus::Ecu_status_2_516* ecu_status_2_516) {
  delete ecu_status_2_516_;
  ecu_status_2_516_ = ecu_status_2_516;
  if (ecu_status_2_516) {
    set_has_ecu_status_2_516();
  } else {
    clear_has_ecu_status_2_516();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_2_516)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
