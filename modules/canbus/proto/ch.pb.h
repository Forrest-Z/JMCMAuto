// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ch.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fch_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Brake_command_111;
class Brake_command_111DefaultTypeInternal;
extern Brake_command_111DefaultTypeInternal _Brake_command_111_default_instance_;
class Brake_status__511;
class Brake_status__511DefaultTypeInternal;
extern Brake_status__511DefaultTypeInternal _Brake_status__511_default_instance_;
class Ch;
class ChDefaultTypeInternal;
extern ChDefaultTypeInternal _Ch_default_instance_;
class Control_command_115;
class Control_command_115DefaultTypeInternal;
extern Control_command_115DefaultTypeInternal _Control_command_115_default_instance_;
class Ecu_status_1_515;
class Ecu_status_1_515DefaultTypeInternal;
extern Ecu_status_1_515DefaultTypeInternal _Ecu_status_1_515_default_instance_;
class Ecu_status_2_516;
class Ecu_status_2_516DefaultTypeInternal;
extern Ecu_status_2_516DefaultTypeInternal _Ecu_status_2_516_default_instance_;
class Ecu_status_3_517;
class Ecu_status_3_517DefaultTypeInternal;
extern Ecu_status_3_517DefaultTypeInternal _Ecu_status_3_517_default_instance_;
class Gear_command_114;
class Gear_command_114DefaultTypeInternal;
extern Gear_command_114DefaultTypeInternal _Gear_command_114_default_instance_;
class Gear_status_514;
class Gear_status_514DefaultTypeInternal;
extern Gear_status_514DefaultTypeInternal _Gear_status_514_default_instance_;
class Steer_command_112;
class Steer_command_112DefaultTypeInternal;
extern Steer_command_112DefaultTypeInternal _Steer_command_112_default_instance_;
class Steer_status__512;
class Steer_status__512DefaultTypeInternal;
extern Steer_status__512DefaultTypeInternal _Steer_status__512_default_instance_;
class Throttle_command_110;
class Throttle_command_110DefaultTypeInternal;
extern Throttle_command_110DefaultTypeInternal _Throttle_command_110_default_instance_;
class Throttle_status__510;
class Throttle_status__510DefaultTypeInternal;
extern Throttle_status__510DefaultTypeInternal _Throttle_status__510_default_instance_;
class Turnsignal_command_113;
class Turnsignal_command_113DefaultTypeInternal;
extern Turnsignal_command_113DefaultTypeInternal _Turnsignal_command_113_default_instance_;
class Turnsignal_status__513;
class Turnsignal_status__513DefaultTypeInternal;
extern Turnsignal_status__513DefaultTypeInternal _Turnsignal_status__513_default_instance_;
}  // namespace canbus
}  // namespace jmc_auto

namespace jmc_auto {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto

enum Control_command_115_Ctrl_cmdType {
  Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL = 0,
  Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL = 1
};
bool Control_command_115_Ctrl_cmdType_IsValid(int value);
const Control_command_115_Ctrl_cmdType Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MIN = Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL;
const Control_command_115_Ctrl_cmdType Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX = Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL;
const int Control_command_115_Ctrl_cmdType_Ctrl_cmdType_ARRAYSIZE = Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Control_command_115_Ctrl_cmdType_descriptor();
inline const ::std::string& Control_command_115_Ctrl_cmdType_Name(Control_command_115_Ctrl_cmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Control_command_115_Ctrl_cmdType_descriptor(), value);
}
inline bool Control_command_115_Ctrl_cmdType_Parse(
    const ::std::string& name, Control_command_115_Ctrl_cmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_command_115_Ctrl_cmdType>(
    Control_command_115_Ctrl_cmdType_descriptor(), name, value);
}
enum Gear_command_114_Gear_cmdType {
  Gear_command_114_Gear_cmdType_GEAR_CMD_PARK = 1,
  Gear_command_114_Gear_cmdType_GEAR_CMD_REVERSE = 2,
  Gear_command_114_Gear_cmdType_GEAR_CMD_NEUTRAL = 3,
  Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE = 4
};
bool Gear_command_114_Gear_cmdType_IsValid(int value);
const Gear_command_114_Gear_cmdType Gear_command_114_Gear_cmdType_Gear_cmdType_MIN = Gear_command_114_Gear_cmdType_GEAR_CMD_PARK;
const Gear_command_114_Gear_cmdType Gear_command_114_Gear_cmdType_Gear_cmdType_MAX = Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE;
const int Gear_command_114_Gear_cmdType_Gear_cmdType_ARRAYSIZE = Gear_command_114_Gear_cmdType_Gear_cmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gear_command_114_Gear_cmdType_descriptor();
inline const ::std::string& Gear_command_114_Gear_cmdType_Name(Gear_command_114_Gear_cmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gear_command_114_Gear_cmdType_descriptor(), value);
}
inline bool Gear_command_114_Gear_cmdType_Parse(
    const ::std::string& name, Gear_command_114_Gear_cmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gear_command_114_Gear_cmdType>(
    Gear_command_114_Gear_cmdType_descriptor(), name, value);
}
enum Brake_command_111_Brake_pedal_en_ctrlType {
  Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE = 0,
  Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE = 1
};
bool Brake_command_111_Brake_pedal_en_ctrlType_IsValid(int value);
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MIN = Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE;
const Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX = Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE;
const int Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_ARRAYSIZE = Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
inline const ::std::string& Brake_command_111_Brake_pedal_en_ctrlType_Name(Brake_command_111_Brake_pedal_en_ctrlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_command_111_Brake_pedal_en_ctrlType_descriptor(), value);
}
inline bool Brake_command_111_Brake_pedal_en_ctrlType_Parse(
    const ::std::string& name, Brake_command_111_Brake_pedal_en_ctrlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_command_111_Brake_pedal_en_ctrlType>(
    Brake_command_111_Brake_pedal_en_ctrlType_descriptor(), name, value);
}
enum Throttle_command_110_Throttle_pedal_en_ctrlType {
  Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE = 0,
  Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE = 1
};
bool Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(int value);
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MIN = Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE;
const Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX = Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE;
const int Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_ARRAYSIZE = Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
inline const ::std::string& Throttle_command_110_Throttle_pedal_en_ctrlType_Name(Throttle_command_110_Throttle_pedal_en_ctrlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor(), value);
}
inline bool Throttle_command_110_Throttle_pedal_en_ctrlType_Parse(
    const ::std::string& name, Throttle_command_110_Throttle_pedal_en_ctrlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Throttle_command_110_Throttle_pedal_en_ctrlType>(
    Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor(), name, value);
}
enum Turnsignal_command_113_Turn_signal_cmdType {
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE = 0,
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT = 1,
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT = 2
};
bool Turnsignal_command_113_Turn_signal_cmdType_IsValid(int value);
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MIN = Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE;
const Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX = Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
const int Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE = Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Turnsignal_command_113_Turn_signal_cmdType_descriptor();
inline const ::std::string& Turnsignal_command_113_Turn_signal_cmdType_Name(Turnsignal_command_113_Turn_signal_cmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Turnsignal_command_113_Turn_signal_cmdType_descriptor(), value);
}
inline bool Turnsignal_command_113_Turn_signal_cmdType_Parse(
    const ::std::string& name, Turnsignal_command_113_Turn_signal_cmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Turnsignal_command_113_Turn_signal_cmdType>(
    Turnsignal_command_113_Turn_signal_cmdType_descriptor(), name, value);
}
enum Steer_command_112_Steer_angle_en_ctrlType {
  Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE = 0,
  Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE = 1
};
bool Steer_command_112_Steer_angle_en_ctrlType_IsValid(int value);
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MIN = Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE;
const Steer_command_112_Steer_angle_en_ctrlType Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX = Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE;
const int Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_ARRAYSIZE = Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Steer_command_112_Steer_angle_en_ctrlType_descriptor();
inline const ::std::string& Steer_command_112_Steer_angle_en_ctrlType_Name(Steer_command_112_Steer_angle_en_ctrlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Steer_command_112_Steer_angle_en_ctrlType_descriptor(), value);
}
inline bool Steer_command_112_Steer_angle_en_ctrlType_Parse(
    const ::std::string& name, Steer_command_112_Steer_angle_en_ctrlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Steer_command_112_Steer_angle_en_ctrlType>(
    Steer_command_112_Steer_angle_en_ctrlType_descriptor(), name, value);
}
enum Brake_status__511_Brake_pedal_en_stsType {
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE = 0,
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_ENABLE = 1,
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER = 2
};
bool Brake_status__511_Brake_pedal_en_stsType_IsValid(int value);
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MIN = Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE;
const Brake_status__511_Brake_pedal_en_stsType Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX = Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER;
const int Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_ARRAYSIZE = Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Brake_pedal_en_stsType_descriptor();
inline const ::std::string& Brake_status__511_Brake_pedal_en_stsType_Name(Brake_status__511_Brake_pedal_en_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Brake_pedal_en_stsType_descriptor(), value);
}
inline bool Brake_status__511_Brake_pedal_en_stsType_Parse(
    const ::std::string& name, Brake_status__511_Brake_pedal_en_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Brake_pedal_en_stsType>(
    Brake_status__511_Brake_pedal_en_stsType_descriptor(), name, value);
}
enum Brake_status__511_Brake_errType {
  Brake_status__511_Brake_errType_BRAKE_ERR_NOERR = 0,
  Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR = 1
};
bool Brake_status__511_Brake_errType_IsValid(int value);
const Brake_status__511_Brake_errType Brake_status__511_Brake_errType_Brake_errType_MIN = Brake_status__511_Brake_errType_BRAKE_ERR_NOERR;
const Brake_status__511_Brake_errType Brake_status__511_Brake_errType_Brake_errType_MAX = Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR;
const int Brake_status__511_Brake_errType_Brake_errType_ARRAYSIZE = Brake_status__511_Brake_errType_Brake_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Brake_errType_descriptor();
inline const ::std::string& Brake_status__511_Brake_errType_Name(Brake_status__511_Brake_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Brake_errType_descriptor(), value);
}
inline bool Brake_status__511_Brake_errType_Parse(
    const ::std::string& name, Brake_status__511_Brake_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Brake_errType>(
    Brake_status__511_Brake_errType_descriptor(), name, value);
}
enum Brake_status__511_Emergency_btn_envType {
  Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV = 0,
  Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV = 1
};
bool Brake_status__511_Emergency_btn_envType_IsValid(int value);
const Brake_status__511_Emergency_btn_envType Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MIN = Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV;
const Brake_status__511_Emergency_btn_envType Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX = Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
const int Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_ARRAYSIZE = Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Emergency_btn_envType_descriptor();
inline const ::std::string& Brake_status__511_Emergency_btn_envType_Name(Brake_status__511_Emergency_btn_envType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Emergency_btn_envType_descriptor(), value);
}
inline bool Brake_status__511_Emergency_btn_envType_Parse(
    const ::std::string& name, Brake_status__511_Emergency_btn_envType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Emergency_btn_envType>(
    Brake_status__511_Emergency_btn_envType_descriptor(), name, value);
}
enum Brake_status__511_Front_bump_envType {
  Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV = 0,
  Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV = 1
};
bool Brake_status__511_Front_bump_envType_IsValid(int value);
const Brake_status__511_Front_bump_envType Brake_status__511_Front_bump_envType_Front_bump_envType_MIN = Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV;
const Brake_status__511_Front_bump_envType Brake_status__511_Front_bump_envType_Front_bump_envType_MAX = Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
const int Brake_status__511_Front_bump_envType_Front_bump_envType_ARRAYSIZE = Brake_status__511_Front_bump_envType_Front_bump_envType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Front_bump_envType_descriptor();
inline const ::std::string& Brake_status__511_Front_bump_envType_Name(Brake_status__511_Front_bump_envType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Front_bump_envType_descriptor(), value);
}
inline bool Brake_status__511_Front_bump_envType_Parse(
    const ::std::string& name, Brake_status__511_Front_bump_envType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Front_bump_envType>(
    Brake_status__511_Front_bump_envType_descriptor(), name, value);
}
enum Brake_status__511_Back_bump_envType {
  Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV = 0,
  Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV = 1
};
bool Brake_status__511_Back_bump_envType_IsValid(int value);
const Brake_status__511_Back_bump_envType Brake_status__511_Back_bump_envType_Back_bump_envType_MIN = Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV;
const Brake_status__511_Back_bump_envType Brake_status__511_Back_bump_envType_Back_bump_envType_MAX = Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV;
const int Brake_status__511_Back_bump_envType_Back_bump_envType_ARRAYSIZE = Brake_status__511_Back_bump_envType_Back_bump_envType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Back_bump_envType_descriptor();
inline const ::std::string& Brake_status__511_Back_bump_envType_Name(Brake_status__511_Back_bump_envType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Back_bump_envType_descriptor(), value);
}
inline bool Brake_status__511_Back_bump_envType_Parse(
    const ::std::string& name, Brake_status__511_Back_bump_envType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Back_bump_envType>(
    Brake_status__511_Back_bump_envType_descriptor(), name, value);
}
enum Brake_status__511_Overspd_envType {
  Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV = 0,
  Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV = 1
};
bool Brake_status__511_Overspd_envType_IsValid(int value);
const Brake_status__511_Overspd_envType Brake_status__511_Overspd_envType_Overspd_envType_MIN = Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV;
const Brake_status__511_Overspd_envType Brake_status__511_Overspd_envType_Overspd_envType_MAX = Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV;
const int Brake_status__511_Overspd_envType_Overspd_envType_ARRAYSIZE = Brake_status__511_Overspd_envType_Overspd_envType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Brake_status__511_Overspd_envType_descriptor();
inline const ::std::string& Brake_status__511_Overspd_envType_Name(Brake_status__511_Overspd_envType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Brake_status__511_Overspd_envType_descriptor(), value);
}
inline bool Brake_status__511_Overspd_envType_Parse(
    const ::std::string& name, Brake_status__511_Overspd_envType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Brake_status__511_Overspd_envType>(
    Brake_status__511_Overspd_envType_descriptor(), name, value);
}
enum Throttle_status__510_Throttle_pedal_en_stsType {
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE = 0,
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_ENABLE = 1,
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER = 2
};
bool Throttle_status__510_Throttle_pedal_en_stsType_IsValid(int value);
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MIN = Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE;
const Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX = Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER;
const int Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_ARRAYSIZE = Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
inline const ::std::string& Throttle_status__510_Throttle_pedal_en_stsType_Name(Throttle_status__510_Throttle_pedal_en_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Throttle_status__510_Throttle_pedal_en_stsType_descriptor(), value);
}
inline bool Throttle_status__510_Throttle_pedal_en_stsType_Parse(
    const ::std::string& name, Throttle_status__510_Throttle_pedal_en_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Throttle_status__510_Throttle_pedal_en_stsType>(
    Throttle_status__510_Throttle_pedal_en_stsType_descriptor(), name, value);
}
enum Throttle_status__510_Drive_motor_errType {
  Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR = 0,
  Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR = 1
};
bool Throttle_status__510_Drive_motor_errType_IsValid(int value);
const Throttle_status__510_Drive_motor_errType Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MIN = Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR;
const Throttle_status__510_Drive_motor_errType Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX = Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
const int Throttle_status__510_Drive_motor_errType_Drive_motor_errType_ARRAYSIZE = Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Throttle_status__510_Drive_motor_errType_descriptor();
inline const ::std::string& Throttle_status__510_Drive_motor_errType_Name(Throttle_status__510_Drive_motor_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Throttle_status__510_Drive_motor_errType_descriptor(), value);
}
inline bool Throttle_status__510_Drive_motor_errType_Parse(
    const ::std::string& name, Throttle_status__510_Drive_motor_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Throttle_status__510_Drive_motor_errType>(
    Throttle_status__510_Drive_motor_errType_descriptor(), name, value);
}
enum Throttle_status__510_Battery_bms_errType {
  Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR = 0,
  Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR = 1
};
bool Throttle_status__510_Battery_bms_errType_IsValid(int value);
const Throttle_status__510_Battery_bms_errType Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MIN = Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR;
const Throttle_status__510_Battery_bms_errType Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX = Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR;
const int Throttle_status__510_Battery_bms_errType_Battery_bms_errType_ARRAYSIZE = Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Throttle_status__510_Battery_bms_errType_descriptor();
inline const ::std::string& Throttle_status__510_Battery_bms_errType_Name(Throttle_status__510_Battery_bms_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Throttle_status__510_Battery_bms_errType_descriptor(), value);
}
inline bool Throttle_status__510_Battery_bms_errType_Parse(
    const ::std::string& name, Throttle_status__510_Battery_bms_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Throttle_status__510_Battery_bms_errType>(
    Throttle_status__510_Battery_bms_errType_descriptor(), name, value);
}
enum Turnsignal_status__513_Turn_signal_stsType {
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE = 0,
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_LEFT = 1,
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT = 2
};
bool Turnsignal_status__513_Turn_signal_stsType_IsValid(int value);
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MIN = Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE;
const Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX = Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT;
const int Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_ARRAYSIZE = Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Turnsignal_status__513_Turn_signal_stsType_descriptor();
inline const ::std::string& Turnsignal_status__513_Turn_signal_stsType_Name(Turnsignal_status__513_Turn_signal_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Turnsignal_status__513_Turn_signal_stsType_descriptor(), value);
}
inline bool Turnsignal_status__513_Turn_signal_stsType_Parse(
    const ::std::string& name, Turnsignal_status__513_Turn_signal_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Turnsignal_status__513_Turn_signal_stsType>(
    Turnsignal_status__513_Turn_signal_stsType_descriptor(), name, value);
}
enum Steer_status__512_Steer_angle_en_stsType {
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE = 0,
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_ENABLE = 1,
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER = 2
};
bool Steer_status__512_Steer_angle_en_stsType_IsValid(int value);
const Steer_status__512_Steer_angle_en_stsType Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MIN = Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE;
const Steer_status__512_Steer_angle_en_stsType Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX = Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER;
const int Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_ARRAYSIZE = Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Steer_status__512_Steer_angle_en_stsType_descriptor();
inline const ::std::string& Steer_status__512_Steer_angle_en_stsType_Name(Steer_status__512_Steer_angle_en_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Steer_status__512_Steer_angle_en_stsType_descriptor(), value);
}
inline bool Steer_status__512_Steer_angle_en_stsType_Parse(
    const ::std::string& name, Steer_status__512_Steer_angle_en_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Steer_status__512_Steer_angle_en_stsType>(
    Steer_status__512_Steer_angle_en_stsType_descriptor(), name, value);
}
enum Steer_status__512_Steer_errType {
  Steer_status__512_Steer_errType_STEER_ERR_NOERR = 0,
  Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR = 1
};
bool Steer_status__512_Steer_errType_IsValid(int value);
const Steer_status__512_Steer_errType Steer_status__512_Steer_errType_Steer_errType_MIN = Steer_status__512_Steer_errType_STEER_ERR_NOERR;
const Steer_status__512_Steer_errType Steer_status__512_Steer_errType_Steer_errType_MAX = Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR;
const int Steer_status__512_Steer_errType_Steer_errType_ARRAYSIZE = Steer_status__512_Steer_errType_Steer_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Steer_status__512_Steer_errType_descriptor();
inline const ::std::string& Steer_status__512_Steer_errType_Name(Steer_status__512_Steer_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Steer_status__512_Steer_errType_descriptor(), value);
}
inline bool Steer_status__512_Steer_errType_Parse(
    const ::std::string& name, Steer_status__512_Steer_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Steer_status__512_Steer_errType>(
    Steer_status__512_Steer_errType_descriptor(), name, value);
}
enum Steer_status__512_Sensor_errType {
  Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR = 0,
  Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR = 1
};
bool Steer_status__512_Sensor_errType_IsValid(int value);
const Steer_status__512_Sensor_errType Steer_status__512_Sensor_errType_Sensor_errType_MIN = Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR;
const Steer_status__512_Sensor_errType Steer_status__512_Sensor_errType_Sensor_errType_MAX = Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR;
const int Steer_status__512_Sensor_errType_Sensor_errType_ARRAYSIZE = Steer_status__512_Sensor_errType_Sensor_errType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Steer_status__512_Sensor_errType_descriptor();
inline const ::std::string& Steer_status__512_Sensor_errType_Name(Steer_status__512_Sensor_errType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Steer_status__512_Sensor_errType_descriptor(), value);
}
inline bool Steer_status__512_Sensor_errType_Parse(
    const ::std::string& name, Steer_status__512_Sensor_errType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Steer_status__512_Sensor_errType>(
    Steer_status__512_Sensor_errType_descriptor(), name, value);
}
enum Ecu_status_1_515_Ctrl_stsType {
  Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL = 0,
  Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL = 1
};
bool Ecu_status_1_515_Ctrl_stsType_IsValid(int value);
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MIN = Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL;
const Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX = Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL;
const int Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_ARRAYSIZE = Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ecu_status_1_515_Ctrl_stsType_descriptor();
inline const ::std::string& Ecu_status_1_515_Ctrl_stsType_Name(Ecu_status_1_515_Ctrl_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ecu_status_1_515_Ctrl_stsType_descriptor(), value);
}
inline bool Ecu_status_1_515_Ctrl_stsType_Parse(
    const ::std::string& name, Ecu_status_1_515_Ctrl_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ecu_status_1_515_Ctrl_stsType>(
    Ecu_status_1_515_Ctrl_stsType_descriptor(), name, value);
}
enum Gear_status_514_Gear_stsType {
  Gear_status_514_Gear_stsType_GEAR_STS_PARK = 1,
  Gear_status_514_Gear_stsType_GEAR_STS_REVERSE = 2,
  Gear_status_514_Gear_stsType_GEAR_STS_NEUTRAL = 3,
  Gear_status_514_Gear_stsType_GEAR_STS_DRIVE = 4
};
bool Gear_status_514_Gear_stsType_IsValid(int value);
const Gear_status_514_Gear_stsType Gear_status_514_Gear_stsType_Gear_stsType_MIN = Gear_status_514_Gear_stsType_GEAR_STS_PARK;
const Gear_status_514_Gear_stsType Gear_status_514_Gear_stsType_Gear_stsType_MAX = Gear_status_514_Gear_stsType_GEAR_STS_DRIVE;
const int Gear_status_514_Gear_stsType_Gear_stsType_ARRAYSIZE = Gear_status_514_Gear_stsType_Gear_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gear_status_514_Gear_stsType_descriptor();
inline const ::std::string& Gear_status_514_Gear_stsType_Name(Gear_status_514_Gear_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gear_status_514_Gear_stsType_descriptor(), value);
}
inline bool Gear_status_514_Gear_stsType_Parse(
    const ::std::string& name, Gear_status_514_Gear_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gear_status_514_Gear_stsType>(
    Gear_status_514_Gear_stsType_descriptor(), name, value);
}
// ===================================================================

class Control_command_115 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Control_command_115) */ {
 public:
  Control_command_115();
  virtual ~Control_command_115();

  Control_command_115(const Control_command_115& from);

  inline Control_command_115& operator=(const Control_command_115& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control_command_115& default_instance();

  static inline const Control_command_115* internal_default_instance() {
    return reinterpret_cast<const Control_command_115*>(
               &_Control_command_115_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Control_command_115* other);

  // implements Message ----------------------------------------------

  inline Control_command_115* New() const PROTOBUF_FINAL { return New(NULL); }

  Control_command_115* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Control_command_115& from);
  void MergeFrom(const Control_command_115& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Control_command_115* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Control_command_115_Ctrl_cmdType Ctrl_cmdType;
  static const Ctrl_cmdType CTRL_CMD_OUT_OF_CONTROL =
    Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL;
  static const Ctrl_cmdType CTRL_CMD_UNDER_CONTROL =
    Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL;
  static inline bool Ctrl_cmdType_IsValid(int value) {
    return Control_command_115_Ctrl_cmdType_IsValid(value);
  }
  static const Ctrl_cmdType Ctrl_cmdType_MIN =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MIN;
  static const Ctrl_cmdType Ctrl_cmdType_MAX =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX;
  static const int Ctrl_cmdType_ARRAYSIZE =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ctrl_cmdType_descriptor() {
    return Control_command_115_Ctrl_cmdType_descriptor();
  }
  static inline const ::std::string& Ctrl_cmdType_Name(Ctrl_cmdType value) {
    return Control_command_115_Ctrl_cmdType_Name(value);
  }
  static inline bool Ctrl_cmdType_Parse(const ::std::string& name,
      Ctrl_cmdType* value) {
    return Control_command_115_Ctrl_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  bool has_ctrl_cmd() const;
  void clear_ctrl_cmd();
  static const int kCtrlCmdFieldNumber = 1;
  ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType ctrl_cmd() const;
  void set_ctrl_cmd(::jmc_auto::canbus::Control_command_115_Ctrl_cmdType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Control_command_115)
 private:
  void set_has_ctrl_cmd();
  void clear_has_ctrl_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int ctrl_cmd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gear_command_114 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gear_command_114) */ {
 public:
  Gear_command_114();
  virtual ~Gear_command_114();

  Gear_command_114(const Gear_command_114& from);

  inline Gear_command_114& operator=(const Gear_command_114& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gear_command_114& default_instance();

  static inline const Gear_command_114* internal_default_instance() {
    return reinterpret_cast<const Gear_command_114*>(
               &_Gear_command_114_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Gear_command_114* other);

  // implements Message ----------------------------------------------

  inline Gear_command_114* New() const PROTOBUF_FINAL { return New(NULL); }

  Gear_command_114* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gear_command_114& from);
  void MergeFrom(const Gear_command_114& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gear_command_114* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gear_command_114_Gear_cmdType Gear_cmdType;
  static const Gear_cmdType GEAR_CMD_PARK =
    Gear_command_114_Gear_cmdType_GEAR_CMD_PARK;
  static const Gear_cmdType GEAR_CMD_REVERSE =
    Gear_command_114_Gear_cmdType_GEAR_CMD_REVERSE;
  static const Gear_cmdType GEAR_CMD_NEUTRAL =
    Gear_command_114_Gear_cmdType_GEAR_CMD_NEUTRAL;
  static const Gear_cmdType GEAR_CMD_DRIVE =
    Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE;
  static inline bool Gear_cmdType_IsValid(int value) {
    return Gear_command_114_Gear_cmdType_IsValid(value);
  }
  static const Gear_cmdType Gear_cmdType_MIN =
    Gear_command_114_Gear_cmdType_Gear_cmdType_MIN;
  static const Gear_cmdType Gear_cmdType_MAX =
    Gear_command_114_Gear_cmdType_Gear_cmdType_MAX;
  static const int Gear_cmdType_ARRAYSIZE =
    Gear_command_114_Gear_cmdType_Gear_cmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gear_cmdType_descriptor() {
    return Gear_command_114_Gear_cmdType_descriptor();
  }
  static inline const ::std::string& Gear_cmdType_Name(Gear_cmdType value) {
    return Gear_command_114_Gear_cmdType_Name(value);
  }
  static inline bool Gear_cmdType_Parse(const ::std::string& name,
      Gear_cmdType* value) {
    return Gear_command_114_Gear_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  bool has_gear_cmd() const;
  void clear_gear_cmd();
  static const int kGearCmdFieldNumber = 1;
  ::jmc_auto::canbus::Gear_command_114_Gear_cmdType gear_cmd() const;
  void set_gear_cmd(::jmc_auto::canbus::Gear_command_114_Gear_cmdType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gear_command_114)
 private:
  void set_has_gear_cmd();
  void clear_has_gear_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int gear_cmd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Brake_command_111 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Brake_command_111) */ {
 public:
  Brake_command_111();
  virtual ~Brake_command_111();

  Brake_command_111(const Brake_command_111& from);

  inline Brake_command_111& operator=(const Brake_command_111& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brake_command_111& default_instance();

  static inline const Brake_command_111* internal_default_instance() {
    return reinterpret_cast<const Brake_command_111*>(
               &_Brake_command_111_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Brake_command_111* other);

  // implements Message ----------------------------------------------

  inline Brake_command_111* New() const PROTOBUF_FINAL { return New(NULL); }

  Brake_command_111* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Brake_command_111& from);
  void MergeFrom(const Brake_command_111& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Brake_command_111* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Brake_command_111_Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType;
  static const Brake_pedal_en_ctrlType BRAKE_PEDAL_EN_CTRL_DISABLE =
    Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE;
  static const Brake_pedal_en_ctrlType BRAKE_PEDAL_EN_CTRL_ENABLE =
    Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE;
  static inline bool Brake_pedal_en_ctrlType_IsValid(int value) {
    return Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value);
  }
  static const Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType_MIN =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MIN;
  static const Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType_MAX =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX;
  static const int Brake_pedal_en_ctrlType_ARRAYSIZE =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Brake_pedal_en_ctrlType_descriptor() {
    return Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
  }
  static inline const ::std::string& Brake_pedal_en_ctrlType_Name(Brake_pedal_en_ctrlType value) {
    return Brake_command_111_Brake_pedal_en_ctrlType_Name(value);
  }
  static inline bool Brake_pedal_en_ctrlType_Parse(const ::std::string& name,
      Brake_pedal_en_ctrlType* value) {
    return Brake_command_111_Brake_pedal_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  bool has_brake_pedal_en_ctrl() const;
  void clear_brake_pedal_en_ctrl();
  static const int kBrakePedalEnCtrlFieldNumber = 1;
  ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType brake_pedal_en_ctrl() const;
  void set_brake_pedal_en_ctrl(::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType value);

  // optional int32 brake_pedal_cmd = 2;
  bool has_brake_pedal_cmd() const;
  void clear_brake_pedal_cmd();
  static const int kBrakePedalCmdFieldNumber = 2;
  ::google::protobuf::int32 brake_pedal_cmd() const;
  void set_brake_pedal_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Brake_command_111)
 private:
  void set_has_brake_pedal_en_ctrl();
  void clear_has_brake_pedal_en_ctrl();
  void set_has_brake_pedal_cmd();
  void clear_has_brake_pedal_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int brake_pedal_en_ctrl_;
  ::google::protobuf::int32 brake_pedal_cmd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Throttle_command_110 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Throttle_command_110) */ {
 public:
  Throttle_command_110();
  virtual ~Throttle_command_110();

  Throttle_command_110(const Throttle_command_110& from);

  inline Throttle_command_110& operator=(const Throttle_command_110& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Throttle_command_110& default_instance();

  static inline const Throttle_command_110* internal_default_instance() {
    return reinterpret_cast<const Throttle_command_110*>(
               &_Throttle_command_110_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Throttle_command_110* other);

  // implements Message ----------------------------------------------

  inline Throttle_command_110* New() const PROTOBUF_FINAL { return New(NULL); }

  Throttle_command_110* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Throttle_command_110& from);
  void MergeFrom(const Throttle_command_110& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Throttle_command_110* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType;
  static const Throttle_pedal_en_ctrlType THROTTLE_PEDAL_EN_CTRL_DISABLE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE;
  static const Throttle_pedal_en_ctrlType THROTTLE_PEDAL_EN_CTRL_ENABLE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE;
  static inline bool Throttle_pedal_en_ctrlType_IsValid(int value) {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value);
  }
  static const Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType_MIN =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MIN;
  static const Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType_MAX =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX;
  static const int Throttle_pedal_en_ctrlType_ARRAYSIZE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Throttle_pedal_en_ctrlType_descriptor() {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
  }
  static inline const ::std::string& Throttle_pedal_en_ctrlType_Name(Throttle_pedal_en_ctrlType value) {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_Name(value);
  }
  static inline bool Throttle_pedal_en_ctrlType_Parse(const ::std::string& name,
      Throttle_pedal_en_ctrlType* value) {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  bool has_throttle_pedal_en_ctrl() const;
  void clear_throttle_pedal_en_ctrl();
  static const int kThrottlePedalEnCtrlFieldNumber = 1;
  ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl() const;
  void set_throttle_pedal_en_ctrl(::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value);

  // optional int32 throttle_pedal_cmd = 2;
  bool has_throttle_pedal_cmd() const;
  void clear_throttle_pedal_cmd();
  static const int kThrottlePedalCmdFieldNumber = 2;
  ::google::protobuf::int32 throttle_pedal_cmd() const;
  void set_throttle_pedal_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Throttle_command_110)
 private:
  void set_has_throttle_pedal_en_ctrl();
  void clear_has_throttle_pedal_en_ctrl();
  void set_has_throttle_pedal_cmd();
  void clear_has_throttle_pedal_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int throttle_pedal_en_ctrl_;
  ::google::protobuf::int32 throttle_pedal_cmd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Turnsignal_command_113 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Turnsignal_command_113) */ {
 public:
  Turnsignal_command_113();
  virtual ~Turnsignal_command_113();

  Turnsignal_command_113(const Turnsignal_command_113& from);

  inline Turnsignal_command_113& operator=(const Turnsignal_command_113& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Turnsignal_command_113& default_instance();

  static inline const Turnsignal_command_113* internal_default_instance() {
    return reinterpret_cast<const Turnsignal_command_113*>(
               &_Turnsignal_command_113_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Turnsignal_command_113* other);

  // implements Message ----------------------------------------------

  inline Turnsignal_command_113* New() const PROTOBUF_FINAL { return New(NULL); }

  Turnsignal_command_113* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Turnsignal_command_113& from);
  void MergeFrom(const Turnsignal_command_113& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Turnsignal_command_113* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Turnsignal_command_113_Turn_signal_cmdType Turn_signal_cmdType;
  static const Turn_signal_cmdType TURN_SIGNAL_CMD_NONE =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE;
  static const Turn_signal_cmdType TURN_SIGNAL_CMD_LEFT =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT;
  static const Turn_signal_cmdType TURN_SIGNAL_CMD_RIGHT =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
  static inline bool Turn_signal_cmdType_IsValid(int value) {
    return Turnsignal_command_113_Turn_signal_cmdType_IsValid(value);
  }
  static const Turn_signal_cmdType Turn_signal_cmdType_MIN =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MIN;
  static const Turn_signal_cmdType Turn_signal_cmdType_MAX =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX;
  static const int Turn_signal_cmdType_ARRAYSIZE =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Turn_signal_cmdType_descriptor() {
    return Turnsignal_command_113_Turn_signal_cmdType_descriptor();
  }
  static inline const ::std::string& Turn_signal_cmdType_Name(Turn_signal_cmdType value) {
    return Turnsignal_command_113_Turn_signal_cmdType_Name(value);
  }
  static inline bool Turn_signal_cmdType_Parse(const ::std::string& name,
      Turn_signal_cmdType* value) {
    return Turnsignal_command_113_Turn_signal_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  bool has_turn_signal_cmd() const;
  void clear_turn_signal_cmd();
  static const int kTurnSignalCmdFieldNumber = 1;
  ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType turn_signal_cmd() const;
  void set_turn_signal_cmd(::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Turnsignal_command_113)
 private:
  void set_has_turn_signal_cmd();
  void clear_has_turn_signal_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int turn_signal_cmd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Steer_command_112 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Steer_command_112) */ {
 public:
  Steer_command_112();
  virtual ~Steer_command_112();

  Steer_command_112(const Steer_command_112& from);

  inline Steer_command_112& operator=(const Steer_command_112& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Steer_command_112& default_instance();

  static inline const Steer_command_112* internal_default_instance() {
    return reinterpret_cast<const Steer_command_112*>(
               &_Steer_command_112_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Steer_command_112* other);

  // implements Message ----------------------------------------------

  inline Steer_command_112* New() const PROTOBUF_FINAL { return New(NULL); }

  Steer_command_112* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Steer_command_112& from);
  void MergeFrom(const Steer_command_112& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Steer_command_112* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Steer_command_112_Steer_angle_en_ctrlType Steer_angle_en_ctrlType;
  static const Steer_angle_en_ctrlType STEER_ANGLE_EN_CTRL_DISABLE =
    Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE;
  static const Steer_angle_en_ctrlType STEER_ANGLE_EN_CTRL_ENABLE =
    Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE;
  static inline bool Steer_angle_en_ctrlType_IsValid(int value) {
    return Steer_command_112_Steer_angle_en_ctrlType_IsValid(value);
  }
  static const Steer_angle_en_ctrlType Steer_angle_en_ctrlType_MIN =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MIN;
  static const Steer_angle_en_ctrlType Steer_angle_en_ctrlType_MAX =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX;
  static const int Steer_angle_en_ctrlType_ARRAYSIZE =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Steer_angle_en_ctrlType_descriptor() {
    return Steer_command_112_Steer_angle_en_ctrlType_descriptor();
  }
  static inline const ::std::string& Steer_angle_en_ctrlType_Name(Steer_angle_en_ctrlType value) {
    return Steer_command_112_Steer_angle_en_ctrlType_Name(value);
  }
  static inline bool Steer_angle_en_ctrlType_Parse(const ::std::string& name,
      Steer_angle_en_ctrlType* value) {
    return Steer_command_112_Steer_angle_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double steer_angle_cmd = 2;
  bool has_steer_angle_cmd() const;
  void clear_steer_angle_cmd();
  static const int kSteerAngleCmdFieldNumber = 2;
  double steer_angle_cmd() const;
  void set_steer_angle_cmd(double value);

  // optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  bool has_steer_angle_en_ctrl() const;
  void clear_steer_angle_en_ctrl();
  static const int kSteerAngleEnCtrlFieldNumber = 1;
  ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType steer_angle_en_ctrl() const;
  void set_steer_angle_en_ctrl(::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Steer_command_112)
 private:
  void set_has_steer_angle_en_ctrl();
  void clear_has_steer_angle_en_ctrl();
  void set_has_steer_angle_cmd();
  void clear_has_steer_angle_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double steer_angle_cmd_;
  int steer_angle_en_ctrl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Brake_status__511 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Brake_status__511) */ {
 public:
  Brake_status__511();
  virtual ~Brake_status__511();

  Brake_status__511(const Brake_status__511& from);

  inline Brake_status__511& operator=(const Brake_status__511& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brake_status__511& default_instance();

  static inline const Brake_status__511* internal_default_instance() {
    return reinterpret_cast<const Brake_status__511*>(
               &_Brake_status__511_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Brake_status__511* other);

  // implements Message ----------------------------------------------

  inline Brake_status__511* New() const PROTOBUF_FINAL { return New(NULL); }

  Brake_status__511* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Brake_status__511& from);
  void MergeFrom(const Brake_status__511& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Brake_status__511* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Brake_status__511_Brake_pedal_en_stsType Brake_pedal_en_stsType;
  static const Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_DISABLE =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE;
  static const Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_ENABLE =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_ENABLE;
  static const Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_TAKEOVER =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER;
  static inline bool Brake_pedal_en_stsType_IsValid(int value) {
    return Brake_status__511_Brake_pedal_en_stsType_IsValid(value);
  }
  static const Brake_pedal_en_stsType Brake_pedal_en_stsType_MIN =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MIN;
  static const Brake_pedal_en_stsType Brake_pedal_en_stsType_MAX =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX;
  static const int Brake_pedal_en_stsType_ARRAYSIZE =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Brake_pedal_en_stsType_descriptor() {
    return Brake_status__511_Brake_pedal_en_stsType_descriptor();
  }
  static inline const ::std::string& Brake_pedal_en_stsType_Name(Brake_pedal_en_stsType value) {
    return Brake_status__511_Brake_pedal_en_stsType_Name(value);
  }
  static inline bool Brake_pedal_en_stsType_Parse(const ::std::string& name,
      Brake_pedal_en_stsType* value) {
    return Brake_status__511_Brake_pedal_en_stsType_Parse(name, value);
  }

  typedef Brake_status__511_Brake_errType Brake_errType;
  static const Brake_errType BRAKE_ERR_NOERR =
    Brake_status__511_Brake_errType_BRAKE_ERR_NOERR;
  static const Brake_errType BRAKE_ERR_BRAKE_SYSTEM_ERR =
    Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR;
  static inline bool Brake_errType_IsValid(int value) {
    return Brake_status__511_Brake_errType_IsValid(value);
  }
  static const Brake_errType Brake_errType_MIN =
    Brake_status__511_Brake_errType_Brake_errType_MIN;
  static const Brake_errType Brake_errType_MAX =
    Brake_status__511_Brake_errType_Brake_errType_MAX;
  static const int Brake_errType_ARRAYSIZE =
    Brake_status__511_Brake_errType_Brake_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Brake_errType_descriptor() {
    return Brake_status__511_Brake_errType_descriptor();
  }
  static inline const ::std::string& Brake_errType_Name(Brake_errType value) {
    return Brake_status__511_Brake_errType_Name(value);
  }
  static inline bool Brake_errType_Parse(const ::std::string& name,
      Brake_errType* value) {
    return Brake_status__511_Brake_errType_Parse(name, value);
  }

  typedef Brake_status__511_Emergency_btn_envType Emergency_btn_envType;
  static const Emergency_btn_envType EMERGENCY_BTN_ENV_NOENV =
    Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV;
  static const Emergency_btn_envType EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV =
    Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
  static inline bool Emergency_btn_envType_IsValid(int value) {
    return Brake_status__511_Emergency_btn_envType_IsValid(value);
  }
  static const Emergency_btn_envType Emergency_btn_envType_MIN =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MIN;
  static const Emergency_btn_envType Emergency_btn_envType_MAX =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX;
  static const int Emergency_btn_envType_ARRAYSIZE =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Emergency_btn_envType_descriptor() {
    return Brake_status__511_Emergency_btn_envType_descriptor();
  }
  static inline const ::std::string& Emergency_btn_envType_Name(Emergency_btn_envType value) {
    return Brake_status__511_Emergency_btn_envType_Name(value);
  }
  static inline bool Emergency_btn_envType_Parse(const ::std::string& name,
      Emergency_btn_envType* value) {
    return Brake_status__511_Emergency_btn_envType_Parse(name, value);
  }

  typedef Brake_status__511_Front_bump_envType Front_bump_envType;
  static const Front_bump_envType FRONT_BUMP_ENV_NOENV =
    Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV;
  static const Front_bump_envType FRONT_BUMP_ENV_FRONT_BUMPER_ENV =
    Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
  static inline bool Front_bump_envType_IsValid(int value) {
    return Brake_status__511_Front_bump_envType_IsValid(value);
  }
  static const Front_bump_envType Front_bump_envType_MIN =
    Brake_status__511_Front_bump_envType_Front_bump_envType_MIN;
  static const Front_bump_envType Front_bump_envType_MAX =
    Brake_status__511_Front_bump_envType_Front_bump_envType_MAX;
  static const int Front_bump_envType_ARRAYSIZE =
    Brake_status__511_Front_bump_envType_Front_bump_envType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Front_bump_envType_descriptor() {
    return Brake_status__511_Front_bump_envType_descriptor();
  }
  static inline const ::std::string& Front_bump_envType_Name(Front_bump_envType value) {
    return Brake_status__511_Front_bump_envType_Name(value);
  }
  static inline bool Front_bump_envType_Parse(const ::std::string& name,
      Front_bump_envType* value) {
    return Brake_status__511_Front_bump_envType_Parse(name, value);
  }

  typedef Brake_status__511_Back_bump_envType Back_bump_envType;
  static const Back_bump_envType BACK_BUMP_ENV_NOENV =
    Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV;
  static const Back_bump_envType BACK_BUMP_ENV_BACK_BUMPER_ENV =
    Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV;
  static inline bool Back_bump_envType_IsValid(int value) {
    return Brake_status__511_Back_bump_envType_IsValid(value);
  }
  static const Back_bump_envType Back_bump_envType_MIN =
    Brake_status__511_Back_bump_envType_Back_bump_envType_MIN;
  static const Back_bump_envType Back_bump_envType_MAX =
    Brake_status__511_Back_bump_envType_Back_bump_envType_MAX;
  static const int Back_bump_envType_ARRAYSIZE =
    Brake_status__511_Back_bump_envType_Back_bump_envType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Back_bump_envType_descriptor() {
    return Brake_status__511_Back_bump_envType_descriptor();
  }
  static inline const ::std::string& Back_bump_envType_Name(Back_bump_envType value) {
    return Brake_status__511_Back_bump_envType_Name(value);
  }
  static inline bool Back_bump_envType_Parse(const ::std::string& name,
      Back_bump_envType* value) {
    return Brake_status__511_Back_bump_envType_Parse(name, value);
  }

  typedef Brake_status__511_Overspd_envType Overspd_envType;
  static const Overspd_envType OVERSPD_ENV_NOENV =
    Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV;
  static const Overspd_envType OVERSPD_ENV_OVERSPEED_ENV =
    Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV;
  static inline bool Overspd_envType_IsValid(int value) {
    return Brake_status__511_Overspd_envType_IsValid(value);
  }
  static const Overspd_envType Overspd_envType_MIN =
    Brake_status__511_Overspd_envType_Overspd_envType_MIN;
  static const Overspd_envType Overspd_envType_MAX =
    Brake_status__511_Overspd_envType_Overspd_envType_MAX;
  static const int Overspd_envType_ARRAYSIZE =
    Brake_status__511_Overspd_envType_Overspd_envType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Overspd_envType_descriptor() {
    return Brake_status__511_Overspd_envType_descriptor();
  }
  static inline const ::std::string& Overspd_envType_Name(Overspd_envType value) {
    return Brake_status__511_Overspd_envType_Name(value);
  }
  static inline bool Overspd_envType_Parse(const ::std::string& name,
      Overspd_envType* value) {
    return Brake_status__511_Overspd_envType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  bool has_brake_pedal_en_sts() const;
  void clear_brake_pedal_en_sts();
  static const int kBrakePedalEnStsFieldNumber = 1;
  ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType brake_pedal_en_sts() const;
  void set_brake_pedal_en_sts(::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType value);

  // optional int32 brake_pedal_sts = 2;
  bool has_brake_pedal_sts() const;
  void clear_brake_pedal_sts();
  static const int kBrakePedalStsFieldNumber = 2;
  ::google::protobuf::int32 brake_pedal_sts() const;
  void set_brake_pedal_sts(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
  bool has_brake_err() const;
  void clear_brake_err();
  static const int kBrakeErrFieldNumber = 3;
  ::jmc_auto::canbus::Brake_status__511_Brake_errType brake_err() const;
  void set_brake_err(::jmc_auto::canbus::Brake_status__511_Brake_errType value);

  // optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
  bool has_emergency_btn_env() const;
  void clear_emergency_btn_env();
  static const int kEmergencyBtnEnvFieldNumber = 4;
  ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType emergency_btn_env() const;
  void set_emergency_btn_env(::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType value);

  // optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
  bool has_front_bump_env() const;
  void clear_front_bump_env();
  static const int kFrontBumpEnvFieldNumber = 5;
  ::jmc_auto::canbus::Brake_status__511_Front_bump_envType front_bump_env() const;
  void set_front_bump_env(::jmc_auto::canbus::Brake_status__511_Front_bump_envType value);

  // optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
  bool has_back_bump_env() const;
  void clear_back_bump_env();
  static const int kBackBumpEnvFieldNumber = 6;
  ::jmc_auto::canbus::Brake_status__511_Back_bump_envType back_bump_env() const;
  void set_back_bump_env(::jmc_auto::canbus::Brake_status__511_Back_bump_envType value);

  // optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
  bool has_overspd_env() const;
  void clear_overspd_env();
  static const int kOverspdEnvFieldNumber = 7;
  ::jmc_auto::canbus::Brake_status__511_Overspd_envType overspd_env() const;
  void set_overspd_env(::jmc_auto::canbus::Brake_status__511_Overspd_envType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Brake_status__511)
 private:
  void set_has_brake_pedal_en_sts();
  void clear_has_brake_pedal_en_sts();
  void set_has_brake_pedal_sts();
  void clear_has_brake_pedal_sts();
  void set_has_brake_err();
  void clear_has_brake_err();
  void set_has_emergency_btn_env();
  void clear_has_emergency_btn_env();
  void set_has_front_bump_env();
  void clear_has_front_bump_env();
  void set_has_back_bump_env();
  void clear_has_back_bump_env();
  void set_has_overspd_env();
  void clear_has_overspd_env();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int brake_pedal_en_sts_;
  ::google::protobuf::int32 brake_pedal_sts_;
  int brake_err_;
  int emergency_btn_env_;
  int front_bump_env_;
  int back_bump_env_;
  int overspd_env_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Throttle_status__510 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Throttle_status__510) */ {
 public:
  Throttle_status__510();
  virtual ~Throttle_status__510();

  Throttle_status__510(const Throttle_status__510& from);

  inline Throttle_status__510& operator=(const Throttle_status__510& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Throttle_status__510& default_instance();

  static inline const Throttle_status__510* internal_default_instance() {
    return reinterpret_cast<const Throttle_status__510*>(
               &_Throttle_status__510_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Throttle_status__510* other);

  // implements Message ----------------------------------------------

  inline Throttle_status__510* New() const PROTOBUF_FINAL { return New(NULL); }

  Throttle_status__510* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Throttle_status__510& from);
  void MergeFrom(const Throttle_status__510& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Throttle_status__510* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Throttle_status__510_Throttle_pedal_en_stsType Throttle_pedal_en_stsType;
  static const Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_DISABLE =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE;
  static const Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_ENABLE =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_ENABLE;
  static const Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_TAKEOVER =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER;
  static inline bool Throttle_pedal_en_stsType_IsValid(int value) {
    return Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value);
  }
  static const Throttle_pedal_en_stsType Throttle_pedal_en_stsType_MIN =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MIN;
  static const Throttle_pedal_en_stsType Throttle_pedal_en_stsType_MAX =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX;
  static const int Throttle_pedal_en_stsType_ARRAYSIZE =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Throttle_pedal_en_stsType_descriptor() {
    return Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
  }
  static inline const ::std::string& Throttle_pedal_en_stsType_Name(Throttle_pedal_en_stsType value) {
    return Throttle_status__510_Throttle_pedal_en_stsType_Name(value);
  }
  static inline bool Throttle_pedal_en_stsType_Parse(const ::std::string& name,
      Throttle_pedal_en_stsType* value) {
    return Throttle_status__510_Throttle_pedal_en_stsType_Parse(name, value);
  }

  typedef Throttle_status__510_Drive_motor_errType Drive_motor_errType;
  static const Drive_motor_errType DRIVE_MOTOR_ERR_NOERR =
    Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR;
  static const Drive_motor_errType DRIVE_MOTOR_ERR_DRV_MOTOR_ERR =
    Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
  static inline bool Drive_motor_errType_IsValid(int value) {
    return Throttle_status__510_Drive_motor_errType_IsValid(value);
  }
  static const Drive_motor_errType Drive_motor_errType_MIN =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MIN;
  static const Drive_motor_errType Drive_motor_errType_MAX =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX;
  static const int Drive_motor_errType_ARRAYSIZE =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Drive_motor_errType_descriptor() {
    return Throttle_status__510_Drive_motor_errType_descriptor();
  }
  static inline const ::std::string& Drive_motor_errType_Name(Drive_motor_errType value) {
    return Throttle_status__510_Drive_motor_errType_Name(value);
  }
  static inline bool Drive_motor_errType_Parse(const ::std::string& name,
      Drive_motor_errType* value) {
    return Throttle_status__510_Drive_motor_errType_Parse(name, value);
  }

  typedef Throttle_status__510_Battery_bms_errType Battery_bms_errType;
  static const Battery_bms_errType BATTERY_BMS_ERR_NOERR =
    Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR;
  static const Battery_bms_errType BATTERY_BMS_ERR_BATTERY_ERR =
    Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR;
  static inline bool Battery_bms_errType_IsValid(int value) {
    return Throttle_status__510_Battery_bms_errType_IsValid(value);
  }
  static const Battery_bms_errType Battery_bms_errType_MIN =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MIN;
  static const Battery_bms_errType Battery_bms_errType_MAX =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX;
  static const int Battery_bms_errType_ARRAYSIZE =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Battery_bms_errType_descriptor() {
    return Throttle_status__510_Battery_bms_errType_descriptor();
  }
  static inline const ::std::string& Battery_bms_errType_Name(Battery_bms_errType value) {
    return Throttle_status__510_Battery_bms_errType_Name(value);
  }
  static inline bool Battery_bms_errType_Parse(const ::std::string& name,
      Battery_bms_errType* value) {
    return Throttle_status__510_Battery_bms_errType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  bool has_throttle_pedal_en_sts() const;
  void clear_throttle_pedal_en_sts();
  static const int kThrottlePedalEnStsFieldNumber = 1;
  ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType throttle_pedal_en_sts() const;
  void set_throttle_pedal_en_sts(::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType value);

  // optional int32 throttle_pedal_sts = 2;
  bool has_throttle_pedal_sts() const;
  void clear_throttle_pedal_sts();
  static const int kThrottlePedalStsFieldNumber = 2;
  ::google::protobuf::int32 throttle_pedal_sts() const;
  void set_throttle_pedal_sts(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
  bool has_drive_motor_err() const;
  void clear_drive_motor_err();
  static const int kDriveMotorErrFieldNumber = 3;
  ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType drive_motor_err() const;
  void set_drive_motor_err(::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType value);

  // optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
  bool has_battery_bms_err() const;
  void clear_battery_bms_err();
  static const int kBatteryBmsErrFieldNumber = 4;
  ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType battery_bms_err() const;
  void set_battery_bms_err(::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Throttle_status__510)
 private:
  void set_has_throttle_pedal_en_sts();
  void clear_has_throttle_pedal_en_sts();
  void set_has_throttle_pedal_sts();
  void clear_has_throttle_pedal_sts();
  void set_has_drive_motor_err();
  void clear_has_drive_motor_err();
  void set_has_battery_bms_err();
  void clear_has_battery_bms_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int throttle_pedal_en_sts_;
  ::google::protobuf::int32 throttle_pedal_sts_;
  int drive_motor_err_;
  int battery_bms_err_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Turnsignal_status__513 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Turnsignal_status__513) */ {
 public:
  Turnsignal_status__513();
  virtual ~Turnsignal_status__513();

  Turnsignal_status__513(const Turnsignal_status__513& from);

  inline Turnsignal_status__513& operator=(const Turnsignal_status__513& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Turnsignal_status__513& default_instance();

  static inline const Turnsignal_status__513* internal_default_instance() {
    return reinterpret_cast<const Turnsignal_status__513*>(
               &_Turnsignal_status__513_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Turnsignal_status__513* other);

  // implements Message ----------------------------------------------

  inline Turnsignal_status__513* New() const PROTOBUF_FINAL { return New(NULL); }

  Turnsignal_status__513* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Turnsignal_status__513& from);
  void MergeFrom(const Turnsignal_status__513& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Turnsignal_status__513* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Turnsignal_status__513_Turn_signal_stsType Turn_signal_stsType;
  static const Turn_signal_stsType TURN_SIGNAL_STS_NONE =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE;
  static const Turn_signal_stsType TURN_SIGNAL_STS_LEFT =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_LEFT;
  static const Turn_signal_stsType TURN_SIGNAL_STS_RIGHT =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT;
  static inline bool Turn_signal_stsType_IsValid(int value) {
    return Turnsignal_status__513_Turn_signal_stsType_IsValid(value);
  }
  static const Turn_signal_stsType Turn_signal_stsType_MIN =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MIN;
  static const Turn_signal_stsType Turn_signal_stsType_MAX =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX;
  static const int Turn_signal_stsType_ARRAYSIZE =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Turn_signal_stsType_descriptor() {
    return Turnsignal_status__513_Turn_signal_stsType_descriptor();
  }
  static inline const ::std::string& Turn_signal_stsType_Name(Turn_signal_stsType value) {
    return Turnsignal_status__513_Turn_signal_stsType_Name(value);
  }
  static inline bool Turn_signal_stsType_Parse(const ::std::string& name,
      Turn_signal_stsType* value) {
    return Turnsignal_status__513_Turn_signal_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  bool has_turn_signal_sts() const;
  void clear_turn_signal_sts();
  static const int kTurnSignalStsFieldNumber = 1;
  ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType turn_signal_sts() const;
  void set_turn_signal_sts(::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Turnsignal_status__513)
 private:
  void set_has_turn_signal_sts();
  void clear_has_turn_signal_sts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int turn_signal_sts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Steer_status__512 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Steer_status__512) */ {
 public:
  Steer_status__512();
  virtual ~Steer_status__512();

  Steer_status__512(const Steer_status__512& from);

  inline Steer_status__512& operator=(const Steer_status__512& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Steer_status__512& default_instance();

  static inline const Steer_status__512* internal_default_instance() {
    return reinterpret_cast<const Steer_status__512*>(
               &_Steer_status__512_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Steer_status__512* other);

  // implements Message ----------------------------------------------

  inline Steer_status__512* New() const PROTOBUF_FINAL { return New(NULL); }

  Steer_status__512* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Steer_status__512& from);
  void MergeFrom(const Steer_status__512& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Steer_status__512* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Steer_status__512_Steer_angle_en_stsType Steer_angle_en_stsType;
  static const Steer_angle_en_stsType STEER_ANGLE_EN_STS_DISABLE =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE;
  static const Steer_angle_en_stsType STEER_ANGLE_EN_STS_ENABLE =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_ENABLE;
  static const Steer_angle_en_stsType STEER_ANGLE_EN_STS_TAKEOVER =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER;
  static inline bool Steer_angle_en_stsType_IsValid(int value) {
    return Steer_status__512_Steer_angle_en_stsType_IsValid(value);
  }
  static const Steer_angle_en_stsType Steer_angle_en_stsType_MIN =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MIN;
  static const Steer_angle_en_stsType Steer_angle_en_stsType_MAX =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX;
  static const int Steer_angle_en_stsType_ARRAYSIZE =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Steer_angle_en_stsType_descriptor() {
    return Steer_status__512_Steer_angle_en_stsType_descriptor();
  }
  static inline const ::std::string& Steer_angle_en_stsType_Name(Steer_angle_en_stsType value) {
    return Steer_status__512_Steer_angle_en_stsType_Name(value);
  }
  static inline bool Steer_angle_en_stsType_Parse(const ::std::string& name,
      Steer_angle_en_stsType* value) {
    return Steer_status__512_Steer_angle_en_stsType_Parse(name, value);
  }

  typedef Steer_status__512_Steer_errType Steer_errType;
  static const Steer_errType STEER_ERR_NOERR =
    Steer_status__512_Steer_errType_STEER_ERR_NOERR;
  static const Steer_errType STEER_ERR_STEER_MOTOR_ERR =
    Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR;
  static inline bool Steer_errType_IsValid(int value) {
    return Steer_status__512_Steer_errType_IsValid(value);
  }
  static const Steer_errType Steer_errType_MIN =
    Steer_status__512_Steer_errType_Steer_errType_MIN;
  static const Steer_errType Steer_errType_MAX =
    Steer_status__512_Steer_errType_Steer_errType_MAX;
  static const int Steer_errType_ARRAYSIZE =
    Steer_status__512_Steer_errType_Steer_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Steer_errType_descriptor() {
    return Steer_status__512_Steer_errType_descriptor();
  }
  static inline const ::std::string& Steer_errType_Name(Steer_errType value) {
    return Steer_status__512_Steer_errType_Name(value);
  }
  static inline bool Steer_errType_Parse(const ::std::string& name,
      Steer_errType* value) {
    return Steer_status__512_Steer_errType_Parse(name, value);
  }

  typedef Steer_status__512_Sensor_errType Sensor_errType;
  static const Sensor_errType SENSOR_ERR_NOERR =
    Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR;
  static const Sensor_errType SENSOR_ERR_STEER_SENSOR_ERR =
    Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR;
  static inline bool Sensor_errType_IsValid(int value) {
    return Steer_status__512_Sensor_errType_IsValid(value);
  }
  static const Sensor_errType Sensor_errType_MIN =
    Steer_status__512_Sensor_errType_Sensor_errType_MIN;
  static const Sensor_errType Sensor_errType_MAX =
    Steer_status__512_Sensor_errType_Sensor_errType_MAX;
  static const int Sensor_errType_ARRAYSIZE =
    Steer_status__512_Sensor_errType_Sensor_errType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sensor_errType_descriptor() {
    return Steer_status__512_Sensor_errType_descriptor();
  }
  static inline const ::std::string& Sensor_errType_Name(Sensor_errType value) {
    return Steer_status__512_Sensor_errType_Name(value);
  }
  static inline bool Sensor_errType_Parse(const ::std::string& name,
      Sensor_errType* value) {
    return Steer_status__512_Sensor_errType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double steer_angle_sts = 2;
  bool has_steer_angle_sts() const;
  void clear_steer_angle_sts();
  static const int kSteerAngleStsFieldNumber = 2;
  double steer_angle_sts() const;
  void set_steer_angle_sts(double value);

  // optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  bool has_steer_angle_en_sts() const;
  void clear_steer_angle_en_sts();
  static const int kSteerAngleEnStsFieldNumber = 1;
  ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType steer_angle_en_sts() const;
  void set_steer_angle_en_sts(::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType value);

  // optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
  bool has_steer_err() const;
  void clear_steer_err();
  static const int kSteerErrFieldNumber = 3;
  ::jmc_auto::canbus::Steer_status__512_Steer_errType steer_err() const;
  void set_steer_err(::jmc_auto::canbus::Steer_status__512_Steer_errType value);

  // optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
  bool has_sensor_err() const;
  void clear_sensor_err();
  static const int kSensorErrFieldNumber = 4;
  ::jmc_auto::canbus::Steer_status__512_Sensor_errType sensor_err() const;
  void set_sensor_err(::jmc_auto::canbus::Steer_status__512_Sensor_errType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Steer_status__512)
 private:
  void set_has_steer_angle_en_sts();
  void clear_has_steer_angle_en_sts();
  void set_has_steer_angle_sts();
  void clear_has_steer_angle_sts();
  void set_has_steer_err();
  void clear_has_steer_err();
  void set_has_sensor_err();
  void clear_has_sensor_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double steer_angle_sts_;
  int steer_angle_en_sts_;
  int steer_err_;
  int sensor_err_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ecu_status_1_515 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ecu_status_1_515) */ {
 public:
  Ecu_status_1_515();
  virtual ~Ecu_status_1_515();

  Ecu_status_1_515(const Ecu_status_1_515& from);

  inline Ecu_status_1_515& operator=(const Ecu_status_1_515& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ecu_status_1_515& default_instance();

  static inline const Ecu_status_1_515* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_1_515*>(
               &_Ecu_status_1_515_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Ecu_status_1_515* other);

  // implements Message ----------------------------------------------

  inline Ecu_status_1_515* New() const PROTOBUF_FINAL { return New(NULL); }

  Ecu_status_1_515* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ecu_status_1_515& from);
  void MergeFrom(const Ecu_status_1_515& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ecu_status_1_515* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ecu_status_1_515_Ctrl_stsType Ctrl_stsType;
  static const Ctrl_stsType CTRL_STS_OUT_OF_CONTROL =
    Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL;
  static const Ctrl_stsType CTRL_STS_UNDER_CONTROL =
    Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL;
  static inline bool Ctrl_stsType_IsValid(int value) {
    return Ecu_status_1_515_Ctrl_stsType_IsValid(value);
  }
  static const Ctrl_stsType Ctrl_stsType_MIN =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MIN;
  static const Ctrl_stsType Ctrl_stsType_MAX =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX;
  static const int Ctrl_stsType_ARRAYSIZE =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ctrl_stsType_descriptor() {
    return Ecu_status_1_515_Ctrl_stsType_descriptor();
  }
  static inline const ::std::string& Ctrl_stsType_Name(Ctrl_stsType value) {
    return Ecu_status_1_515_Ctrl_stsType_Name(value);
  }
  static inline bool Ctrl_stsType_Parse(const ::std::string& name,
      Ctrl_stsType* value) {
    return Ecu_status_1_515_Ctrl_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // optional double acc_speed = 2;
  bool has_acc_speed() const;
  void clear_acc_speed();
  static const int kAccSpeedFieldNumber = 2;
  double acc_speed() const;
  void set_acc_speed(double value);

  // optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  bool has_ctrl_sts() const;
  void clear_ctrl_sts();
  static const int kCtrlStsFieldNumber = 3;
  ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType ctrl_sts() const;
  void set_ctrl_sts(::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType value);

  // optional int32 chassis_sts = 4;
  bool has_chassis_sts() const;
  void clear_chassis_sts();
  static const int kChassisStsFieldNumber = 4;
  ::google::protobuf::int32 chassis_sts() const;
  void set_chassis_sts(::google::protobuf::int32 value);

  // optional int32 chassis_err = 5;
  bool has_chassis_err() const;
  void clear_chassis_err();
  static const int kChassisErrFieldNumber = 5;
  ::google::protobuf::int32 chassis_err() const;
  void set_chassis_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ecu_status_1_515)
 private:
  void set_has_speed();
  void clear_has_speed();
  void set_has_acc_speed();
  void clear_has_acc_speed();
  void set_has_ctrl_sts();
  void clear_has_ctrl_sts();
  void set_has_chassis_sts();
  void clear_has_chassis_sts();
  void set_has_chassis_err();
  void clear_has_chassis_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double speed_;
  double acc_speed_;
  int ctrl_sts_;
  ::google::protobuf::int32 chassis_sts_;
  ::google::protobuf::int32 chassis_err_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gear_status_514 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gear_status_514) */ {
 public:
  Gear_status_514();
  virtual ~Gear_status_514();

  Gear_status_514(const Gear_status_514& from);

  inline Gear_status_514& operator=(const Gear_status_514& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gear_status_514& default_instance();

  static inline const Gear_status_514* internal_default_instance() {
    return reinterpret_cast<const Gear_status_514*>(
               &_Gear_status_514_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Gear_status_514* other);

  // implements Message ----------------------------------------------

  inline Gear_status_514* New() const PROTOBUF_FINAL { return New(NULL); }

  Gear_status_514* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gear_status_514& from);
  void MergeFrom(const Gear_status_514& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gear_status_514* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gear_status_514_Gear_stsType Gear_stsType;
  static const Gear_stsType GEAR_STS_PARK =
    Gear_status_514_Gear_stsType_GEAR_STS_PARK;
  static const Gear_stsType GEAR_STS_REVERSE =
    Gear_status_514_Gear_stsType_GEAR_STS_REVERSE;
  static const Gear_stsType GEAR_STS_NEUTRAL =
    Gear_status_514_Gear_stsType_GEAR_STS_NEUTRAL;
  static const Gear_stsType GEAR_STS_DRIVE =
    Gear_status_514_Gear_stsType_GEAR_STS_DRIVE;
  static inline bool Gear_stsType_IsValid(int value) {
    return Gear_status_514_Gear_stsType_IsValid(value);
  }
  static const Gear_stsType Gear_stsType_MIN =
    Gear_status_514_Gear_stsType_Gear_stsType_MIN;
  static const Gear_stsType Gear_stsType_MAX =
    Gear_status_514_Gear_stsType_Gear_stsType_MAX;
  static const int Gear_stsType_ARRAYSIZE =
    Gear_status_514_Gear_stsType_Gear_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gear_stsType_descriptor() {
    return Gear_status_514_Gear_stsType_descriptor();
  }
  static inline const ::std::string& Gear_stsType_Name(Gear_stsType value) {
    return Gear_status_514_Gear_stsType_Name(value);
  }
  static inline bool Gear_stsType_Parse(const ::std::string& name,
      Gear_stsType* value) {
    return Gear_status_514_Gear_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  bool has_gear_sts() const;
  void clear_gear_sts();
  static const int kGearStsFieldNumber = 1;
  ::jmc_auto::canbus::Gear_status_514_Gear_stsType gear_sts() const;
  void set_gear_sts(::jmc_auto::canbus::Gear_status_514_Gear_stsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gear_status_514)
 private:
  void set_has_gear_sts();
  void clear_has_gear_sts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int gear_sts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ecu_status_3_517 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ecu_status_3_517) */ {
 public:
  Ecu_status_3_517();
  virtual ~Ecu_status_3_517();

  Ecu_status_3_517(const Ecu_status_3_517& from);

  inline Ecu_status_3_517& operator=(const Ecu_status_3_517& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ecu_status_3_517& default_instance();

  static inline const Ecu_status_3_517* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_3_517*>(
               &_Ecu_status_3_517_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Ecu_status_3_517* other);

  // implements Message ----------------------------------------------

  inline Ecu_status_3_517* New() const PROTOBUF_FINAL { return New(NULL); }

  Ecu_status_3_517* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ecu_status_3_517& from);
  void MergeFrom(const Ecu_status_3_517& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ecu_status_3_517* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ultrasound_dist_1 = 1;
  bool has_ultrasound_dist_1() const;
  void clear_ultrasound_dist_1();
  static const int kUltrasoundDist1FieldNumber = 1;
  ::google::protobuf::int32 ultrasound_dist_1() const;
  void set_ultrasound_dist_1(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_2 = 2;
  bool has_ultrasound_dist_2() const;
  void clear_ultrasound_dist_2();
  static const int kUltrasoundDist2FieldNumber = 2;
  ::google::protobuf::int32 ultrasound_dist_2() const;
  void set_ultrasound_dist_2(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_3 = 3;
  bool has_ultrasound_dist_3() const;
  void clear_ultrasound_dist_3();
  static const int kUltrasoundDist3FieldNumber = 3;
  ::google::protobuf::int32 ultrasound_dist_3() const;
  void set_ultrasound_dist_3(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_4 = 4;
  bool has_ultrasound_dist_4() const;
  void clear_ultrasound_dist_4();
  static const int kUltrasoundDist4FieldNumber = 4;
  ::google::protobuf::int32 ultrasound_dist_4() const;
  void set_ultrasound_dist_4(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_5 = 5;
  bool has_ultrasound_dist_5() const;
  void clear_ultrasound_dist_5();
  static const int kUltrasoundDist5FieldNumber = 5;
  ::google::protobuf::int32 ultrasound_dist_5() const;
  void set_ultrasound_dist_5(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_6 = 6;
  bool has_ultrasound_dist_6() const;
  void clear_ultrasound_dist_6();
  static const int kUltrasoundDist6FieldNumber = 6;
  ::google::protobuf::int32 ultrasound_dist_6() const;
  void set_ultrasound_dist_6(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_7 = 7;
  bool has_ultrasound_dist_7() const;
  void clear_ultrasound_dist_7();
  static const int kUltrasoundDist7FieldNumber = 7;
  ::google::protobuf::int32 ultrasound_dist_7() const;
  void set_ultrasound_dist_7(::google::protobuf::int32 value);

  // optional int32 ultrasound_dist_8 = 8;
  bool has_ultrasound_dist_8() const;
  void clear_ultrasound_dist_8();
  static const int kUltrasoundDist8FieldNumber = 8;
  ::google::protobuf::int32 ultrasound_dist_8() const;
  void set_ultrasound_dist_8(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ecu_status_3_517)
 private:
  void set_has_ultrasound_dist_1();
  void clear_has_ultrasound_dist_1();
  void set_has_ultrasound_dist_2();
  void clear_has_ultrasound_dist_2();
  void set_has_ultrasound_dist_3();
  void clear_has_ultrasound_dist_3();
  void set_has_ultrasound_dist_4();
  void clear_has_ultrasound_dist_4();
  void set_has_ultrasound_dist_5();
  void clear_has_ultrasound_dist_5();
  void set_has_ultrasound_dist_6();
  void clear_has_ultrasound_dist_6();
  void set_has_ultrasound_dist_7();
  void clear_has_ultrasound_dist_7();
  void set_has_ultrasound_dist_8();
  void clear_has_ultrasound_dist_8();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ultrasound_dist_1_;
  ::google::protobuf::int32 ultrasound_dist_2_;
  ::google::protobuf::int32 ultrasound_dist_3_;
  ::google::protobuf::int32 ultrasound_dist_4_;
  ::google::protobuf::int32 ultrasound_dist_5_;
  ::google::protobuf::int32 ultrasound_dist_6_;
  ::google::protobuf::int32 ultrasound_dist_7_;
  ::google::protobuf::int32 ultrasound_dist_8_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ecu_status_2_516 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ecu_status_2_516) */ {
 public:
  Ecu_status_2_516();
  virtual ~Ecu_status_2_516();

  Ecu_status_2_516(const Ecu_status_2_516& from);

  inline Ecu_status_2_516& operator=(const Ecu_status_2_516& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ecu_status_2_516& default_instance();

  static inline const Ecu_status_2_516* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_2_516*>(
               &_Ecu_status_2_516_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Ecu_status_2_516* other);

  // implements Message ----------------------------------------------

  inline Ecu_status_2_516* New() const PROTOBUF_FINAL { return New(NULL); }

  Ecu_status_2_516* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ecu_status_2_516& from);
  void MergeFrom(const Ecu_status_2_516& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ecu_status_2_516* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double battery_voltage = 2;
  bool has_battery_voltage() const;
  void clear_battery_voltage();
  static const int kBatteryVoltageFieldNumber = 2;
  double battery_voltage() const;
  void set_battery_voltage(double value);

  // optional int32 battery_remaining_capacity = 1;
  bool has_battery_remaining_capacity() const;
  void clear_battery_remaining_capacity();
  static const int kBatteryRemainingCapacityFieldNumber = 1;
  ::google::protobuf::int32 battery_remaining_capacity() const;
  void set_battery_remaining_capacity(::google::protobuf::int32 value);

  // optional int32 battery_temperature = 4;
  bool has_battery_temperature() const;
  void clear_battery_temperature();
  static const int kBatteryTemperatureFieldNumber = 4;
  ::google::protobuf::int32 battery_temperature() const;
  void set_battery_temperature(::google::protobuf::int32 value);

  // optional double battery_current = 3;
  bool has_battery_current() const;
  void clear_battery_current();
  static const int kBatteryCurrentFieldNumber = 3;
  double battery_current() const;
  void set_battery_current(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ecu_status_2_516)
 private:
  void set_has_battery_remaining_capacity();
  void clear_has_battery_remaining_capacity();
  void set_has_battery_voltage();
  void clear_has_battery_voltage();
  void set_has_battery_current();
  void clear_has_battery_current();
  void set_has_battery_temperature();
  void clear_has_battery_temperature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double battery_voltage_;
  ::google::protobuf::int32 battery_remaining_capacity_;
  ::google::protobuf::int32 battery_temperature_;
  double battery_current_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ch) */ {
 public:
  Ch();
  virtual ~Ch();

  Ch(const Ch& from);

  inline Ch& operator=(const Ch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ch& default_instance();

  static inline const Ch* internal_default_instance() {
    return reinterpret_cast<const Ch*>(
               &_Ch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Ch* other);

  // implements Message ----------------------------------------------

  inline Ch* New() const PROTOBUF_FINAL { return New(NULL); }

  Ch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ch& from);
  void MergeFrom(const Ch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
  bool has_control_command_115() const;
  void clear_control_command_115();
  static const int kControlCommand115FieldNumber = 1;
  const ::jmc_auto::canbus::Control_command_115& control_command_115() const;
  ::jmc_auto::canbus::Control_command_115* mutable_control_command_115();
  ::jmc_auto::canbus::Control_command_115* release_control_command_115();
  void set_allocated_control_command_115(::jmc_auto::canbus::Control_command_115* control_command_115);

  // optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
  bool has_gear_command_114() const;
  void clear_gear_command_114();
  static const int kGearCommand114FieldNumber = 2;
  const ::jmc_auto::canbus::Gear_command_114& gear_command_114() const;
  ::jmc_auto::canbus::Gear_command_114* mutable_gear_command_114();
  ::jmc_auto::canbus::Gear_command_114* release_gear_command_114();
  void set_allocated_gear_command_114(::jmc_auto::canbus::Gear_command_114* gear_command_114);

  // optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
  bool has_brake_command_111() const;
  void clear_brake_command_111();
  static const int kBrakeCommand111FieldNumber = 3;
  const ::jmc_auto::canbus::Brake_command_111& brake_command_111() const;
  ::jmc_auto::canbus::Brake_command_111* mutable_brake_command_111();
  ::jmc_auto::canbus::Brake_command_111* release_brake_command_111();
  void set_allocated_brake_command_111(::jmc_auto::canbus::Brake_command_111* brake_command_111);

  // optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
  bool has_throttle_command_110() const;
  void clear_throttle_command_110();
  static const int kThrottleCommand110FieldNumber = 4;
  const ::jmc_auto::canbus::Throttle_command_110& throttle_command_110() const;
  ::jmc_auto::canbus::Throttle_command_110* mutable_throttle_command_110();
  ::jmc_auto::canbus::Throttle_command_110* release_throttle_command_110();
  void set_allocated_throttle_command_110(::jmc_auto::canbus::Throttle_command_110* throttle_command_110);

  // optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  bool has_turnsignal_command_113() const;
  void clear_turnsignal_command_113();
  static const int kTurnsignalCommand113FieldNumber = 5;
  const ::jmc_auto::canbus::Turnsignal_command_113& turnsignal_command_113() const;
  ::jmc_auto::canbus::Turnsignal_command_113* mutable_turnsignal_command_113();
  ::jmc_auto::canbus::Turnsignal_command_113* release_turnsignal_command_113();
  void set_allocated_turnsignal_command_113(::jmc_auto::canbus::Turnsignal_command_113* turnsignal_command_113);

  // optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
  bool has_steer_command_112() const;
  void clear_steer_command_112();
  static const int kSteerCommand112FieldNumber = 6;
  const ::jmc_auto::canbus::Steer_command_112& steer_command_112() const;
  ::jmc_auto::canbus::Steer_command_112* mutable_steer_command_112();
  ::jmc_auto::canbus::Steer_command_112* release_steer_command_112();
  void set_allocated_steer_command_112(::jmc_auto::canbus::Steer_command_112* steer_command_112);

  // optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
  bool has_brake_status__511() const;
  void clear_brake_status__511();
  static const int kBrakeStatus511FieldNumber = 7;
  const ::jmc_auto::canbus::Brake_status__511& brake_status__511() const;
  ::jmc_auto::canbus::Brake_status__511* mutable_brake_status__511();
  ::jmc_auto::canbus::Brake_status__511* release_brake_status__511();
  void set_allocated_brake_status__511(::jmc_auto::canbus::Brake_status__511* brake_status__511);

  // optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
  bool has_throttle_status__510() const;
  void clear_throttle_status__510();
  static const int kThrottleStatus510FieldNumber = 8;
  const ::jmc_auto::canbus::Throttle_status__510& throttle_status__510() const;
  ::jmc_auto::canbus::Throttle_status__510* mutable_throttle_status__510();
  ::jmc_auto::canbus::Throttle_status__510* release_throttle_status__510();
  void set_allocated_throttle_status__510(::jmc_auto::canbus::Throttle_status__510* throttle_status__510);

  // optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  bool has_turnsignal_status__513() const;
  void clear_turnsignal_status__513();
  static const int kTurnsignalStatus513FieldNumber = 9;
  const ::jmc_auto::canbus::Turnsignal_status__513& turnsignal_status__513() const;
  ::jmc_auto::canbus::Turnsignal_status__513* mutable_turnsignal_status__513();
  ::jmc_auto::canbus::Turnsignal_status__513* release_turnsignal_status__513();
  void set_allocated_turnsignal_status__513(::jmc_auto::canbus::Turnsignal_status__513* turnsignal_status__513);

  // optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
  bool has_steer_status__512() const;
  void clear_steer_status__512();
  static const int kSteerStatus512FieldNumber = 10;
  const ::jmc_auto::canbus::Steer_status__512& steer_status__512() const;
  ::jmc_auto::canbus::Steer_status__512* mutable_steer_status__512();
  ::jmc_auto::canbus::Steer_status__512* release_steer_status__512();
  void set_allocated_steer_status__512(::jmc_auto::canbus::Steer_status__512* steer_status__512);

  // optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  bool has_ecu_status_1_515() const;
  void clear_ecu_status_1_515();
  static const int kEcuStatus1515FieldNumber = 11;
  const ::jmc_auto::canbus::Ecu_status_1_515& ecu_status_1_515() const;
  ::jmc_auto::canbus::Ecu_status_1_515* mutable_ecu_status_1_515();
  ::jmc_auto::canbus::Ecu_status_1_515* release_ecu_status_1_515();
  void set_allocated_ecu_status_1_515(::jmc_auto::canbus::Ecu_status_1_515* ecu_status_1_515);

  // optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
  bool has_gear_status_514() const;
  void clear_gear_status_514();
  static const int kGearStatus514FieldNumber = 12;
  const ::jmc_auto::canbus::Gear_status_514& gear_status_514() const;
  ::jmc_auto::canbus::Gear_status_514* mutable_gear_status_514();
  ::jmc_auto::canbus::Gear_status_514* release_gear_status_514();
  void set_allocated_gear_status_514(::jmc_auto::canbus::Gear_status_514* gear_status_514);

  // optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  bool has_ecu_status_3_517() const;
  void clear_ecu_status_3_517();
  static const int kEcuStatus3517FieldNumber = 13;
  const ::jmc_auto::canbus::Ecu_status_3_517& ecu_status_3_517() const;
  ::jmc_auto::canbus::Ecu_status_3_517* mutable_ecu_status_3_517();
  ::jmc_auto::canbus::Ecu_status_3_517* release_ecu_status_3_517();
  void set_allocated_ecu_status_3_517(::jmc_auto::canbus::Ecu_status_3_517* ecu_status_3_517);

  // optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  bool has_ecu_status_2_516() const;
  void clear_ecu_status_2_516();
  static const int kEcuStatus2516FieldNumber = 14;
  const ::jmc_auto::canbus::Ecu_status_2_516& ecu_status_2_516() const;
  ::jmc_auto::canbus::Ecu_status_2_516* mutable_ecu_status_2_516();
  ::jmc_auto::canbus::Ecu_status_2_516* release_ecu_status_2_516();
  void set_allocated_ecu_status_2_516(::jmc_auto::canbus::Ecu_status_2_516* ecu_status_2_516);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ch)
 private:
  void set_has_control_command_115();
  void clear_has_control_command_115();
  void set_has_gear_command_114();
  void clear_has_gear_command_114();
  void set_has_brake_command_111();
  void clear_has_brake_command_111();
  void set_has_throttle_command_110();
  void clear_has_throttle_command_110();
  void set_has_turnsignal_command_113();
  void clear_has_turnsignal_command_113();
  void set_has_steer_command_112();
  void clear_has_steer_command_112();
  void set_has_brake_status__511();
  void clear_has_brake_status__511();
  void set_has_throttle_status__510();
  void clear_has_throttle_status__510();
  void set_has_turnsignal_status__513();
  void clear_has_turnsignal_status__513();
  void set_has_steer_status__512();
  void clear_has_steer_status__512();
  void set_has_ecu_status_1_515();
  void clear_has_ecu_status_1_515();
  void set_has_gear_status_514();
  void clear_has_gear_status_514();
  void set_has_ecu_status_3_517();
  void clear_has_ecu_status_3_517();
  void set_has_ecu_status_2_516();
  void clear_has_ecu_status_2_516();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::canbus::Control_command_115* control_command_115_;
  ::jmc_auto::canbus::Gear_command_114* gear_command_114_;
  ::jmc_auto::canbus::Brake_command_111* brake_command_111_;
  ::jmc_auto::canbus::Throttle_command_110* throttle_command_110_;
  ::jmc_auto::canbus::Turnsignal_command_113* turnsignal_command_113_;
  ::jmc_auto::canbus::Steer_command_112* steer_command_112_;
  ::jmc_auto::canbus::Brake_status__511* brake_status__511_;
  ::jmc_auto::canbus::Throttle_status__510* throttle_status__510_;
  ::jmc_auto::canbus::Turnsignal_status__513* turnsignal_status__513_;
  ::jmc_auto::canbus::Steer_status__512* steer_status__512_;
  ::jmc_auto::canbus::Ecu_status_1_515* ecu_status_1_515_;
  ::jmc_auto::canbus::Gear_status_514* gear_status_514_;
  ::jmc_auto::canbus::Ecu_status_3_517* ecu_status_3_517_;
  ::jmc_auto::canbus::Ecu_status_2_516* ecu_status_2_516_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_command_115

// optional .jmc_auto.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
inline bool Control_command_115::has_ctrl_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control_command_115::set_has_ctrl_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control_command_115::clear_has_ctrl_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control_command_115::clear_ctrl_cmd() {
  ctrl_cmd_ = 0;
  clear_has_ctrl_cmd();
}
inline ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType Control_command_115::ctrl_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Control_command_115.ctrl_cmd)
  return static_cast< ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType >(ctrl_cmd_);
}
inline void Control_command_115::set_ctrl_cmd(::jmc_auto::canbus::Control_command_115_Ctrl_cmdType value) {
  assert(::jmc_auto::canbus::Control_command_115_Ctrl_cmdType_IsValid(value));
  set_has_ctrl_cmd();
  ctrl_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Control_command_115.ctrl_cmd)
}

// -------------------------------------------------------------------

// Gear_command_114

// optional .jmc_auto.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
inline bool Gear_command_114::has_gear_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gear_command_114::set_has_gear_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gear_command_114::clear_has_gear_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gear_command_114::clear_gear_cmd() {
  gear_cmd_ = 1;
  clear_has_gear_cmd();
}
inline ::jmc_auto::canbus::Gear_command_114_Gear_cmdType Gear_command_114::gear_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gear_command_114.gear_cmd)
  return static_cast< ::jmc_auto::canbus::Gear_command_114_Gear_cmdType >(gear_cmd_);
}
inline void Gear_command_114::set_gear_cmd(::jmc_auto::canbus::Gear_command_114_Gear_cmdType value) {
  assert(::jmc_auto::canbus::Gear_command_114_Gear_cmdType_IsValid(value));
  set_has_gear_cmd();
  gear_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gear_command_114.gear_cmd)
}

// -------------------------------------------------------------------

// Brake_command_111

// optional .jmc_auto.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
inline bool Brake_command_111::has_brake_pedal_en_ctrl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Brake_command_111::set_has_brake_pedal_en_ctrl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Brake_command_111::clear_has_brake_pedal_en_ctrl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Brake_command_111::clear_brake_pedal_en_ctrl() {
  brake_pedal_en_ctrl_ = 0;
  clear_has_brake_pedal_en_ctrl();
}
inline ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::brake_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_command_111.brake_pedal_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType >(brake_pedal_en_ctrl_);
}
inline void Brake_command_111::set_brake_pedal_en_ctrl(::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType value) {
  assert(::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value));
  set_has_brake_pedal_en_ctrl();
  brake_pedal_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_command_111.brake_pedal_en_ctrl)
}

// optional int32 brake_pedal_cmd = 2;
inline bool Brake_command_111::has_brake_pedal_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Brake_command_111::set_has_brake_pedal_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Brake_command_111::clear_has_brake_pedal_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Brake_command_111::clear_brake_pedal_cmd() {
  brake_pedal_cmd_ = 0;
  clear_has_brake_pedal_cmd();
}
inline ::google::protobuf::int32 Brake_command_111::brake_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_command_111.brake_pedal_cmd)
  return brake_pedal_cmd_;
}
inline void Brake_command_111::set_brake_pedal_cmd(::google::protobuf::int32 value) {
  set_has_brake_pedal_cmd();
  brake_pedal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_command_111.brake_pedal_cmd)
}

// -------------------------------------------------------------------

// Throttle_command_110

// optional .jmc_auto.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
inline bool Throttle_command_110::has_throttle_pedal_en_ctrl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Throttle_command_110::set_has_throttle_pedal_en_ctrl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Throttle_command_110::clear_has_throttle_pedal_en_ctrl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Throttle_command_110::clear_throttle_pedal_en_ctrl() {
  throttle_pedal_en_ctrl_ = 0;
  clear_has_throttle_pedal_en_ctrl();
}
inline ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::throttle_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType >(throttle_pedal_en_ctrl_);
}
inline void Throttle_command_110::set_throttle_pedal_en_ctrl(::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value) {
  assert(::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value));
  set_has_throttle_pedal_en_ctrl();
  throttle_pedal_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
}

// optional int32 throttle_pedal_cmd = 2;
inline bool Throttle_command_110::has_throttle_pedal_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Throttle_command_110::set_has_throttle_pedal_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Throttle_command_110::clear_has_throttle_pedal_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Throttle_command_110::clear_throttle_pedal_cmd() {
  throttle_pedal_cmd_ = 0;
  clear_has_throttle_pedal_cmd();
}
inline ::google::protobuf::int32 Throttle_command_110::throttle_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_command_110.throttle_pedal_cmd)
  return throttle_pedal_cmd_;
}
inline void Throttle_command_110::set_throttle_pedal_cmd(::google::protobuf::int32 value) {
  set_has_throttle_pedal_cmd();
  throttle_pedal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_command_110.throttle_pedal_cmd)
}

// -------------------------------------------------------------------

// Turnsignal_command_113

// optional .jmc_auto.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
inline bool Turnsignal_command_113::has_turn_signal_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Turnsignal_command_113::set_has_turn_signal_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Turnsignal_command_113::clear_has_turn_signal_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Turnsignal_command_113::clear_turn_signal_cmd() {
  turn_signal_cmd_ = 0;
  clear_has_turn_signal_cmd();
}
inline ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::turn_signal_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Turnsignal_command_113.turn_signal_cmd)
  return static_cast< ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType >(turn_signal_cmd_);
}
inline void Turnsignal_command_113::set_turn_signal_cmd(::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType value) {
  assert(::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(value));
  set_has_turn_signal_cmd();
  turn_signal_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Turnsignal_command_113.turn_signal_cmd)
}

// -------------------------------------------------------------------

// Steer_command_112

// optional .jmc_auto.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
inline bool Steer_command_112::has_steer_angle_en_ctrl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Steer_command_112::set_has_steer_angle_en_ctrl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Steer_command_112::clear_has_steer_angle_en_ctrl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Steer_command_112::clear_steer_angle_en_ctrl() {
  steer_angle_en_ctrl_ = 0;
  clear_has_steer_angle_en_ctrl();
}
inline ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::steer_angle_en_ctrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_command_112.steer_angle_en_ctrl)
  return static_cast< ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType >(steer_angle_en_ctrl_);
}
inline void Steer_command_112::set_steer_angle_en_ctrl(::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType value) {
  assert(::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(value));
  set_has_steer_angle_en_ctrl();
  steer_angle_en_ctrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_command_112.steer_angle_en_ctrl)
}

// optional double steer_angle_cmd = 2;
inline bool Steer_command_112::has_steer_angle_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Steer_command_112::set_has_steer_angle_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Steer_command_112::clear_has_steer_angle_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Steer_command_112::clear_steer_angle_cmd() {
  steer_angle_cmd_ = 0;
  clear_has_steer_angle_cmd();
}
inline double Steer_command_112::steer_angle_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_command_112.steer_angle_cmd)
  return steer_angle_cmd_;
}
inline void Steer_command_112::set_steer_angle_cmd(double value) {
  set_has_steer_angle_cmd();
  steer_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_command_112.steer_angle_cmd)
}

// -------------------------------------------------------------------

// Brake_status__511

// optional .jmc_auto.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
inline bool Brake_status__511::has_brake_pedal_en_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Brake_status__511::set_has_brake_pedal_en_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Brake_status__511::clear_has_brake_pedal_en_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Brake_status__511::clear_brake_pedal_en_sts() {
  brake_pedal_en_sts_ = 0;
  clear_has_brake_pedal_en_sts();
}
inline ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType Brake_status__511::brake_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_pedal_en_sts)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType >(brake_pedal_en_sts_);
}
inline void Brake_status__511::set_brake_pedal_en_sts(::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(value));
  set_has_brake_pedal_en_sts();
  brake_pedal_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_pedal_en_sts)
}

// optional int32 brake_pedal_sts = 2;
inline bool Brake_status__511::has_brake_pedal_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Brake_status__511::set_has_brake_pedal_sts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Brake_status__511::clear_has_brake_pedal_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Brake_status__511::clear_brake_pedal_sts() {
  brake_pedal_sts_ = 0;
  clear_has_brake_pedal_sts();
}
inline ::google::protobuf::int32 Brake_status__511::brake_pedal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_pedal_sts)
  return brake_pedal_sts_;
}
inline void Brake_status__511::set_brake_pedal_sts(::google::protobuf::int32 value) {
  set_has_brake_pedal_sts();
  brake_pedal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_pedal_sts)
}

// optional .jmc_auto.canbus.Brake_status__511.Brake_errType brake_err = 3;
inline bool Brake_status__511::has_brake_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Brake_status__511::set_has_brake_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Brake_status__511::clear_has_brake_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Brake_status__511::clear_brake_err() {
  brake_err_ = 0;
  clear_has_brake_err();
}
inline ::jmc_auto::canbus::Brake_status__511_Brake_errType Brake_status__511::brake_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.brake_err)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Brake_errType >(brake_err_);
}
inline void Brake_status__511::set_brake_err(::jmc_auto::canbus::Brake_status__511_Brake_errType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Brake_errType_IsValid(value));
  set_has_brake_err();
  brake_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.brake_err)
}

// optional .jmc_auto.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
inline bool Brake_status__511::has_emergency_btn_env() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Brake_status__511::set_has_emergency_btn_env() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Brake_status__511::clear_has_emergency_btn_env() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Brake_status__511::clear_emergency_btn_env() {
  emergency_btn_env_ = 0;
  clear_has_emergency_btn_env();
}
inline ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType Brake_status__511::emergency_btn_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.emergency_btn_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType >(emergency_btn_env_);
}
inline void Brake_status__511::set_emergency_btn_env(::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType_IsValid(value));
  set_has_emergency_btn_env();
  emergency_btn_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.emergency_btn_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
inline bool Brake_status__511::has_front_bump_env() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Brake_status__511::set_has_front_bump_env() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Brake_status__511::clear_has_front_bump_env() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Brake_status__511::clear_front_bump_env() {
  front_bump_env_ = 0;
  clear_has_front_bump_env();
}
inline ::jmc_auto::canbus::Brake_status__511_Front_bump_envType Brake_status__511::front_bump_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.front_bump_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Front_bump_envType >(front_bump_env_);
}
inline void Brake_status__511::set_front_bump_env(::jmc_auto::canbus::Brake_status__511_Front_bump_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Front_bump_envType_IsValid(value));
  set_has_front_bump_env();
  front_bump_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.front_bump_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
inline bool Brake_status__511::has_back_bump_env() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Brake_status__511::set_has_back_bump_env() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Brake_status__511::clear_has_back_bump_env() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Brake_status__511::clear_back_bump_env() {
  back_bump_env_ = 0;
  clear_has_back_bump_env();
}
inline ::jmc_auto::canbus::Brake_status__511_Back_bump_envType Brake_status__511::back_bump_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.back_bump_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Back_bump_envType >(back_bump_env_);
}
inline void Brake_status__511::set_back_bump_env(::jmc_auto::canbus::Brake_status__511_Back_bump_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Back_bump_envType_IsValid(value));
  set_has_back_bump_env();
  back_bump_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.back_bump_env)
}

// optional .jmc_auto.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
inline bool Brake_status__511::has_overspd_env() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Brake_status__511::set_has_overspd_env() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Brake_status__511::clear_has_overspd_env() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Brake_status__511::clear_overspd_env() {
  overspd_env_ = 0;
  clear_has_overspd_env();
}
inline ::jmc_auto::canbus::Brake_status__511_Overspd_envType Brake_status__511::overspd_env() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Brake_status__511.overspd_env)
  return static_cast< ::jmc_auto::canbus::Brake_status__511_Overspd_envType >(overspd_env_);
}
inline void Brake_status__511::set_overspd_env(::jmc_auto::canbus::Brake_status__511_Overspd_envType value) {
  assert(::jmc_auto::canbus::Brake_status__511_Overspd_envType_IsValid(value));
  set_has_overspd_env();
  overspd_env_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Brake_status__511.overspd_env)
}

// -------------------------------------------------------------------

// Throttle_status__510

// optional .jmc_auto.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
inline bool Throttle_status__510::has_throttle_pedal_en_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Throttle_status__510::set_has_throttle_pedal_en_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Throttle_status__510::clear_has_throttle_pedal_en_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Throttle_status__510::clear_throttle_pedal_en_sts() {
  throttle_pedal_en_sts_ = 0;
  clear_has_throttle_pedal_en_sts();
}
inline ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::throttle_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.throttle_pedal_en_sts)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType >(throttle_pedal_en_sts_);
}
inline void Throttle_status__510::set_throttle_pedal_en_sts(::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value));
  set_has_throttle_pedal_en_sts();
  throttle_pedal_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.throttle_pedal_en_sts)
}

// optional int32 throttle_pedal_sts = 2;
inline bool Throttle_status__510::has_throttle_pedal_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Throttle_status__510::set_has_throttle_pedal_sts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Throttle_status__510::clear_has_throttle_pedal_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Throttle_status__510::clear_throttle_pedal_sts() {
  throttle_pedal_sts_ = 0;
  clear_has_throttle_pedal_sts();
}
inline ::google::protobuf::int32 Throttle_status__510::throttle_pedal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.throttle_pedal_sts)
  return throttle_pedal_sts_;
}
inline void Throttle_status__510::set_throttle_pedal_sts(::google::protobuf::int32 value) {
  set_has_throttle_pedal_sts();
  throttle_pedal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.throttle_pedal_sts)
}

// optional .jmc_auto.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
inline bool Throttle_status__510::has_drive_motor_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Throttle_status__510::set_has_drive_motor_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Throttle_status__510::clear_has_drive_motor_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Throttle_status__510::clear_drive_motor_err() {
  drive_motor_err_ = 0;
  clear_has_drive_motor_err();
}
inline ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType Throttle_status__510::drive_motor_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.drive_motor_err)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType >(drive_motor_err_);
}
inline void Throttle_status__510::set_drive_motor_err(::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType_IsValid(value));
  set_has_drive_motor_err();
  drive_motor_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.drive_motor_err)
}

// optional .jmc_auto.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
inline bool Throttle_status__510::has_battery_bms_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Throttle_status__510::set_has_battery_bms_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Throttle_status__510::clear_has_battery_bms_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Throttle_status__510::clear_battery_bms_err() {
  battery_bms_err_ = 0;
  clear_has_battery_bms_err();
}
inline ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType Throttle_status__510::battery_bms_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Throttle_status__510.battery_bms_err)
  return static_cast< ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType >(battery_bms_err_);
}
inline void Throttle_status__510::set_battery_bms_err(::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType value) {
  assert(::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType_IsValid(value));
  set_has_battery_bms_err();
  battery_bms_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Throttle_status__510.battery_bms_err)
}

// -------------------------------------------------------------------

// Turnsignal_status__513

// optional .jmc_auto.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
inline bool Turnsignal_status__513::has_turn_signal_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Turnsignal_status__513::set_has_turn_signal_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Turnsignal_status__513::clear_has_turn_signal_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Turnsignal_status__513::clear_turn_signal_sts() {
  turn_signal_sts_ = 0;
  clear_has_turn_signal_sts();
}
inline ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::turn_signal_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Turnsignal_status__513.turn_signal_sts)
  return static_cast< ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType >(turn_signal_sts_);
}
inline void Turnsignal_status__513::set_turn_signal_sts(::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType value) {
  assert(::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(value));
  set_has_turn_signal_sts();
  turn_signal_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Turnsignal_status__513.turn_signal_sts)
}

// -------------------------------------------------------------------

// Steer_status__512

// optional .jmc_auto.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
inline bool Steer_status__512::has_steer_angle_en_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Steer_status__512::set_has_steer_angle_en_sts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Steer_status__512::clear_has_steer_angle_en_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Steer_status__512::clear_steer_angle_en_sts() {
  steer_angle_en_sts_ = 0;
  clear_has_steer_angle_en_sts();
}
inline ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType Steer_status__512::steer_angle_en_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_angle_en_sts)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType >(steer_angle_en_sts_);
}
inline void Steer_status__512::set_steer_angle_en_sts(::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(value));
  set_has_steer_angle_en_sts();
  steer_angle_en_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_angle_en_sts)
}

// optional double steer_angle_sts = 2;
inline bool Steer_status__512::has_steer_angle_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Steer_status__512::set_has_steer_angle_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Steer_status__512::clear_has_steer_angle_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Steer_status__512::clear_steer_angle_sts() {
  steer_angle_sts_ = 0;
  clear_has_steer_angle_sts();
}
inline double Steer_status__512::steer_angle_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_angle_sts)
  return steer_angle_sts_;
}
inline void Steer_status__512::set_steer_angle_sts(double value) {
  set_has_steer_angle_sts();
  steer_angle_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_angle_sts)
}

// optional .jmc_auto.canbus.Steer_status__512.Steer_errType steer_err = 3;
inline bool Steer_status__512::has_steer_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Steer_status__512::set_has_steer_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Steer_status__512::clear_has_steer_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Steer_status__512::clear_steer_err() {
  steer_err_ = 0;
  clear_has_steer_err();
}
inline ::jmc_auto::canbus::Steer_status__512_Steer_errType Steer_status__512::steer_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.steer_err)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Steer_errType >(steer_err_);
}
inline void Steer_status__512::set_steer_err(::jmc_auto::canbus::Steer_status__512_Steer_errType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Steer_errType_IsValid(value));
  set_has_steer_err();
  steer_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.steer_err)
}

// optional .jmc_auto.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
inline bool Steer_status__512::has_sensor_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Steer_status__512::set_has_sensor_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Steer_status__512::clear_has_sensor_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Steer_status__512::clear_sensor_err() {
  sensor_err_ = 0;
  clear_has_sensor_err();
}
inline ::jmc_auto::canbus::Steer_status__512_Sensor_errType Steer_status__512::sensor_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Steer_status__512.sensor_err)
  return static_cast< ::jmc_auto::canbus::Steer_status__512_Sensor_errType >(sensor_err_);
}
inline void Steer_status__512::set_sensor_err(::jmc_auto::canbus::Steer_status__512_Sensor_errType value) {
  assert(::jmc_auto::canbus::Steer_status__512_Sensor_errType_IsValid(value));
  set_has_sensor_err();
  sensor_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Steer_status__512.sensor_err)
}

// -------------------------------------------------------------------

// Ecu_status_1_515

// optional double speed = 1;
inline bool Ecu_status_1_515::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ecu_status_1_515::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ecu_status_1_515::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ecu_status_1_515::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Ecu_status_1_515::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.speed)
  return speed_;
}
inline void Ecu_status_1_515::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.speed)
}

// optional double acc_speed = 2;
inline bool Ecu_status_1_515::has_acc_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ecu_status_1_515::set_has_acc_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ecu_status_1_515::clear_has_acc_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ecu_status_1_515::clear_acc_speed() {
  acc_speed_ = 0;
  clear_has_acc_speed();
}
inline double Ecu_status_1_515::acc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.acc_speed)
  return acc_speed_;
}
inline void Ecu_status_1_515::set_acc_speed(double value) {
  set_has_acc_speed();
  acc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.acc_speed)
}

// optional .jmc_auto.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
inline bool Ecu_status_1_515::has_ctrl_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ecu_status_1_515::set_has_ctrl_sts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ecu_status_1_515::clear_has_ctrl_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ecu_status_1_515::clear_ctrl_sts() {
  ctrl_sts_ = 0;
  clear_has_ctrl_sts();
}
inline ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::ctrl_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.ctrl_sts)
  return static_cast< ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType >(ctrl_sts_);
}
inline void Ecu_status_1_515::set_ctrl_sts(::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType value) {
  assert(::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(value));
  set_has_ctrl_sts();
  ctrl_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.ctrl_sts)
}

// optional int32 chassis_sts = 4;
inline bool Ecu_status_1_515::has_chassis_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ecu_status_1_515::set_has_chassis_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ecu_status_1_515::clear_has_chassis_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ecu_status_1_515::clear_chassis_sts() {
  chassis_sts_ = 0;
  clear_has_chassis_sts();
}
inline ::google::protobuf::int32 Ecu_status_1_515::chassis_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.chassis_sts)
  return chassis_sts_;
}
inline void Ecu_status_1_515::set_chassis_sts(::google::protobuf::int32 value) {
  set_has_chassis_sts();
  chassis_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.chassis_sts)
}

// optional int32 chassis_err = 5;
inline bool Ecu_status_1_515::has_chassis_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ecu_status_1_515::set_has_chassis_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ecu_status_1_515::clear_has_chassis_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ecu_status_1_515::clear_chassis_err() {
  chassis_err_ = 0;
  clear_has_chassis_err();
}
inline ::google::protobuf::int32 Ecu_status_1_515::chassis_err() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_1_515.chassis_err)
  return chassis_err_;
}
inline void Ecu_status_1_515::set_chassis_err(::google::protobuf::int32 value) {
  set_has_chassis_err();
  chassis_err_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_1_515.chassis_err)
}

// -------------------------------------------------------------------

// Gear_status_514

// optional .jmc_auto.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
inline bool Gear_status_514::has_gear_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gear_status_514::set_has_gear_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gear_status_514::clear_has_gear_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gear_status_514::clear_gear_sts() {
  gear_sts_ = 1;
  clear_has_gear_sts();
}
inline ::jmc_auto::canbus::Gear_status_514_Gear_stsType Gear_status_514::gear_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gear_status_514.gear_sts)
  return static_cast< ::jmc_auto::canbus::Gear_status_514_Gear_stsType >(gear_sts_);
}
inline void Gear_status_514::set_gear_sts(::jmc_auto::canbus::Gear_status_514_Gear_stsType value) {
  assert(::jmc_auto::canbus::Gear_status_514_Gear_stsType_IsValid(value));
  set_has_gear_sts();
  gear_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gear_status_514.gear_sts)
}

// -------------------------------------------------------------------

// Ecu_status_3_517

// optional int32 ultrasound_dist_1 = 1;
inline bool Ecu_status_3_517::has_ultrasound_dist_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_1() {
  ultrasound_dist_1_ = 0;
  clear_has_ultrasound_dist_1();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_1() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_1)
  return ultrasound_dist_1_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_1(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_1();
  ultrasound_dist_1_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_1)
}

// optional int32 ultrasound_dist_2 = 2;
inline bool Ecu_status_3_517::has_ultrasound_dist_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_2() {
  ultrasound_dist_2_ = 0;
  clear_has_ultrasound_dist_2();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_2() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_2)
  return ultrasound_dist_2_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_2(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_2();
  ultrasound_dist_2_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_2)
}

// optional int32 ultrasound_dist_3 = 3;
inline bool Ecu_status_3_517::has_ultrasound_dist_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_3() {
  ultrasound_dist_3_ = 0;
  clear_has_ultrasound_dist_3();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_3() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_3)
  return ultrasound_dist_3_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_3(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_3();
  ultrasound_dist_3_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_3)
}

// optional int32 ultrasound_dist_4 = 4;
inline bool Ecu_status_3_517::has_ultrasound_dist_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_4() {
  ultrasound_dist_4_ = 0;
  clear_has_ultrasound_dist_4();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_4() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_4)
  return ultrasound_dist_4_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_4(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_4();
  ultrasound_dist_4_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_4)
}

// optional int32 ultrasound_dist_5 = 5;
inline bool Ecu_status_3_517::has_ultrasound_dist_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_5() {
  ultrasound_dist_5_ = 0;
  clear_has_ultrasound_dist_5();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_5() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_5)
  return ultrasound_dist_5_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_5(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_5();
  ultrasound_dist_5_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_5)
}

// optional int32 ultrasound_dist_6 = 6;
inline bool Ecu_status_3_517::has_ultrasound_dist_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_6() {
  ultrasound_dist_6_ = 0;
  clear_has_ultrasound_dist_6();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_6() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_6)
  return ultrasound_dist_6_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_6(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_6();
  ultrasound_dist_6_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_6)
}

// optional int32 ultrasound_dist_7 = 7;
inline bool Ecu_status_3_517::has_ultrasound_dist_7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_7() {
  ultrasound_dist_7_ = 0;
  clear_has_ultrasound_dist_7();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_7() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_7)
  return ultrasound_dist_7_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_7(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_7();
  ultrasound_dist_7_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_7)
}

// optional int32 ultrasound_dist_8 = 8;
inline bool Ecu_status_3_517::has_ultrasound_dist_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ecu_status_3_517::set_has_ultrasound_dist_8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ecu_status_3_517::clear_has_ultrasound_dist_8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ecu_status_3_517::clear_ultrasound_dist_8() {
  ultrasound_dist_8_ = 0;
  clear_has_ultrasound_dist_8();
}
inline ::google::protobuf::int32 Ecu_status_3_517::ultrasound_dist_8() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_8)
  return ultrasound_dist_8_;
}
inline void Ecu_status_3_517::set_ultrasound_dist_8(::google::protobuf::int32 value) {
  set_has_ultrasound_dist_8();
  ultrasound_dist_8_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_3_517.ultrasound_dist_8)
}

// -------------------------------------------------------------------

// Ecu_status_2_516

// optional int32 battery_remaining_capacity = 1;
inline bool Ecu_status_2_516::has_battery_remaining_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ecu_status_2_516::set_has_battery_remaining_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ecu_status_2_516::clear_has_battery_remaining_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ecu_status_2_516::clear_battery_remaining_capacity() {
  battery_remaining_capacity_ = 0;
  clear_has_battery_remaining_capacity();
}
inline ::google::protobuf::int32 Ecu_status_2_516::battery_remaining_capacity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_remaining_capacity)
  return battery_remaining_capacity_;
}
inline void Ecu_status_2_516::set_battery_remaining_capacity(::google::protobuf::int32 value) {
  set_has_battery_remaining_capacity();
  battery_remaining_capacity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_remaining_capacity)
}

// optional double battery_voltage = 2;
inline bool Ecu_status_2_516::has_battery_voltage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ecu_status_2_516::set_has_battery_voltage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ecu_status_2_516::clear_has_battery_voltage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ecu_status_2_516::clear_battery_voltage() {
  battery_voltage_ = 0;
  clear_has_battery_voltage();
}
inline double Ecu_status_2_516::battery_voltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_voltage)
  return battery_voltage_;
}
inline void Ecu_status_2_516::set_battery_voltage(double value) {
  set_has_battery_voltage();
  battery_voltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_voltage)
}

// optional double battery_current = 3;
inline bool Ecu_status_2_516::has_battery_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ecu_status_2_516::set_has_battery_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ecu_status_2_516::clear_has_battery_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ecu_status_2_516::clear_battery_current() {
  battery_current_ = 0;
  clear_has_battery_current();
}
inline double Ecu_status_2_516::battery_current() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_current)
  return battery_current_;
}
inline void Ecu_status_2_516::set_battery_current(double value) {
  set_has_battery_current();
  battery_current_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_current)
}

// optional int32 battery_temperature = 4;
inline bool Ecu_status_2_516::has_battery_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ecu_status_2_516::set_has_battery_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ecu_status_2_516::clear_has_battery_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ecu_status_2_516::clear_battery_temperature() {
  battery_temperature_ = 0;
  clear_has_battery_temperature();
}
inline ::google::protobuf::int32 Ecu_status_2_516::battery_temperature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ecu_status_2_516.battery_temperature)
  return battery_temperature_;
}
inline void Ecu_status_2_516::set_battery_temperature(::google::protobuf::int32 value) {
  set_has_battery_temperature();
  battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ecu_status_2_516.battery_temperature)
}

// -------------------------------------------------------------------

// Ch

// optional .jmc_auto.canbus.Control_command_115 control_command_115 = 1;
inline bool Ch::has_control_command_115() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ch::set_has_control_command_115() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ch::clear_has_control_command_115() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ch::clear_control_command_115() {
  if (control_command_115_ != NULL) control_command_115_->::jmc_auto::canbus::Control_command_115::Clear();
  clear_has_control_command_115();
}
inline const ::jmc_auto::canbus::Control_command_115& Ch::control_command_115() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.control_command_115)
  return control_command_115_ != NULL ? *control_command_115_
                         : *::jmc_auto::canbus::Control_command_115::internal_default_instance();
}
inline ::jmc_auto::canbus::Control_command_115* Ch::mutable_control_command_115() {
  set_has_control_command_115();
  if (control_command_115_ == NULL) {
    control_command_115_ = new ::jmc_auto::canbus::Control_command_115;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.control_command_115)
  return control_command_115_;
}
inline ::jmc_auto::canbus::Control_command_115* Ch::release_control_command_115() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.control_command_115)
  clear_has_control_command_115();
  ::jmc_auto::canbus::Control_command_115* temp = control_command_115_;
  control_command_115_ = NULL;
  return temp;
}
inline void Ch::set_allocated_control_command_115(::jmc_auto::canbus::Control_command_115* control_command_115) {
  delete control_command_115_;
  control_command_115_ = control_command_115;
  if (control_command_115) {
    set_has_control_command_115();
  } else {
    clear_has_control_command_115();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.control_command_115)
}

// optional .jmc_auto.canbus.Gear_command_114 gear_command_114 = 2;
inline bool Ch::has_gear_command_114() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ch::set_has_gear_command_114() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ch::clear_has_gear_command_114() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ch::clear_gear_command_114() {
  if (gear_command_114_ != NULL) gear_command_114_->::jmc_auto::canbus::Gear_command_114::Clear();
  clear_has_gear_command_114();
}
inline const ::jmc_auto::canbus::Gear_command_114& Ch::gear_command_114() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.gear_command_114)
  return gear_command_114_ != NULL ? *gear_command_114_
                         : *::jmc_auto::canbus::Gear_command_114::internal_default_instance();
}
inline ::jmc_auto::canbus::Gear_command_114* Ch::mutable_gear_command_114() {
  set_has_gear_command_114();
  if (gear_command_114_ == NULL) {
    gear_command_114_ = new ::jmc_auto::canbus::Gear_command_114;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.gear_command_114)
  return gear_command_114_;
}
inline ::jmc_auto::canbus::Gear_command_114* Ch::release_gear_command_114() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.gear_command_114)
  clear_has_gear_command_114();
  ::jmc_auto::canbus::Gear_command_114* temp = gear_command_114_;
  gear_command_114_ = NULL;
  return temp;
}
inline void Ch::set_allocated_gear_command_114(::jmc_auto::canbus::Gear_command_114* gear_command_114) {
  delete gear_command_114_;
  gear_command_114_ = gear_command_114;
  if (gear_command_114) {
    set_has_gear_command_114();
  } else {
    clear_has_gear_command_114();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.gear_command_114)
}

// optional .jmc_auto.canbus.Brake_command_111 brake_command_111 = 3;
inline bool Ch::has_brake_command_111() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ch::set_has_brake_command_111() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ch::clear_has_brake_command_111() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ch::clear_brake_command_111() {
  if (brake_command_111_ != NULL) brake_command_111_->::jmc_auto::canbus::Brake_command_111::Clear();
  clear_has_brake_command_111();
}
inline const ::jmc_auto::canbus::Brake_command_111& Ch::brake_command_111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.brake_command_111)
  return brake_command_111_ != NULL ? *brake_command_111_
                         : *::jmc_auto::canbus::Brake_command_111::internal_default_instance();
}
inline ::jmc_auto::canbus::Brake_command_111* Ch::mutable_brake_command_111() {
  set_has_brake_command_111();
  if (brake_command_111_ == NULL) {
    brake_command_111_ = new ::jmc_auto::canbus::Brake_command_111;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.brake_command_111)
  return brake_command_111_;
}
inline ::jmc_auto::canbus::Brake_command_111* Ch::release_brake_command_111() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.brake_command_111)
  clear_has_brake_command_111();
  ::jmc_auto::canbus::Brake_command_111* temp = brake_command_111_;
  brake_command_111_ = NULL;
  return temp;
}
inline void Ch::set_allocated_brake_command_111(::jmc_auto::canbus::Brake_command_111* brake_command_111) {
  delete brake_command_111_;
  brake_command_111_ = brake_command_111;
  if (brake_command_111) {
    set_has_brake_command_111();
  } else {
    clear_has_brake_command_111();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.brake_command_111)
}

// optional .jmc_auto.canbus.Throttle_command_110 throttle_command_110 = 4;
inline bool Ch::has_throttle_command_110() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ch::set_has_throttle_command_110() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ch::clear_has_throttle_command_110() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ch::clear_throttle_command_110() {
  if (throttle_command_110_ != NULL) throttle_command_110_->::jmc_auto::canbus::Throttle_command_110::Clear();
  clear_has_throttle_command_110();
}
inline const ::jmc_auto::canbus::Throttle_command_110& Ch::throttle_command_110() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.throttle_command_110)
  return throttle_command_110_ != NULL ? *throttle_command_110_
                         : *::jmc_auto::canbus::Throttle_command_110::internal_default_instance();
}
inline ::jmc_auto::canbus::Throttle_command_110* Ch::mutable_throttle_command_110() {
  set_has_throttle_command_110();
  if (throttle_command_110_ == NULL) {
    throttle_command_110_ = new ::jmc_auto::canbus::Throttle_command_110;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.throttle_command_110)
  return throttle_command_110_;
}
inline ::jmc_auto::canbus::Throttle_command_110* Ch::release_throttle_command_110() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.throttle_command_110)
  clear_has_throttle_command_110();
  ::jmc_auto::canbus::Throttle_command_110* temp = throttle_command_110_;
  throttle_command_110_ = NULL;
  return temp;
}
inline void Ch::set_allocated_throttle_command_110(::jmc_auto::canbus::Throttle_command_110* throttle_command_110) {
  delete throttle_command_110_;
  throttle_command_110_ = throttle_command_110;
  if (throttle_command_110) {
    set_has_throttle_command_110();
  } else {
    clear_has_throttle_command_110();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.throttle_command_110)
}

// optional .jmc_auto.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
inline bool Ch::has_turnsignal_command_113() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ch::set_has_turnsignal_command_113() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ch::clear_has_turnsignal_command_113() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ch::clear_turnsignal_command_113() {
  if (turnsignal_command_113_ != NULL) turnsignal_command_113_->::jmc_auto::canbus::Turnsignal_command_113::Clear();
  clear_has_turnsignal_command_113();
}
inline const ::jmc_auto::canbus::Turnsignal_command_113& Ch::turnsignal_command_113() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.turnsignal_command_113)
  return turnsignal_command_113_ != NULL ? *turnsignal_command_113_
                         : *::jmc_auto::canbus::Turnsignal_command_113::internal_default_instance();
}
inline ::jmc_auto::canbus::Turnsignal_command_113* Ch::mutable_turnsignal_command_113() {
  set_has_turnsignal_command_113();
  if (turnsignal_command_113_ == NULL) {
    turnsignal_command_113_ = new ::jmc_auto::canbus::Turnsignal_command_113;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.turnsignal_command_113)
  return turnsignal_command_113_;
}
inline ::jmc_auto::canbus::Turnsignal_command_113* Ch::release_turnsignal_command_113() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.turnsignal_command_113)
  clear_has_turnsignal_command_113();
  ::jmc_auto::canbus::Turnsignal_command_113* temp = turnsignal_command_113_;
  turnsignal_command_113_ = NULL;
  return temp;
}
inline void Ch::set_allocated_turnsignal_command_113(::jmc_auto::canbus::Turnsignal_command_113* turnsignal_command_113) {
  delete turnsignal_command_113_;
  turnsignal_command_113_ = turnsignal_command_113;
  if (turnsignal_command_113) {
    set_has_turnsignal_command_113();
  } else {
    clear_has_turnsignal_command_113();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.turnsignal_command_113)
}

// optional .jmc_auto.canbus.Steer_command_112 steer_command_112 = 6;
inline bool Ch::has_steer_command_112() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ch::set_has_steer_command_112() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ch::clear_has_steer_command_112() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ch::clear_steer_command_112() {
  if (steer_command_112_ != NULL) steer_command_112_->::jmc_auto::canbus::Steer_command_112::Clear();
  clear_has_steer_command_112();
}
inline const ::jmc_auto::canbus::Steer_command_112& Ch::steer_command_112() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.steer_command_112)
  return steer_command_112_ != NULL ? *steer_command_112_
                         : *::jmc_auto::canbus::Steer_command_112::internal_default_instance();
}
inline ::jmc_auto::canbus::Steer_command_112* Ch::mutable_steer_command_112() {
  set_has_steer_command_112();
  if (steer_command_112_ == NULL) {
    steer_command_112_ = new ::jmc_auto::canbus::Steer_command_112;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.steer_command_112)
  return steer_command_112_;
}
inline ::jmc_auto::canbus::Steer_command_112* Ch::release_steer_command_112() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.steer_command_112)
  clear_has_steer_command_112();
  ::jmc_auto::canbus::Steer_command_112* temp = steer_command_112_;
  steer_command_112_ = NULL;
  return temp;
}
inline void Ch::set_allocated_steer_command_112(::jmc_auto::canbus::Steer_command_112* steer_command_112) {
  delete steer_command_112_;
  steer_command_112_ = steer_command_112;
  if (steer_command_112) {
    set_has_steer_command_112();
  } else {
    clear_has_steer_command_112();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.steer_command_112)
}

// optional .jmc_auto.canbus.Brake_status__511 brake_status__511 = 7;
inline bool Ch::has_brake_status__511() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ch::set_has_brake_status__511() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ch::clear_has_brake_status__511() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ch::clear_brake_status__511() {
  if (brake_status__511_ != NULL) brake_status__511_->::jmc_auto::canbus::Brake_status__511::Clear();
  clear_has_brake_status__511();
}
inline const ::jmc_auto::canbus::Brake_status__511& Ch::brake_status__511() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.brake_status__511)
  return brake_status__511_ != NULL ? *brake_status__511_
                         : *::jmc_auto::canbus::Brake_status__511::internal_default_instance();
}
inline ::jmc_auto::canbus::Brake_status__511* Ch::mutable_brake_status__511() {
  set_has_brake_status__511();
  if (brake_status__511_ == NULL) {
    brake_status__511_ = new ::jmc_auto::canbus::Brake_status__511;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.brake_status__511)
  return brake_status__511_;
}
inline ::jmc_auto::canbus::Brake_status__511* Ch::release_brake_status__511() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.brake_status__511)
  clear_has_brake_status__511();
  ::jmc_auto::canbus::Brake_status__511* temp = brake_status__511_;
  brake_status__511_ = NULL;
  return temp;
}
inline void Ch::set_allocated_brake_status__511(::jmc_auto::canbus::Brake_status__511* brake_status__511) {
  delete brake_status__511_;
  brake_status__511_ = brake_status__511;
  if (brake_status__511) {
    set_has_brake_status__511();
  } else {
    clear_has_brake_status__511();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.brake_status__511)
}

// optional .jmc_auto.canbus.Throttle_status__510 throttle_status__510 = 8;
inline bool Ch::has_throttle_status__510() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ch::set_has_throttle_status__510() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ch::clear_has_throttle_status__510() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ch::clear_throttle_status__510() {
  if (throttle_status__510_ != NULL) throttle_status__510_->::jmc_auto::canbus::Throttle_status__510::Clear();
  clear_has_throttle_status__510();
}
inline const ::jmc_auto::canbus::Throttle_status__510& Ch::throttle_status__510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.throttle_status__510)
  return throttle_status__510_ != NULL ? *throttle_status__510_
                         : *::jmc_auto::canbus::Throttle_status__510::internal_default_instance();
}
inline ::jmc_auto::canbus::Throttle_status__510* Ch::mutable_throttle_status__510() {
  set_has_throttle_status__510();
  if (throttle_status__510_ == NULL) {
    throttle_status__510_ = new ::jmc_auto::canbus::Throttle_status__510;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.throttle_status__510)
  return throttle_status__510_;
}
inline ::jmc_auto::canbus::Throttle_status__510* Ch::release_throttle_status__510() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.throttle_status__510)
  clear_has_throttle_status__510();
  ::jmc_auto::canbus::Throttle_status__510* temp = throttle_status__510_;
  throttle_status__510_ = NULL;
  return temp;
}
inline void Ch::set_allocated_throttle_status__510(::jmc_auto::canbus::Throttle_status__510* throttle_status__510) {
  delete throttle_status__510_;
  throttle_status__510_ = throttle_status__510;
  if (throttle_status__510) {
    set_has_throttle_status__510();
  } else {
    clear_has_throttle_status__510();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.throttle_status__510)
}

// optional .jmc_auto.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
inline bool Ch::has_turnsignal_status__513() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ch::set_has_turnsignal_status__513() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ch::clear_has_turnsignal_status__513() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ch::clear_turnsignal_status__513() {
  if (turnsignal_status__513_ != NULL) turnsignal_status__513_->::jmc_auto::canbus::Turnsignal_status__513::Clear();
  clear_has_turnsignal_status__513();
}
inline const ::jmc_auto::canbus::Turnsignal_status__513& Ch::turnsignal_status__513() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.turnsignal_status__513)
  return turnsignal_status__513_ != NULL ? *turnsignal_status__513_
                         : *::jmc_auto::canbus::Turnsignal_status__513::internal_default_instance();
}
inline ::jmc_auto::canbus::Turnsignal_status__513* Ch::mutable_turnsignal_status__513() {
  set_has_turnsignal_status__513();
  if (turnsignal_status__513_ == NULL) {
    turnsignal_status__513_ = new ::jmc_auto::canbus::Turnsignal_status__513;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.turnsignal_status__513)
  return turnsignal_status__513_;
}
inline ::jmc_auto::canbus::Turnsignal_status__513* Ch::release_turnsignal_status__513() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.turnsignal_status__513)
  clear_has_turnsignal_status__513();
  ::jmc_auto::canbus::Turnsignal_status__513* temp = turnsignal_status__513_;
  turnsignal_status__513_ = NULL;
  return temp;
}
inline void Ch::set_allocated_turnsignal_status__513(::jmc_auto::canbus::Turnsignal_status__513* turnsignal_status__513) {
  delete turnsignal_status__513_;
  turnsignal_status__513_ = turnsignal_status__513;
  if (turnsignal_status__513) {
    set_has_turnsignal_status__513();
  } else {
    clear_has_turnsignal_status__513();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.turnsignal_status__513)
}

// optional .jmc_auto.canbus.Steer_status__512 steer_status__512 = 10;
inline bool Ch::has_steer_status__512() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ch::set_has_steer_status__512() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ch::clear_has_steer_status__512() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ch::clear_steer_status__512() {
  if (steer_status__512_ != NULL) steer_status__512_->::jmc_auto::canbus::Steer_status__512::Clear();
  clear_has_steer_status__512();
}
inline const ::jmc_auto::canbus::Steer_status__512& Ch::steer_status__512() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.steer_status__512)
  return steer_status__512_ != NULL ? *steer_status__512_
                         : *::jmc_auto::canbus::Steer_status__512::internal_default_instance();
}
inline ::jmc_auto::canbus::Steer_status__512* Ch::mutable_steer_status__512() {
  set_has_steer_status__512();
  if (steer_status__512_ == NULL) {
    steer_status__512_ = new ::jmc_auto::canbus::Steer_status__512;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.steer_status__512)
  return steer_status__512_;
}
inline ::jmc_auto::canbus::Steer_status__512* Ch::release_steer_status__512() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.steer_status__512)
  clear_has_steer_status__512();
  ::jmc_auto::canbus::Steer_status__512* temp = steer_status__512_;
  steer_status__512_ = NULL;
  return temp;
}
inline void Ch::set_allocated_steer_status__512(::jmc_auto::canbus::Steer_status__512* steer_status__512) {
  delete steer_status__512_;
  steer_status__512_ = steer_status__512;
  if (steer_status__512) {
    set_has_steer_status__512();
  } else {
    clear_has_steer_status__512();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.steer_status__512)
}

// optional .jmc_auto.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
inline bool Ch::has_ecu_status_1_515() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ch::set_has_ecu_status_1_515() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ch::clear_has_ecu_status_1_515() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ch::clear_ecu_status_1_515() {
  if (ecu_status_1_515_ != NULL) ecu_status_1_515_->::jmc_auto::canbus::Ecu_status_1_515::Clear();
  clear_has_ecu_status_1_515();
}
inline const ::jmc_auto::canbus::Ecu_status_1_515& Ch::ecu_status_1_515() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_1_515)
  return ecu_status_1_515_ != NULL ? *ecu_status_1_515_
                         : *::jmc_auto::canbus::Ecu_status_1_515::internal_default_instance();
}
inline ::jmc_auto::canbus::Ecu_status_1_515* Ch::mutable_ecu_status_1_515() {
  set_has_ecu_status_1_515();
  if (ecu_status_1_515_ == NULL) {
    ecu_status_1_515_ = new ::jmc_auto::canbus::Ecu_status_1_515;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_1_515)
  return ecu_status_1_515_;
}
inline ::jmc_auto::canbus::Ecu_status_1_515* Ch::release_ecu_status_1_515() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_1_515)
  clear_has_ecu_status_1_515();
  ::jmc_auto::canbus::Ecu_status_1_515* temp = ecu_status_1_515_;
  ecu_status_1_515_ = NULL;
  return temp;
}
inline void Ch::set_allocated_ecu_status_1_515(::jmc_auto::canbus::Ecu_status_1_515* ecu_status_1_515) {
  delete ecu_status_1_515_;
  ecu_status_1_515_ = ecu_status_1_515;
  if (ecu_status_1_515) {
    set_has_ecu_status_1_515();
  } else {
    clear_has_ecu_status_1_515();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_1_515)
}

// optional .jmc_auto.canbus.Gear_status_514 gear_status_514 = 12;
inline bool Ch::has_gear_status_514() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ch::set_has_gear_status_514() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ch::clear_has_gear_status_514() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ch::clear_gear_status_514() {
  if (gear_status_514_ != NULL) gear_status_514_->::jmc_auto::canbus::Gear_status_514::Clear();
  clear_has_gear_status_514();
}
inline const ::jmc_auto::canbus::Gear_status_514& Ch::gear_status_514() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.gear_status_514)
  return gear_status_514_ != NULL ? *gear_status_514_
                         : *::jmc_auto::canbus::Gear_status_514::internal_default_instance();
}
inline ::jmc_auto::canbus::Gear_status_514* Ch::mutable_gear_status_514() {
  set_has_gear_status_514();
  if (gear_status_514_ == NULL) {
    gear_status_514_ = new ::jmc_auto::canbus::Gear_status_514;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.gear_status_514)
  return gear_status_514_;
}
inline ::jmc_auto::canbus::Gear_status_514* Ch::release_gear_status_514() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.gear_status_514)
  clear_has_gear_status_514();
  ::jmc_auto::canbus::Gear_status_514* temp = gear_status_514_;
  gear_status_514_ = NULL;
  return temp;
}
inline void Ch::set_allocated_gear_status_514(::jmc_auto::canbus::Gear_status_514* gear_status_514) {
  delete gear_status_514_;
  gear_status_514_ = gear_status_514;
  if (gear_status_514) {
    set_has_gear_status_514();
  } else {
    clear_has_gear_status_514();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.gear_status_514)
}

// optional .jmc_auto.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
inline bool Ch::has_ecu_status_3_517() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ch::set_has_ecu_status_3_517() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ch::clear_has_ecu_status_3_517() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ch::clear_ecu_status_3_517() {
  if (ecu_status_3_517_ != NULL) ecu_status_3_517_->::jmc_auto::canbus::Ecu_status_3_517::Clear();
  clear_has_ecu_status_3_517();
}
inline const ::jmc_auto::canbus::Ecu_status_3_517& Ch::ecu_status_3_517() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_3_517)
  return ecu_status_3_517_ != NULL ? *ecu_status_3_517_
                         : *::jmc_auto::canbus::Ecu_status_3_517::internal_default_instance();
}
inline ::jmc_auto::canbus::Ecu_status_3_517* Ch::mutable_ecu_status_3_517() {
  set_has_ecu_status_3_517();
  if (ecu_status_3_517_ == NULL) {
    ecu_status_3_517_ = new ::jmc_auto::canbus::Ecu_status_3_517;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_3_517)
  return ecu_status_3_517_;
}
inline ::jmc_auto::canbus::Ecu_status_3_517* Ch::release_ecu_status_3_517() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_3_517)
  clear_has_ecu_status_3_517();
  ::jmc_auto::canbus::Ecu_status_3_517* temp = ecu_status_3_517_;
  ecu_status_3_517_ = NULL;
  return temp;
}
inline void Ch::set_allocated_ecu_status_3_517(::jmc_auto::canbus::Ecu_status_3_517* ecu_status_3_517) {
  delete ecu_status_3_517_;
  ecu_status_3_517_ = ecu_status_3_517;
  if (ecu_status_3_517) {
    set_has_ecu_status_3_517();
  } else {
    clear_has_ecu_status_3_517();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_3_517)
}

// optional .jmc_auto.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
inline bool Ch::has_ecu_status_2_516() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ch::set_has_ecu_status_2_516() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ch::clear_has_ecu_status_2_516() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ch::clear_ecu_status_2_516() {
  if (ecu_status_2_516_ != NULL) ecu_status_2_516_->::jmc_auto::canbus::Ecu_status_2_516::Clear();
  clear_has_ecu_status_2_516();
}
inline const ::jmc_auto::canbus::Ecu_status_2_516& Ch::ecu_status_2_516() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ch.ecu_status_2_516)
  return ecu_status_2_516_ != NULL ? *ecu_status_2_516_
                         : *::jmc_auto::canbus::Ecu_status_2_516::internal_default_instance();
}
inline ::jmc_auto::canbus::Ecu_status_2_516* Ch::mutable_ecu_status_2_516() {
  set_has_ecu_status_2_516();
  if (ecu_status_2_516_ == NULL) {
    ecu_status_2_516_ = new ::jmc_auto::canbus::Ecu_status_2_516;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Ch.ecu_status_2_516)
  return ecu_status_2_516_;
}
inline ::jmc_auto::canbus::Ecu_status_2_516* Ch::release_ecu_status_2_516() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Ch.ecu_status_2_516)
  clear_has_ecu_status_2_516();
  ::jmc_auto::canbus::Ecu_status_2_516* temp = ecu_status_2_516_;
  ecu_status_2_516_ = NULL;
  return temp;
}
inline void Ch::set_allocated_ecu_status_2_516(::jmc_auto::canbus::Ecu_status_2_516* ecu_status_2_516) {
  delete ecu_status_2_516_;
  ecu_status_2_516_ = ecu_status_2_516;
  if (ecu_status_2_516) {
    set_has_ecu_status_2_516();
  } else {
    clear_has_ecu_status_2_516();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Ch.ecu_status_2_516)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType>() {
  return ::jmc_auto::canbus::Control_command_115_Ctrl_cmdType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gear_command_114_Gear_cmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gear_command_114_Gear_cmdType>() {
  return ::jmc_auto::canbus::Gear_command_114_Gear_cmdType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType>() {
  return ::jmc_auto::canbus::Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType>() {
  return ::jmc_auto::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType>() {
  return ::jmc_auto::canbus::Turnsignal_command_113_Turn_signal_cmdType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType>() {
  return ::jmc_auto::canbus::Steer_command_112_Steer_angle_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType>() {
  return ::jmc_auto::canbus::Brake_status__511_Brake_pedal_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Brake_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Brake_errType>() {
  return ::jmc_auto::canbus::Brake_status__511_Brake_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType>() {
  return ::jmc_auto::canbus::Brake_status__511_Emergency_btn_envType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Front_bump_envType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Front_bump_envType>() {
  return ::jmc_auto::canbus::Brake_status__511_Front_bump_envType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Back_bump_envType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Back_bump_envType>() {
  return ::jmc_auto::canbus::Brake_status__511_Back_bump_envType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Brake_status__511_Overspd_envType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Brake_status__511_Overspd_envType>() {
  return ::jmc_auto::canbus::Brake_status__511_Overspd_envType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType>() {
  return ::jmc_auto::canbus::Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType>() {
  return ::jmc_auto::canbus::Throttle_status__510_Drive_motor_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType>() {
  return ::jmc_auto::canbus::Throttle_status__510_Battery_bms_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType>() {
  return ::jmc_auto::canbus::Turnsignal_status__513_Turn_signal_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType>() {
  return ::jmc_auto::canbus::Steer_status__512_Steer_angle_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Steer_status__512_Steer_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Steer_status__512_Steer_errType>() {
  return ::jmc_auto::canbus::Steer_status__512_Steer_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Steer_status__512_Sensor_errType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Steer_status__512_Sensor_errType>() {
  return ::jmc_auto::canbus::Steer_status__512_Sensor_errType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType>() {
  return ::jmc_auto::canbus::Ecu_status_1_515_Ctrl_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gear_status_514_Gear_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gear_status_514_Gear_stsType>() {
  return ::jmc_auto::canbus::Gear_status_514_Gear_stsType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fch_2eproto__INCLUDED
