/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_adapterconfig_h
#define impl_type_adapterconfig_h





#include "impl_type_mode.h"
#include "impl_type_bool.h"
#include "impl_type_int32.h"
#include "impl_type_messagetype.h"


struct AdapterConfig {
    ::MessageType type;
    
    ::Mode mode;
    
    ::Int32 message_history_limit;
    
    ::Bool latch;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(type);
        fun(mode);
        fun(message_history_limit);
        fun(latch);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(type);
        fun(mode);
        fun(message_history_limit);
        fun(latch);
    }

    bool operator == (const ::AdapterConfig& t) const {
        return (type == t.type) && (mode == t.mode) && (message_history_limit == t.message_history_limit) && (latch == t.latch);
    }
};


#endif // impl_type_adapterconfig_h
