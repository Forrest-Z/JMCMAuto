/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_monitormessageitem_h
#define impl_type_monitormessageitem_h




#include "impl_type_string.h"
#include "impl_type_loglevel.h"
#include "impl_type_messagesource.h"


struct MonitorMessageItem {
    ::MessageSource source;
    
    ::String msg;
    
    ::LogLevel log_level;
    

    static bool IsPlane()
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(source);
        fun(msg);
        fun(log_level);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(source);
        fun(msg);
        fun(log_level);
    }

    bool operator == (const ::MonitorMessageItem& t) const {
        return (source == t.source) && (msg == t.msg) && (log_level == t.log_level);
    }
};


#endif // impl_type_monitormessageitem_h
