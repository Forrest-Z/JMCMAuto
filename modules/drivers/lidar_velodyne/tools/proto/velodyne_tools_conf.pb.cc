// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace lidar_velodyne {
class VelodyneToolsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VelodyneToolsConf> {
} _VelodyneToolsConf_default_instance_;

namespace protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, pcd_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, stamp_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, pose_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, skip_static_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, child_frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, use_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, save_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, file_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneToolsConf, module_conf_),
  0,
  1,
  2,
  7,
  3,
  8,
  4,
  5,
  6,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(VelodyneToolsConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VelodyneToolsConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _VelodyneToolsConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  VelodyneToolsConf::_default_child_frame_id_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::drivers::lidar_velodyne::protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  VelodyneToolsConf::_default_child_frame_id_.DefaultConstruct();
  *VelodyneToolsConf::_default_child_frame_id_.get_mutable() = ::std::string("velodyne", 8);
  _VelodyneToolsConf_default_instance_.DefaultConstruct();
  _VelodyneToolsConf_default_instance_.get_mutable()->module_conf_ = const_cast< ::jmc_auto::drivers::lidar_velodyne::VelodyneConf*>(
      ::jmc_auto::drivers::lidar_velodyne::VelodyneConf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nDmodules/drivers/lidar_velodyne/tools/p"
      "roto/velodyne_tools_conf.proto\022\037jmc_auto"
      ".drivers.lidar_velodyne\0328modules/drivers"
      "/lidar_velodyne/proto/velodyne_conf.prot"
      "o\"\231\002\n\021VelodyneToolsConf\022\022\n\npcd_folder\030\001 "
      "\001(\t\022\022\n\nstamp_file\030\002 \001(\t\022\021\n\tpose_file\030\003 \001"
      "(\t\022!\n\022skip_static_frames\030\004 \001(\010:\005false\022 \n"
      "\016child_frame_id\030\005 \001(\t:\010velodyne\022\026\n\007use_s"
      "eq\030\006 \001(\010:\005false\022\023\n\013save_folder\030\007 \001(\t\022\023\n\013"
      "file_prefix\030\010 \001(\t\022B\n\013module_conf\030e \001(\0132-"
      ".jmc_auto.drivers.lidar_velodyne.Velodyn"
      "eConf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto", &protobuf_RegisterTypes);
  ::jmc_auto::drivers::lidar_velodyne::protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> VelodyneToolsConf::_default_child_frame_id_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelodyneToolsConf::kPcdFolderFieldNumber;
const int VelodyneToolsConf::kStampFileFieldNumber;
const int VelodyneToolsConf::kPoseFileFieldNumber;
const int VelodyneToolsConf::kSkipStaticFramesFieldNumber;
const int VelodyneToolsConf::kChildFrameIdFieldNumber;
const int VelodyneToolsConf::kUseSeqFieldNumber;
const int VelodyneToolsConf::kSaveFolderFieldNumber;
const int VelodyneToolsConf::kFilePrefixFieldNumber;
const int VelodyneToolsConf::kModuleConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelodyneToolsConf::VelodyneToolsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
}
VelodyneToolsConf::VelodyneToolsConf(const VelodyneToolsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pcd_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcd_folder()) {
    pcd_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_folder_);
  }
  stamp_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stamp_file()) {
    stamp_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stamp_file_);
  }
  pose_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pose_file()) {
    pose_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pose_file_);
  }
  child_frame_id_.UnsafeSetDefault(&VelodyneToolsConf::_default_child_frame_id_.get());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&VelodyneToolsConf::_default_child_frame_id_.get(), from.child_frame_id_);
  }
  save_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_folder()) {
    save_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_folder_);
  }
  file_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_prefix()) {
    file_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_prefix_);
  }
  if (from.has_module_conf()) {
    module_conf_ = new ::jmc_auto::drivers::lidar_velodyne::VelodyneConf(*from.module_conf_);
  } else {
    module_conf_ = NULL;
  }
  ::memcpy(&skip_static_frames_, &from.skip_static_frames_,
    reinterpret_cast<char*>(&use_seq_) -
    reinterpret_cast<char*>(&skip_static_frames_) + sizeof(use_seq_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
}

void VelodyneToolsConf::SharedCtor() {
  _cached_size_ = 0;
  pcd_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stamp_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.UnsafeSetDefault(&VelodyneToolsConf::_default_child_frame_id_.get());
  save_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_conf_, 0, reinterpret_cast<char*>(&use_seq_) -
    reinterpret_cast<char*>(&module_conf_) + sizeof(use_seq_));
}

VelodyneToolsConf::~VelodyneToolsConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  SharedDtor();
}

void VelodyneToolsConf::SharedDtor() {
  pcd_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stamp_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.DestroyNoArena(&VelodyneToolsConf::_default_child_frame_id_.get());
  save_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete module_conf_;
  }
}

void VelodyneToolsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelodyneToolsConf::descriptor() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VelodyneToolsConf& VelodyneToolsConf::default_instance() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

VelodyneToolsConf* VelodyneToolsConf::New(::google::protobuf::Arena* arena) const {
  VelodyneToolsConf* n = new VelodyneToolsConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VelodyneToolsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_pcd_folder()) {
      GOOGLE_DCHECK(!pcd_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcd_folder_.UnsafeRawStringPointer())->clear();
    }
    if (has_stamp_file()) {
      GOOGLE_DCHECK(!stamp_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stamp_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_pose_file()) {
      GOOGLE_DCHECK(!pose_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pose_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_child_frame_id()) {
      GOOGLE_DCHECK(!child_frame_id_.IsDefault(&VelodyneToolsConf::_default_child_frame_id_.get()));
      (*child_frame_id_.UnsafeRawStringPointer())->assign(*&VelodyneToolsConf::_default_child_frame_id_.get());
    }
    if (has_save_folder()) {
      GOOGLE_DCHECK(!save_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*save_folder_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_prefix()) {
      GOOGLE_DCHECK(!file_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_module_conf()) {
      GOOGLE_DCHECK(module_conf_ != NULL);
      module_conf_->::jmc_auto::drivers::lidar_velodyne::VelodyneConf::Clear();
    }
  }
  skip_static_frames_ = false;
  use_seq_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VelodyneToolsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pcd_folder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_folder().data(), this->pcd_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stamp_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stamp_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stamp_file().data(), this->stamp_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pose_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pose_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pose_file().data(), this->pose_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_static_frames = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_skip_static_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_static_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string child_frame_id = 5 [default = "velodyne"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), this->child_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_seq = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_use_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string save_folder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_folder().data(), this->save_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_prefix = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_prefix().data(), this->file_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  return false;
#undef DO_
}

void VelodyneToolsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pcd_folder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_folder().data(), this->pcd_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pcd_folder(), output);
  }

  // optional string stamp_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stamp_file().data(), this->stamp_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stamp_file(), output);
  }

  // optional string pose_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pose_file().data(), this->pose_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pose_file(), output);
  }

  // optional bool skip_static_frames = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skip_static_frames(), output);
  }

  // optional string child_frame_id = 5 [default = "velodyne"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->child_frame_id(), output);
  }

  // optional bool use_seq = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_seq(), output);
  }

  // optional string save_folder = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_folder().data(), this->save_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->save_folder(), output);
  }

  // optional string file_prefix = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_prefix().data(), this->file_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->file_prefix(), output);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->module_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
}

::google::protobuf::uint8* VelodyneToolsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pcd_folder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_folder().data(), this->pcd_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pcd_folder(), target);
  }

  // optional string stamp_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stamp_file().data(), this->stamp_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stamp_file(), target);
  }

  // optional string pose_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pose_file().data(), this->pose_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pose_file(), target);
  }

  // optional bool skip_static_frames = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skip_static_frames(), target);
  }

  // optional string child_frame_id = 5 [default = "velodyne"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->child_frame_id(), target);
  }

  // optional bool use_seq = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_seq(), target);
  }

  // optional string save_folder = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_folder().data(), this->save_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->save_folder(), target);
  }

  // optional string file_prefix = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_prefix().data(), this->file_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->file_prefix(), target);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->module_conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  return target;
}

size_t VelodyneToolsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string pcd_folder = 1;
    if (has_pcd_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcd_folder());
    }

    // optional string stamp_file = 2;
    if (has_stamp_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stamp_file());
    }

    // optional string pose_file = 3;
    if (has_pose_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pose_file());
    }

    // optional string child_frame_id = 5 [default = "velodyne"];
    if (has_child_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_frame_id());
    }

    // optional string save_folder = 7;
    if (has_save_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_folder());
    }

    // optional string file_prefix = 8;
    if (has_file_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_prefix());
    }

    // optional .jmc_auto.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
    if (has_module_conf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->module_conf_);
    }

    // optional bool skip_static_frames = 4 [default = false];
    if (has_skip_static_frames()) {
      total_size += 1 + 1;
    }

  }
  // optional bool use_seq = 6 [default = false];
  if (has_use_seq()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelodyneToolsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const VelodyneToolsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VelodyneToolsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
    MergeFrom(*source);
  }
}

void VelodyneToolsConf::MergeFrom(const VelodyneToolsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pcd_folder();
      pcd_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcd_folder_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stamp_file();
      stamp_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stamp_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pose_file();
      pose_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pose_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&VelodyneToolsConf::_default_child_frame_id_.get(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_save_folder();
      save_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_folder_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_file_prefix();
      file_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_prefix_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_module_conf()->::jmc_auto::drivers::lidar_velodyne::VelodyneConf::MergeFrom(from.module_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      skip_static_frames_ = from.skip_static_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_use_seq(from.use_seq());
  }
}

void VelodyneToolsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelodyneToolsConf::CopyFrom(const VelodyneToolsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneToolsConf::IsInitialized() const {
  if (has_module_conf()) {
    if (!this->module_conf_->IsInitialized()) return false;
  }
  return true;
}

void VelodyneToolsConf::Swap(VelodyneToolsConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelodyneToolsConf::InternalSwap(VelodyneToolsConf* other) {
  pcd_folder_.Swap(&other->pcd_folder_);
  stamp_file_.Swap(&other->stamp_file_);
  pose_file_.Swap(&other->pose_file_);
  child_frame_id_.Swap(&other->child_frame_id_);
  save_folder_.Swap(&other->save_folder_);
  file_prefix_.Swap(&other->file_prefix_);
  std::swap(module_conf_, other->module_conf_);
  std::swap(skip_static_frames_, other->skip_static_frames_);
  std::swap(use_seq_, other->use_seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VelodyneToolsConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VelodyneToolsConf

// optional string pcd_folder = 1;
bool VelodyneToolsConf::has_pcd_folder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VelodyneToolsConf::set_has_pcd_folder() {
  _has_bits_[0] |= 0x00000001u;
}
void VelodyneToolsConf::clear_has_pcd_folder() {
  _has_bits_[0] &= ~0x00000001u;
}
void VelodyneToolsConf::clear_pcd_folder() {
  pcd_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcd_folder();
}
const ::std::string& VelodyneToolsConf::pcd_folder() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  return pcd_folder_.GetNoArena();
}
void VelodyneToolsConf::set_pcd_folder(const ::std::string& value) {
  set_has_pcd_folder();
  pcd_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}
#if LANG_CXX11
void VelodyneToolsConf::set_pcd_folder(::std::string&& value) {
  set_has_pcd_folder();
  pcd_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}
#endif
void VelodyneToolsConf::set_pcd_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcd_folder();
  pcd_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}
void VelodyneToolsConf::set_pcd_folder(const char* value, size_t size) {
  set_has_pcd_folder();
  pcd_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}
::std::string* VelodyneToolsConf::mutable_pcd_folder() {
  set_has_pcd_folder();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  return pcd_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneToolsConf::release_pcd_folder() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  clear_has_pcd_folder();
  return pcd_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneToolsConf::set_allocated_pcd_folder(::std::string* pcd_folder) {
  if (pcd_folder != NULL) {
    set_has_pcd_folder();
  } else {
    clear_has_pcd_folder();
  }
  pcd_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcd_folder);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}

// optional string stamp_file = 2;
bool VelodyneToolsConf::has_stamp_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VelodyneToolsConf::set_has_stamp_file() {
  _has_bits_[0] |= 0x00000002u;
}
void VelodyneToolsConf::clear_has_stamp_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void VelodyneToolsConf::clear_stamp_file() {
  stamp_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stamp_file();
}
const ::std::string& VelodyneToolsConf::stamp_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  return stamp_file_.GetNoArena();
}
void VelodyneToolsConf::set_stamp_file(const ::std::string& value) {
  set_has_stamp_file();
  stamp_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}
#if LANG_CXX11
void VelodyneToolsConf::set_stamp_file(::std::string&& value) {
  set_has_stamp_file();
  stamp_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}
#endif
void VelodyneToolsConf::set_stamp_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stamp_file();
  stamp_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}
void VelodyneToolsConf::set_stamp_file(const char* value, size_t size) {
  set_has_stamp_file();
  stamp_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}
::std::string* VelodyneToolsConf::mutable_stamp_file() {
  set_has_stamp_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  return stamp_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneToolsConf::release_stamp_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  clear_has_stamp_file();
  return stamp_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneToolsConf::set_allocated_stamp_file(::std::string* stamp_file) {
  if (stamp_file != NULL) {
    set_has_stamp_file();
  } else {
    clear_has_stamp_file();
  }
  stamp_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stamp_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}

// optional string pose_file = 3;
bool VelodyneToolsConf::has_pose_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VelodyneToolsConf::set_has_pose_file() {
  _has_bits_[0] |= 0x00000004u;
}
void VelodyneToolsConf::clear_has_pose_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void VelodyneToolsConf::clear_pose_file() {
  pose_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pose_file();
}
const ::std::string& VelodyneToolsConf::pose_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  return pose_file_.GetNoArena();
}
void VelodyneToolsConf::set_pose_file(const ::std::string& value) {
  set_has_pose_file();
  pose_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}
#if LANG_CXX11
void VelodyneToolsConf::set_pose_file(::std::string&& value) {
  set_has_pose_file();
  pose_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}
#endif
void VelodyneToolsConf::set_pose_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pose_file();
  pose_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}
void VelodyneToolsConf::set_pose_file(const char* value, size_t size) {
  set_has_pose_file();
  pose_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}
::std::string* VelodyneToolsConf::mutable_pose_file() {
  set_has_pose_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  return pose_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneToolsConf::release_pose_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  clear_has_pose_file();
  return pose_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneToolsConf::set_allocated_pose_file(::std::string* pose_file) {
  if (pose_file != NULL) {
    set_has_pose_file();
  } else {
    clear_has_pose_file();
  }
  pose_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pose_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}

// optional bool skip_static_frames = 4 [default = false];
bool VelodyneToolsConf::has_skip_static_frames() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VelodyneToolsConf::set_has_skip_static_frames() {
  _has_bits_[0] |= 0x00000080u;
}
void VelodyneToolsConf::clear_has_skip_static_frames() {
  _has_bits_[0] &= ~0x00000080u;
}
void VelodyneToolsConf::clear_skip_static_frames() {
  skip_static_frames_ = false;
  clear_has_skip_static_frames();
}
bool VelodyneToolsConf::skip_static_frames() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.skip_static_frames)
  return skip_static_frames_;
}
void VelodyneToolsConf::set_skip_static_frames(bool value) {
  set_has_skip_static_frames();
  skip_static_frames_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.skip_static_frames)
}

// optional string child_frame_id = 5 [default = "velodyne"];
bool VelodyneToolsConf::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VelodyneToolsConf::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
void VelodyneToolsConf::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void VelodyneToolsConf::clear_child_frame_id() {
  child_frame_id_.ClearToDefaultNoArena(&VelodyneToolsConf::_default_child_frame_id_.get());
  clear_has_child_frame_id();
}
const ::std::string& VelodyneToolsConf::child_frame_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  return child_frame_id_.GetNoArena();
}
void VelodyneToolsConf::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneToolsConf::_default_child_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}
#if LANG_CXX11
void VelodyneToolsConf::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &VelodyneToolsConf::_default_child_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}
#endif
void VelodyneToolsConf::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneToolsConf::_default_child_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}
void VelodyneToolsConf::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneToolsConf::_default_child_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}
::std::string* VelodyneToolsConf::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  return child_frame_id_.MutableNoArena(&VelodyneToolsConf::_default_child_frame_id_.get());
}
::std::string* VelodyneToolsConf::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNoArena(&VelodyneToolsConf::_default_child_frame_id_.get());
}
void VelodyneToolsConf::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&VelodyneToolsConf::_default_child_frame_id_.get(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}

// optional bool use_seq = 6 [default = false];
bool VelodyneToolsConf::has_use_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VelodyneToolsConf::set_has_use_seq() {
  _has_bits_[0] |= 0x00000100u;
}
void VelodyneToolsConf::clear_has_use_seq() {
  _has_bits_[0] &= ~0x00000100u;
}
void VelodyneToolsConf::clear_use_seq() {
  use_seq_ = false;
  clear_has_use_seq();
}
bool VelodyneToolsConf::use_seq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.use_seq)
  return use_seq_;
}
void VelodyneToolsConf::set_use_seq(bool value) {
  set_has_use_seq();
  use_seq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.use_seq)
}

// optional string save_folder = 7;
bool VelodyneToolsConf::has_save_folder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VelodyneToolsConf::set_has_save_folder() {
  _has_bits_[0] |= 0x00000010u;
}
void VelodyneToolsConf::clear_has_save_folder() {
  _has_bits_[0] &= ~0x00000010u;
}
void VelodyneToolsConf::clear_save_folder() {
  save_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_folder();
}
const ::std::string& VelodyneToolsConf::save_folder() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  return save_folder_.GetNoArena();
}
void VelodyneToolsConf::set_save_folder(const ::std::string& value) {
  set_has_save_folder();
  save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}
#if LANG_CXX11
void VelodyneToolsConf::set_save_folder(::std::string&& value) {
  set_has_save_folder();
  save_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}
#endif
void VelodyneToolsConf::set_save_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_folder();
  save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}
void VelodyneToolsConf::set_save_folder(const char* value, size_t size) {
  set_has_save_folder();
  save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}
::std::string* VelodyneToolsConf::mutable_save_folder() {
  set_has_save_folder();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  return save_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneToolsConf::release_save_folder() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  clear_has_save_folder();
  return save_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneToolsConf::set_allocated_save_folder(::std::string* save_folder) {
  if (save_folder != NULL) {
    set_has_save_folder();
  } else {
    clear_has_save_folder();
  }
  save_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_folder);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}

// optional string file_prefix = 8;
bool VelodyneToolsConf::has_file_prefix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VelodyneToolsConf::set_has_file_prefix() {
  _has_bits_[0] |= 0x00000020u;
}
void VelodyneToolsConf::clear_has_file_prefix() {
  _has_bits_[0] &= ~0x00000020u;
}
void VelodyneToolsConf::clear_file_prefix() {
  file_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_prefix();
}
const ::std::string& VelodyneToolsConf::file_prefix() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  return file_prefix_.GetNoArena();
}
void VelodyneToolsConf::set_file_prefix(const ::std::string& value) {
  set_has_file_prefix();
  file_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}
#if LANG_CXX11
void VelodyneToolsConf::set_file_prefix(::std::string&& value) {
  set_has_file_prefix();
  file_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}
#endif
void VelodyneToolsConf::set_file_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_prefix();
  file_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}
void VelodyneToolsConf::set_file_prefix(const char* value, size_t size) {
  set_has_file_prefix();
  file_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}
::std::string* VelodyneToolsConf::mutable_file_prefix() {
  set_has_file_prefix();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  return file_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneToolsConf::release_file_prefix() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  clear_has_file_prefix();
  return file_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneToolsConf::set_allocated_file_prefix(::std::string* file_prefix) {
  if (file_prefix != NULL) {
    set_has_file_prefix();
  } else {
    clear_has_file_prefix();
  }
  file_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_prefix);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}

// optional .jmc_auto.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
bool VelodyneToolsConf::has_module_conf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VelodyneToolsConf::set_has_module_conf() {
  _has_bits_[0] |= 0x00000040u;
}
void VelodyneToolsConf::clear_has_module_conf() {
  _has_bits_[0] &= ~0x00000040u;
}
void VelodyneToolsConf::clear_module_conf() {
  if (module_conf_ != NULL) module_conf_->::jmc_auto::drivers::lidar_velodyne::VelodyneConf::Clear();
  clear_has_module_conf();
}
const ::jmc_auto::drivers::lidar_velodyne::VelodyneConf& VelodyneToolsConf::module_conf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  return module_conf_ != NULL ? *module_conf_
                         : *::jmc_auto::drivers::lidar_velodyne::VelodyneConf::internal_default_instance();
}
::jmc_auto::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::mutable_module_conf() {
  set_has_module_conf();
  if (module_conf_ == NULL) {
    module_conf_ = new ::jmc_auto::drivers::lidar_velodyne::VelodyneConf;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  return module_conf_;
}
::jmc_auto::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::release_module_conf() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  clear_has_module_conf();
  ::jmc_auto::drivers::lidar_velodyne::VelodyneConf* temp = module_conf_;
  module_conf_ = NULL;
  return temp;
}
void VelodyneToolsConf::set_allocated_module_conf(::jmc_auto::drivers::lidar_velodyne::VelodyneConf* module_conf) {
  delete module_conf_;
  module_conf_ = module_conf;
  if (module_conf) {
    set_has_module_conf();
  } else {
    clear_has_module_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
