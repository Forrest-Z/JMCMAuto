// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/proto/velodyne_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/lidar_velodyne/proto/velodyne_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace lidar_velodyne {
class VelodyneConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VelodyneConf> {
} _VelodyneConf_default_instance_;
class FusionConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FusionConf> {
} _FusionConf_default_instance_;
class VelodyneConfUnitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VelodyneConfUnit> {
} _VelodyneConfUnit_default_instance_;

namespace protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, firing_data_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, positioning_data_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, npackets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, cache_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, packet_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, min_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, max_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, view_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, view_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, calibration_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, organized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, calibration_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, child_frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConf, tf_query_timeout_),
  4,
  0,
  1,
  12,
  13,
  14,
  5,
  6,
  15,
  16,
  17,
  18,
  9,
  10,
  11,
  19,
  7,
  8,
  2,
  3,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionConf, major_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionConf, slave_index_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConfUnit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConfUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConfUnit, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConfUnit, is_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelodyneConfUnit, fusion_conf_),
  ~0u,
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 26, sizeof(VelodyneConf)},
  { 47, 54, sizeof(FusionConf)},
  { 56, 64, sizeof(VelodyneConfUnit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VelodyneConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FusionConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VelodyneConfUnit_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/lidar_velodyne/proto/velodyne_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _VelodyneConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  VelodyneConf::_default_position_.Shutdown();
  VelodyneConf::_default_child_frame_id_.Shutdown();
  _FusionConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VelodyneConfUnit_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  VelodyneConf::_default_position_.DefaultConstruct();
  *VelodyneConf::_default_position_.get_mutable() = ::std::string("centre", 6);
  VelodyneConf::_default_child_frame_id_.DefaultConstruct();
  *VelodyneConf::_default_child_frame_id_.get_mutable() = ::std::string("velodyne16", 10);
  _VelodyneConf_default_instance_.DefaultConstruct();
  _FusionConf_default_instance_.DefaultConstruct();
  _VelodyneConfUnit_default_instance_.DefaultConstruct();
  _VelodyneConfUnit_default_instance_.get_mutable()->fusion_conf_ = const_cast< ::jmc_auto::drivers::lidar_velodyne::FusionConf*>(
      ::jmc_auto::drivers::lidar_velodyne::FusionConf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n8modules/drivers/lidar_velodyne/proto/v"
      "elodyne_conf.proto\022\037jmc_auto.drivers.lid"
      "ar_velodyne\"\341\004\n\014VelodyneConf\022\020\n\005index\030\001 "
      "\002(\r:\0010\022\030\n\010position\030\002 \001(\t:\006centre\022\020\n\010fram"
      "e_id\030\003 \001(\t\022\036\n\020firing_data_port\030\004 \001(\r:\00423"
      "68\022#\n\025positioning_data_port\030\005 \001(\r:\0048308\022"
      "\020\n\003rpm\030\006 \001(\001:\003600\022D\n\005model\030\007 \001(\0162..jmc_a"
      "uto.drivers.lidar_velodyne.VelodyneModel"
      ":\005VLP16\022\020\n\010npackets\030\010 \001(\005\022\025\n\ncache_size\030"
      "\t \001(\005:\0011\022\030\n\013packet_rate\030\n \001(\005:\003754\022\026\n\tma"
      "x_range\030d \001(\001:\003130\022\026\n\tmin_range\030e \001(\001:\0030"
      ".9\022\021\n\tmin_angle\030f \001(\001\022\021\n\tmax_angle\030g \001(\001"
      "\022\031\n\016view_direction\030h \001(\001:\0010\022&\n\nview_widt"
      "h\030i \001(\001:\0226.2831853071795862\022!\n\022calibrati"
      "on_online\030j \001(\010:\005false\022\030\n\torganized\030k \001("
      "\010:\005false\022\030\n\020calibration_file\030l \001(\t\022#\n\016ch"
      "ild_frame_id\030\310\001 \001(\t:\nvelodyne16\022\036\n\020tf_qu"
      "ery_timeout\030\311\001 \001(\001:\0030.1\"9\n\nFusionConf\022\026\n"
      "\013major_index\030\001 \002(\r:\0010\022\023\n\013slave_index\030\002 \003"
      "(\r\"\253\001\n\020VelodyneConfUnit\022;\n\004conf\030\001 \003(\0132-."
      "jmc_auto.drivers.lidar_velodyne.Velodyne"
      "Conf\022\030\n\tis_fusion\030\002 \001(\010:\005false\022@\n\013fusion"
      "_conf\030\003 \001(\0132+.jmc_auto.drivers.lidar_vel"
      "odyne.FusionConf*s\n\rVelodyneModel\022\t\n\005VLP"
      "16\020\000\022\013\n\007V64E_S2\020\001\022\014\n\010V64E_S3S\020\002\022\026\n\022V64E_"
      "S3D_STRONGEST\020\003\022\021\n\rV64E_S3D_LAST\020\004\022\021\n\rV6"
      "4E_S3D_DUAL\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/lidar_velodyne/proto/velodyne_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto

const ::google::protobuf::EnumDescriptor* VelodyneModel_descriptor() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool VelodyneModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> VelodyneConf::_default_position_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> VelodyneConf::_default_child_frame_id_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelodyneConf::kIndexFieldNumber;
const int VelodyneConf::kPositionFieldNumber;
const int VelodyneConf::kFrameIdFieldNumber;
const int VelodyneConf::kFiringDataPortFieldNumber;
const int VelodyneConf::kPositioningDataPortFieldNumber;
const int VelodyneConf::kRpmFieldNumber;
const int VelodyneConf::kModelFieldNumber;
const int VelodyneConf::kNpacketsFieldNumber;
const int VelodyneConf::kCacheSizeFieldNumber;
const int VelodyneConf::kPacketRateFieldNumber;
const int VelodyneConf::kMaxRangeFieldNumber;
const int VelodyneConf::kMinRangeFieldNumber;
const int VelodyneConf::kMinAngleFieldNumber;
const int VelodyneConf::kMaxAngleFieldNumber;
const int VelodyneConf::kViewDirectionFieldNumber;
const int VelodyneConf::kViewWidthFieldNumber;
const int VelodyneConf::kCalibrationOnlineFieldNumber;
const int VelodyneConf::kOrganizedFieldNumber;
const int VelodyneConf::kCalibrationFileFieldNumber;
const int VelodyneConf::kChildFrameIdFieldNumber;
const int VelodyneConf::kTfQueryTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelodyneConf::VelodyneConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
}
VelodyneConf::VelodyneConf(const VelodyneConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_.UnsafeSetDefault(&VelodyneConf::_default_position_.get());
  if (from.has_position()) {
    position_.AssignWithDefault(&VelodyneConf::_default_position_.get(), from.position_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  calibration_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_calibration_file()) {
    calibration_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.calibration_file_);
  }
  child_frame_id_.UnsafeSetDefault(&VelodyneConf::_default_child_frame_id_.get());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&VelodyneConf::_default_child_frame_id_.get(), from.child_frame_id_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&tf_query_timeout_) -
    reinterpret_cast<char*>(&index_) + sizeof(tf_query_timeout_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
}

void VelodyneConf::SharedCtor() {
  _cached_size_ = 0;
  position_.UnsafeSetDefault(&VelodyneConf::_default_position_.get());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calibration_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.UnsafeSetDefault(&VelodyneConf::_default_child_frame_id_.get());
  ::memset(&index_, 0, reinterpret_cast<char*>(&view_direction_) -
    reinterpret_cast<char*>(&index_) + sizeof(view_direction_));
  firing_data_port_ = 2368u;
  positioning_data_port_ = 8308u;
  rpm_ = 600;
  cache_size_ = 1;
  packet_rate_ = 754;
  max_range_ = 130;
  min_range_ = 0.9;
  view_width_ = 6.2831853071795862;
  tf_query_timeout_ = 0.1;
}

VelodyneConf::~VelodyneConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  SharedDtor();
}

void VelodyneConf::SharedDtor() {
  position_.DestroyNoArena(&VelodyneConf::_default_position_.get());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calibration_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.DestroyNoArena(&VelodyneConf::_default_child_frame_id_.get());
}

void VelodyneConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelodyneConf::descriptor() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VelodyneConf& VelodyneConf::default_instance() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

VelodyneConf* VelodyneConf::New(::google::protobuf::Arena* arena) const {
  VelodyneConf* n = new VelodyneConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VelodyneConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_position()) {
      GOOGLE_DCHECK(!position_.IsDefault(&VelodyneConf::_default_position_.get()));
      (*position_.UnsafeRawStringPointer())->assign(*&VelodyneConf::_default_position_.get());
    }
    if (has_frame_id()) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_calibration_file()) {
      GOOGLE_DCHECK(!calibration_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*calibration_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_child_frame_id()) {
      GOOGLE_DCHECK(!child_frame_id_.IsDefault(&VelodyneConf::_default_child_frame_id_.get()));
      (*child_frame_id_.UnsafeRawStringPointer())->assign(*&VelodyneConf::_default_child_frame_id_.get());
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&calibration_online_) -
      reinterpret_cast<char*>(&index_) + sizeof(calibration_online_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&organized_, 0, reinterpret_cast<char*>(&view_direction_) -
      reinterpret_cast<char*>(&organized_) + sizeof(view_direction_));
    firing_data_port_ = 2368u;
    positioning_data_port_ = 8308u;
    rpm_ = 600;
    cache_size_ = 1;
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    packet_rate_ = 754;
    max_range_ = 130;
    min_range_ = 0.9;
    view_width_ = 6.2831853071795862;
    tf_query_timeout_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VelodyneConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string position = 2 [default = "centre"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneConf.position");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 firing_data_port = 4 [default = 2368];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_firing_data_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firing_data_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 positioning_data_port = 5 [default = 8308];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_positioning_data_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positioning_data_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rpm = 6 [default = 600];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::lidar_velodyne::VelodyneModel_IsValid(value)) {
            set_model(static_cast< ::jmc_auto::drivers::lidar_velodyne::VelodyneModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 npackets = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_npackets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npackets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cache_size = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_cache_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 packet_rate = 10 [default = 754];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_packet_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_range = 100 [default = 130];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(801u)) {
          set_has_max_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_range = 101 [default = 0.9];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(809u)) {
          set_has_min_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_angle = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(817u)) {
          set_has_min_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_angle = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(825u)) {
          set_has_max_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_direction = 104 [default = 0];
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(833u)) {
          set_has_view_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_width = 105 [default = 6.2831853071795862];
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(841u)) {
          set_has_view_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool calibration_online = 106 [default = false];
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(848u)) {
          set_has_calibration_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibration_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool organized = 107 [default = false];
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(856u)) {
          set_has_organized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &organized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calibration_file = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(866u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibration_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibration_file().data(), this->calibration_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string child_frame_id = 200 [default = "velodyne16"];
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1602u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), this->child_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tf_query_timeout = 201 [default = 0.1];
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1609u)) {
          set_has_tf_query_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tf_query_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  return false;
#undef DO_
}

void VelodyneConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string position = 2 [default = "centre"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->position(), output);
  }

  // optional string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_id(), output);
  }

  // optional uint32 firing_data_port = 4 [default = 2368];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->firing_data_port(), output);
  }

  // optional uint32 positioning_data_port = 5 [default = 8308];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->positioning_data_port(), output);
  }

  // optional double rpm = 6 [default = 600];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rpm(), output);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->model(), output);
  }

  // optional int32 npackets = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->npackets(), output);
  }

  // optional int32 cache_size = 9 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cache_size(), output);
  }

  // optional int32 packet_rate = 10 [default = 754];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->packet_rate(), output);
  }

  // optional double max_range = 100 [default = 130];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(100, this->max_range(), output);
  }

  // optional double min_range = 101 [default = 0.9];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->min_range(), output);
  }

  // optional double min_angle = 102;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->min_angle(), output);
  }

  // optional double max_angle = 103;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(103, this->max_angle(), output);
  }

  // optional double view_direction = 104 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(104, this->view_direction(), output);
  }

  // optional double view_width = 105 [default = 6.2831853071795862];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(105, this->view_width(), output);
  }

  // optional bool calibration_online = 106 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->calibration_online(), output);
  }

  // optional bool organized = 107 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->organized(), output);
  }

  // optional string calibration_file = 108;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibration_file().data(), this->calibration_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      108, this->calibration_file(), output);
  }

  // optional string child_frame_id = 200 [default = "velodyne16"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      200, this->child_frame_id(), output);
  }

  // optional double tf_query_timeout = 201 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(201, this->tf_query_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
}

::google::protobuf::uint8* VelodyneConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string position = 2 [default = "centre"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->position(), target);
  }

  // optional string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_id(), target);
  }

  // optional uint32 firing_data_port = 4 [default = 2368];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->firing_data_port(), target);
  }

  // optional uint32 positioning_data_port = 5 [default = 8308];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->positioning_data_port(), target);
  }

  // optional double rpm = 6 [default = 600];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rpm(), target);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->model(), target);
  }

  // optional int32 npackets = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->npackets(), target);
  }

  // optional int32 cache_size = 9 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cache_size(), target);
  }

  // optional int32 packet_rate = 10 [default = 754];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->packet_rate(), target);
  }

  // optional double max_range = 100 [default = 130];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(100, this->max_range(), target);
  }

  // optional double min_range = 101 [default = 0.9];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->min_range(), target);
  }

  // optional double min_angle = 102;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->min_angle(), target);
  }

  // optional double max_angle = 103;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(103, this->max_angle(), target);
  }

  // optional double view_direction = 104 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(104, this->view_direction(), target);
  }

  // optional double view_width = 105 [default = 6.2831853071795862];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(105, this->view_width(), target);
  }

  // optional bool calibration_online = 106 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->calibration_online(), target);
  }

  // optional bool organized = 107 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->organized(), target);
  }

  // optional string calibration_file = 108;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibration_file().data(), this->calibration_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        108, this->calibration_file(), target);
  }

  // optional string child_frame_id = 200 [default = "velodyne16"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        200, this->child_frame_id(), target);
  }

  // optional double tf_query_timeout = 201 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(201, this->tf_query_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  return target;
}

size_t VelodyneConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 index = 1 [default = 0];
  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string position = 2 [default = "centre"];
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string frame_id = 3;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string calibration_file = 108;
    if (has_calibration_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibration_file());
    }

    // optional string child_frame_id = 200 [default = "velodyne16"];
    if (has_child_frame_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_frame_id());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .jmc_auto.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
    }

    // optional int32 npackets = 8;
    if (has_npackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npackets());
    }

    // optional bool calibration_online = 106 [default = false];
    if (has_calibration_online()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool organized = 107 [default = false];
    if (has_organized()) {
      total_size += 2 + 1;
    }

    // optional double min_angle = 102;
    if (has_min_angle()) {
      total_size += 2 + 8;
    }

    // optional double max_angle = 103;
    if (has_max_angle()) {
      total_size += 2 + 8;
    }

    // optional double view_direction = 104 [default = 0];
    if (has_view_direction()) {
      total_size += 2 + 8;
    }

    // optional uint32 firing_data_port = 4 [default = 2368];
    if (has_firing_data_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firing_data_port());
    }

    // optional uint32 positioning_data_port = 5 [default = 8308];
    if (has_positioning_data_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positioning_data_port());
    }

    // optional double rpm = 6 [default = 600];
    if (has_rpm()) {
      total_size += 1 + 8;
    }

    // optional int32 cache_size = 9 [default = 1];
    if (has_cache_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int32 packet_rate = 10 [default = 754];
    if (has_packet_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_rate());
    }

    // optional double max_range = 100 [default = 130];
    if (has_max_range()) {
      total_size += 2 + 8;
    }

    // optional double min_range = 101 [default = 0.9];
    if (has_min_range()) {
      total_size += 2 + 8;
    }

    // optional double view_width = 105 [default = 6.2831853071795862];
    if (has_view_width()) {
      total_size += 2 + 8;
    }

    // optional double tf_query_timeout = 201 [default = 0.1];
    if (has_tf_query_timeout()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelodyneConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  GOOGLE_DCHECK_NE(&from, this);
  const VelodyneConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VelodyneConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
    MergeFrom(*source);
  }
}

void VelodyneConf::MergeFrom(const VelodyneConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_position();
      position_.AssignWithDefault(&VelodyneConf::_default_position_.get(), from.position_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_calibration_file();
      calibration_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.calibration_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&VelodyneConf::_default_child_frame_id_.get(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      model_ = from.model_;
    }
    if (cached_has_bits & 0x00000040u) {
      npackets_ = from.npackets_;
    }
    if (cached_has_bits & 0x00000080u) {
      calibration_online_ = from.calibration_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      organized_ = from.organized_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_angle_ = from.min_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_angle_ = from.max_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      view_direction_ = from.view_direction_;
    }
    if (cached_has_bits & 0x00001000u) {
      firing_data_port_ = from.firing_data_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      positioning_data_port_ = from.positioning_data_port_;
    }
    if (cached_has_bits & 0x00004000u) {
      rpm_ = from.rpm_;
    }
    if (cached_has_bits & 0x00008000u) {
      cache_size_ = from.cache_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      packet_rate_ = from.packet_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_range_ = from.max_range_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_range_ = from.min_range_;
    }
    if (cached_has_bits & 0x00080000u) {
      view_width_ = from.view_width_;
    }
    if (cached_has_bits & 0x00100000u) {
      tf_query_timeout_ = from.tf_query_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VelodyneConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelodyneConf::CopyFrom(const VelodyneConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void VelodyneConf::Swap(VelodyneConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelodyneConf::InternalSwap(VelodyneConf* other) {
  position_.Swap(&other->position_);
  frame_id_.Swap(&other->frame_id_);
  calibration_file_.Swap(&other->calibration_file_);
  child_frame_id_.Swap(&other->child_frame_id_);
  std::swap(index_, other->index_);
  std::swap(model_, other->model_);
  std::swap(npackets_, other->npackets_);
  std::swap(calibration_online_, other->calibration_online_);
  std::swap(organized_, other->organized_);
  std::swap(min_angle_, other->min_angle_);
  std::swap(max_angle_, other->max_angle_);
  std::swap(view_direction_, other->view_direction_);
  std::swap(firing_data_port_, other->firing_data_port_);
  std::swap(positioning_data_port_, other->positioning_data_port_);
  std::swap(rpm_, other->rpm_);
  std::swap(cache_size_, other->cache_size_);
  std::swap(packet_rate_, other->packet_rate_);
  std::swap(max_range_, other->max_range_);
  std::swap(min_range_, other->min_range_);
  std::swap(view_width_, other->view_width_);
  std::swap(tf_query_timeout_, other->tf_query_timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VelodyneConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VelodyneConf

// required uint32 index = 1 [default = 0];
bool VelodyneConf::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VelodyneConf::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void VelodyneConf::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void VelodyneConf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 VelodyneConf::index() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.index)
  return index_;
}
void VelodyneConf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.index)
}

// optional string position = 2 [default = "centre"];
bool VelodyneConf::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VelodyneConf::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void VelodyneConf::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void VelodyneConf::clear_position() {
  position_.ClearToDefaultNoArena(&VelodyneConf::_default_position_.get());
  clear_has_position();
}
const ::std::string& VelodyneConf::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
  return position_.GetNoArena();
}
void VelodyneConf::set_position(const ::std::string& value) {
  set_has_position();
  position_.SetNoArena(&VelodyneConf::_default_position_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
}
#if LANG_CXX11
void VelodyneConf::set_position(::std::string&& value) {
  set_has_position();
  position_.SetNoArena(
    &VelodyneConf::_default_position_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
}
#endif
void VelodyneConf::set_position(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_position();
  position_.SetNoArena(&VelodyneConf::_default_position_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
}
void VelodyneConf::set_position(const char* value, size_t size) {
  set_has_position();
  position_.SetNoArena(&VelodyneConf::_default_position_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
}
::std::string* VelodyneConf::mutable_position() {
  set_has_position();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
  return position_.MutableNoArena(&VelodyneConf::_default_position_.get());
}
::std::string* VelodyneConf::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
  clear_has_position();
  return position_.ReleaseNoArena(&VelodyneConf::_default_position_.get());
}
void VelodyneConf::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    set_has_position();
  } else {
    clear_has_position();
  }
  position_.SetAllocatedNoArena(&VelodyneConf::_default_position_.get(), position);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneConf.position)
}

// optional string frame_id = 3;
bool VelodyneConf::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VelodyneConf::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VelodyneConf::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VelodyneConf::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& VelodyneConf::frame_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
  return frame_id_.GetNoArena();
}
void VelodyneConf::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
}
#if LANG_CXX11
void VelodyneConf::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
}
#endif
void VelodyneConf::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
}
void VelodyneConf::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
}
::std::string* VelodyneConf::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneConf::release_frame_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneConf::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneConf.frame_id)
}

// optional uint32 firing_data_port = 4 [default = 2368];
bool VelodyneConf::has_firing_data_port() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VelodyneConf::set_has_firing_data_port() {
  _has_bits_[0] |= 0x00001000u;
}
void VelodyneConf::clear_has_firing_data_port() {
  _has_bits_[0] &= ~0x00001000u;
}
void VelodyneConf::clear_firing_data_port() {
  firing_data_port_ = 2368u;
  clear_has_firing_data_port();
}
::google::protobuf::uint32 VelodyneConf::firing_data_port() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.firing_data_port)
  return firing_data_port_;
}
void VelodyneConf::set_firing_data_port(::google::protobuf::uint32 value) {
  set_has_firing_data_port();
  firing_data_port_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.firing_data_port)
}

// optional uint32 positioning_data_port = 5 [default = 8308];
bool VelodyneConf::has_positioning_data_port() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VelodyneConf::set_has_positioning_data_port() {
  _has_bits_[0] |= 0x00002000u;
}
void VelodyneConf::clear_has_positioning_data_port() {
  _has_bits_[0] &= ~0x00002000u;
}
void VelodyneConf::clear_positioning_data_port() {
  positioning_data_port_ = 8308u;
  clear_has_positioning_data_port();
}
::google::protobuf::uint32 VelodyneConf::positioning_data_port() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.positioning_data_port)
  return positioning_data_port_;
}
void VelodyneConf::set_positioning_data_port(::google::protobuf::uint32 value) {
  set_has_positioning_data_port();
  positioning_data_port_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.positioning_data_port)
}

// optional double rpm = 6 [default = 600];
bool VelodyneConf::has_rpm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VelodyneConf::set_has_rpm() {
  _has_bits_[0] |= 0x00004000u;
}
void VelodyneConf::clear_has_rpm() {
  _has_bits_[0] &= ~0x00004000u;
}
void VelodyneConf::clear_rpm() {
  rpm_ = 600;
  clear_has_rpm();
}
double VelodyneConf::rpm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.rpm)
  return rpm_;
}
void VelodyneConf::set_rpm(double value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.rpm)
}

// optional .jmc_auto.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
bool VelodyneConf::has_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VelodyneConf::set_has_model() {
  _has_bits_[0] |= 0x00000020u;
}
void VelodyneConf::clear_has_model() {
  _has_bits_[0] &= ~0x00000020u;
}
void VelodyneConf::clear_model() {
  model_ = 0;
  clear_has_model();
}
::jmc_auto::drivers::lidar_velodyne::VelodyneModel VelodyneConf::model() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.model)
  return static_cast< ::jmc_auto::drivers::lidar_velodyne::VelodyneModel >(model_);
}
void VelodyneConf::set_model(::jmc_auto::drivers::lidar_velodyne::VelodyneModel value) {
  assert(::jmc_auto::drivers::lidar_velodyne::VelodyneModel_IsValid(value));
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.model)
}

// optional int32 npackets = 8;
bool VelodyneConf::has_npackets() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VelodyneConf::set_has_npackets() {
  _has_bits_[0] |= 0x00000040u;
}
void VelodyneConf::clear_has_npackets() {
  _has_bits_[0] &= ~0x00000040u;
}
void VelodyneConf::clear_npackets() {
  npackets_ = 0;
  clear_has_npackets();
}
::google::protobuf::int32 VelodyneConf::npackets() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.npackets)
  return npackets_;
}
void VelodyneConf::set_npackets(::google::protobuf::int32 value) {
  set_has_npackets();
  npackets_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.npackets)
}

// optional int32 cache_size = 9 [default = 1];
bool VelodyneConf::has_cache_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VelodyneConf::set_has_cache_size() {
  _has_bits_[0] |= 0x00008000u;
}
void VelodyneConf::clear_has_cache_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void VelodyneConf::clear_cache_size() {
  cache_size_ = 1;
  clear_has_cache_size();
}
::google::protobuf::int32 VelodyneConf::cache_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.cache_size)
  return cache_size_;
}
void VelodyneConf::set_cache_size(::google::protobuf::int32 value) {
  set_has_cache_size();
  cache_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.cache_size)
}

// optional int32 packet_rate = 10 [default = 754];
bool VelodyneConf::has_packet_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VelodyneConf::set_has_packet_rate() {
  _has_bits_[0] |= 0x00010000u;
}
void VelodyneConf::clear_has_packet_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
void VelodyneConf::clear_packet_rate() {
  packet_rate_ = 754;
  clear_has_packet_rate();
}
::google::protobuf::int32 VelodyneConf::packet_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.packet_rate)
  return packet_rate_;
}
void VelodyneConf::set_packet_rate(::google::protobuf::int32 value) {
  set_has_packet_rate();
  packet_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.packet_rate)
}

// optional double max_range = 100 [default = 130];
bool VelodyneConf::has_max_range() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VelodyneConf::set_has_max_range() {
  _has_bits_[0] |= 0x00020000u;
}
void VelodyneConf::clear_has_max_range() {
  _has_bits_[0] &= ~0x00020000u;
}
void VelodyneConf::clear_max_range() {
  max_range_ = 130;
  clear_has_max_range();
}
double VelodyneConf::max_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.max_range)
  return max_range_;
}
void VelodyneConf::set_max_range(double value) {
  set_has_max_range();
  max_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.max_range)
}

// optional double min_range = 101 [default = 0.9];
bool VelodyneConf::has_min_range() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VelodyneConf::set_has_min_range() {
  _has_bits_[0] |= 0x00040000u;
}
void VelodyneConf::clear_has_min_range() {
  _has_bits_[0] &= ~0x00040000u;
}
void VelodyneConf::clear_min_range() {
  min_range_ = 0.9;
  clear_has_min_range();
}
double VelodyneConf::min_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.min_range)
  return min_range_;
}
void VelodyneConf::set_min_range(double value) {
  set_has_min_range();
  min_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.min_range)
}

// optional double min_angle = 102;
bool VelodyneConf::has_min_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VelodyneConf::set_has_min_angle() {
  _has_bits_[0] |= 0x00000200u;
}
void VelodyneConf::clear_has_min_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
void VelodyneConf::clear_min_angle() {
  min_angle_ = 0;
  clear_has_min_angle();
}
double VelodyneConf::min_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.min_angle)
  return min_angle_;
}
void VelodyneConf::set_min_angle(double value) {
  set_has_min_angle();
  min_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.min_angle)
}

// optional double max_angle = 103;
bool VelodyneConf::has_max_angle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VelodyneConf::set_has_max_angle() {
  _has_bits_[0] |= 0x00000400u;
}
void VelodyneConf::clear_has_max_angle() {
  _has_bits_[0] &= ~0x00000400u;
}
void VelodyneConf::clear_max_angle() {
  max_angle_ = 0;
  clear_has_max_angle();
}
double VelodyneConf::max_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.max_angle)
  return max_angle_;
}
void VelodyneConf::set_max_angle(double value) {
  set_has_max_angle();
  max_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.max_angle)
}

// optional double view_direction = 104 [default = 0];
bool VelodyneConf::has_view_direction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VelodyneConf::set_has_view_direction() {
  _has_bits_[0] |= 0x00000800u;
}
void VelodyneConf::clear_has_view_direction() {
  _has_bits_[0] &= ~0x00000800u;
}
void VelodyneConf::clear_view_direction() {
  view_direction_ = 0;
  clear_has_view_direction();
}
double VelodyneConf::view_direction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.view_direction)
  return view_direction_;
}
void VelodyneConf::set_view_direction(double value) {
  set_has_view_direction();
  view_direction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.view_direction)
}

// optional double view_width = 105 [default = 6.2831853071795862];
bool VelodyneConf::has_view_width() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VelodyneConf::set_has_view_width() {
  _has_bits_[0] |= 0x00080000u;
}
void VelodyneConf::clear_has_view_width() {
  _has_bits_[0] &= ~0x00080000u;
}
void VelodyneConf::clear_view_width() {
  view_width_ = 6.2831853071795862;
  clear_has_view_width();
}
double VelodyneConf::view_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.view_width)
  return view_width_;
}
void VelodyneConf::set_view_width(double value) {
  set_has_view_width();
  view_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.view_width)
}

// optional bool calibration_online = 106 [default = false];
bool VelodyneConf::has_calibration_online() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VelodyneConf::set_has_calibration_online() {
  _has_bits_[0] |= 0x00000080u;
}
void VelodyneConf::clear_has_calibration_online() {
  _has_bits_[0] &= ~0x00000080u;
}
void VelodyneConf::clear_calibration_online() {
  calibration_online_ = false;
  clear_has_calibration_online();
}
bool VelodyneConf::calibration_online() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_online)
  return calibration_online_;
}
void VelodyneConf::set_calibration_online(bool value) {
  set_has_calibration_online();
  calibration_online_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_online)
}

// optional bool organized = 107 [default = false];
bool VelodyneConf::has_organized() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VelodyneConf::set_has_organized() {
  _has_bits_[0] |= 0x00000100u;
}
void VelodyneConf::clear_has_organized() {
  _has_bits_[0] &= ~0x00000100u;
}
void VelodyneConf::clear_organized() {
  organized_ = false;
  clear_has_organized();
}
bool VelodyneConf::organized() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.organized)
  return organized_;
}
void VelodyneConf::set_organized(bool value) {
  set_has_organized();
  organized_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.organized)
}

// optional string calibration_file = 108;
bool VelodyneConf::has_calibration_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VelodyneConf::set_has_calibration_file() {
  _has_bits_[0] |= 0x00000004u;
}
void VelodyneConf::clear_has_calibration_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void VelodyneConf::clear_calibration_file() {
  calibration_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_calibration_file();
}
const ::std::string& VelodyneConf::calibration_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  return calibration_file_.GetNoArena();
}
void VelodyneConf::set_calibration_file(const ::std::string& value) {
  set_has_calibration_file();
  calibration_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}
#if LANG_CXX11
void VelodyneConf::set_calibration_file(::std::string&& value) {
  set_has_calibration_file();
  calibration_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}
#endif
void VelodyneConf::set_calibration_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_calibration_file();
  calibration_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}
void VelodyneConf::set_calibration_file(const char* value, size_t size) {
  set_has_calibration_file();
  calibration_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}
::std::string* VelodyneConf::mutable_calibration_file() {
  set_has_calibration_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  return calibration_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VelodyneConf::release_calibration_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  clear_has_calibration_file();
  return calibration_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VelodyneConf::set_allocated_calibration_file(::std::string* calibration_file) {
  if (calibration_file != NULL) {
    set_has_calibration_file();
  } else {
    clear_has_calibration_file();
  }
  calibration_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calibration_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}

// optional string child_frame_id = 200 [default = "velodyne16"];
bool VelodyneConf::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VelodyneConf::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
void VelodyneConf::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void VelodyneConf::clear_child_frame_id() {
  child_frame_id_.ClearToDefaultNoArena(&VelodyneConf::_default_child_frame_id_.get());
  clear_has_child_frame_id();
}
const ::std::string& VelodyneConf::child_frame_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  return child_frame_id_.GetNoArena();
}
void VelodyneConf::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneConf::_default_child_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}
#if LANG_CXX11
void VelodyneConf::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &VelodyneConf::_default_child_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}
#endif
void VelodyneConf::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneConf::_default_child_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}
void VelodyneConf::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&VelodyneConf::_default_child_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}
::std::string* VelodyneConf::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  return child_frame_id_.MutableNoArena(&VelodyneConf::_default_child_frame_id_.get());
}
::std::string* VelodyneConf::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNoArena(&VelodyneConf::_default_child_frame_id_.get());
}
void VelodyneConf::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&VelodyneConf::_default_child_frame_id_.get(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}

// optional double tf_query_timeout = 201 [default = 0.1];
bool VelodyneConf::has_tf_query_timeout() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VelodyneConf::set_has_tf_query_timeout() {
  _has_bits_[0] |= 0x00100000u;
}
void VelodyneConf::clear_has_tf_query_timeout() {
  _has_bits_[0] &= ~0x00100000u;
}
void VelodyneConf::clear_tf_query_timeout() {
  tf_query_timeout_ = 0.1;
  clear_has_tf_query_timeout();
}
double VelodyneConf::tf_query_timeout() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConf.tf_query_timeout)
  return tf_query_timeout_;
}
void VelodyneConf::set_tf_query_timeout(double value) {
  set_has_tf_query_timeout();
  tf_query_timeout_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConf.tf_query_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionConf::kMajorIndexFieldNumber;
const int FusionConf::kSlaveIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionConf::FusionConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.lidar_velodyne.FusionConf)
}
FusionConf::FusionConf(const FusionConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slave_index_(from.slave_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  major_index_ = from.major_index_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.lidar_velodyne.FusionConf)
}

void FusionConf::SharedCtor() {
  _cached_size_ = 0;
  major_index_ = 0u;
}

FusionConf::~FusionConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.lidar_velodyne.FusionConf)
  SharedDtor();
}

void FusionConf::SharedDtor() {
}

void FusionConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionConf::descriptor() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FusionConf& FusionConf::default_instance() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

FusionConf* FusionConf::New(::google::protobuf::Arena* arena) const {
  FusionConf* n = new FusionConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  slave_index_.Clear();
  major_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FusionConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 major_index = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_major_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 slave_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_slave_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slave_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.lidar_velodyne.FusionConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.lidar_velodyne.FusionConf)
  return false;
#undef DO_
}

void FusionConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 major_index = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_index(), output);
  }

  // repeated uint32 slave_index = 2;
  for (int i = 0, n = this->slave_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slave_index(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.lidar_velodyne.FusionConf)
}

::google::protobuf::uint8* FusionConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 major_index = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_index(), target);
  }

  // repeated uint32 slave_index = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->slave_index_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.lidar_velodyne.FusionConf)
  return target;
}

size_t FusionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 major_index = 1 [default = 0];
  if (has_major_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major_index());
  }
  // repeated uint32 slave_index = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->slave_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slave_index_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.lidar_velodyne.FusionConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.lidar_velodyne.FusionConf)
    MergeFrom(*source);
  }
}

void FusionConf::MergeFrom(const FusionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slave_index_.MergeFrom(from.slave_index_);
  if (from.has_major_index()) {
    set_major_index(from.major_index());
  }
}

void FusionConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionConf::CopyFrom(const FusionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.lidar_velodyne.FusionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FusionConf::Swap(FusionConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionConf::InternalSwap(FusionConf* other) {
  slave_index_.InternalSwap(&other->slave_index_);
  std::swap(major_index_, other->major_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FusionConf

// required uint32 major_index = 1 [default = 0];
bool FusionConf::has_major_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FusionConf::set_has_major_index() {
  _has_bits_[0] |= 0x00000001u;
}
void FusionConf::clear_has_major_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void FusionConf::clear_major_index() {
  major_index_ = 0u;
  clear_has_major_index();
}
::google::protobuf::uint32 FusionConf::major_index() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.FusionConf.major_index)
  return major_index_;
}
void FusionConf::set_major_index(::google::protobuf::uint32 value) {
  set_has_major_index();
  major_index_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.FusionConf.major_index)
}

// repeated uint32 slave_index = 2;
int FusionConf::slave_index_size() const {
  return slave_index_.size();
}
void FusionConf::clear_slave_index() {
  slave_index_.Clear();
}
::google::protobuf::uint32 FusionConf::slave_index(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.FusionConf.slave_index)
  return slave_index_.Get(index);
}
void FusionConf::set_slave_index(int index, ::google::protobuf::uint32 value) {
  slave_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.FusionConf.slave_index)
}
void FusionConf::add_slave_index(::google::protobuf::uint32 value) {
  slave_index_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.lidar_velodyne.FusionConf.slave_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FusionConf::slave_index() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.lidar_velodyne.FusionConf.slave_index)
  return slave_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FusionConf::mutable_slave_index() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.lidar_velodyne.FusionConf.slave_index)
  return &slave_index_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelodyneConfUnit::kConfFieldNumber;
const int VelodyneConfUnit::kIsFusionFieldNumber;
const int VelodyneConfUnit::kFusionConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelodyneConfUnit::VelodyneConfUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
}
VelodyneConfUnit::VelodyneConfUnit(const VelodyneConfUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      conf_(from.conf_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fusion_conf()) {
    fusion_conf_ = new ::jmc_auto::drivers::lidar_velodyne::FusionConf(*from.fusion_conf_);
  } else {
    fusion_conf_ = NULL;
  }
  is_fusion_ = from.is_fusion_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
}

void VelodyneConfUnit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fusion_conf_, 0, reinterpret_cast<char*>(&is_fusion_) -
    reinterpret_cast<char*>(&fusion_conf_) + sizeof(is_fusion_));
}

VelodyneConfUnit::~VelodyneConfUnit() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  SharedDtor();
}

void VelodyneConfUnit::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fusion_conf_;
  }
}

void VelodyneConfUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelodyneConfUnit::descriptor() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VelodyneConfUnit& VelodyneConfUnit::default_instance() {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

VelodyneConfUnit* VelodyneConfUnit::New(::google::protobuf::Arena* arena) const {
  VelodyneConfUnit* n = new VelodyneConfUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VelodyneConfUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  conf_.Clear();
  if (has_fusion_conf()) {
    GOOGLE_DCHECK(fusion_conf_ != NULL);
    fusion_conf_->::jmc_auto::drivers::lidar_velodyne::FusionConf::Clear();
  }
  is_fusion_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VelodyneConfUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.drivers.lidar_velodyne.VelodyneConf conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fusion = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fusion_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  return false;
#undef DO_
}

void VelodyneConfUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.drivers.lidar_velodyne.VelodyneConf conf = 1;
  for (unsigned int i = 0, n = this->conf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conf(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_fusion = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_fusion(), output);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fusion_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
}

::google::protobuf::uint8* VelodyneConfUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.drivers.lidar_velodyne.VelodyneConf conf = 1;
  for (unsigned int i = 0, n = this->conf_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->conf(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_fusion = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_fusion(), target);
  }

  // optional .jmc_auto.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fusion_conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  return target;
}

size_t VelodyneConfUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.drivers.lidar_velodyne.VelodyneConf conf = 1;
  {
    unsigned int count = this->conf_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conf(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
    if (has_fusion_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fusion_conf_);
    }

    // optional bool is_fusion = 2 [default = false];
    if (has_is_fusion()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelodyneConfUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const VelodyneConfUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VelodyneConfUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
    MergeFrom(*source);
  }
}

void VelodyneConfUnit::MergeFrom(const VelodyneConfUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conf_.MergeFrom(from.conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fusion_conf()->::jmc_auto::drivers::lidar_velodyne::FusionConf::MergeFrom(from.fusion_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      is_fusion_ = from.is_fusion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VelodyneConfUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelodyneConfUnit::CopyFrom(const VelodyneConfUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneConfUnit::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  if (has_fusion_conf()) {
    if (!this->fusion_conf_->IsInitialized()) return false;
  }
  return true;
}

void VelodyneConfUnit::Swap(VelodyneConfUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelodyneConfUnit::InternalSwap(VelodyneConfUnit* other) {
  conf_.InternalSwap(&other->conf_);
  std::swap(fusion_conf_, other->fusion_conf_);
  std::swap(is_fusion_, other->is_fusion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VelodyneConfUnit::GetMetadata() const {
  protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VelodyneConfUnit

// repeated .jmc_auto.drivers.lidar_velodyne.VelodyneConf conf = 1;
int VelodyneConfUnit::conf_size() const {
  return conf_.size();
}
void VelodyneConfUnit::clear_conf() {
  conf_.Clear();
}
const ::jmc_auto::drivers::lidar_velodyne::VelodyneConf& VelodyneConfUnit::conf(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return conf_.Get(index);
}
::jmc_auto::drivers::lidar_velodyne::VelodyneConf* VelodyneConfUnit::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return conf_.Mutable(index);
}
::jmc_auto::drivers::lidar_velodyne::VelodyneConf* VelodyneConfUnit::add_conf() {
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return conf_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::lidar_velodyne::VelodyneConf >*
VelodyneConfUnit::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return &conf_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::lidar_velodyne::VelodyneConf >&
VelodyneConfUnit::conf() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return conf_;
}

// optional bool is_fusion = 2 [default = false];
bool VelodyneConfUnit::has_is_fusion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VelodyneConfUnit::set_has_is_fusion() {
  _has_bits_[0] |= 0x00000002u;
}
void VelodyneConfUnit::clear_has_is_fusion() {
  _has_bits_[0] &= ~0x00000002u;
}
void VelodyneConfUnit::clear_is_fusion() {
  is_fusion_ = false;
  clear_has_is_fusion();
}
bool VelodyneConfUnit::is_fusion() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.is_fusion)
  return is_fusion_;
}
void VelodyneConfUnit::set_is_fusion(bool value) {
  set_has_is_fusion();
  is_fusion_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.is_fusion)
}

// optional .jmc_auto.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
bool VelodyneConfUnit::has_fusion_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VelodyneConfUnit::set_has_fusion_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void VelodyneConfUnit::clear_has_fusion_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void VelodyneConfUnit::clear_fusion_conf() {
  if (fusion_conf_ != NULL) fusion_conf_->::jmc_auto::drivers::lidar_velodyne::FusionConf::Clear();
  clear_has_fusion_conf();
}
const ::jmc_auto::drivers::lidar_velodyne::FusionConf& VelodyneConfUnit::fusion_conf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  return fusion_conf_ != NULL ? *fusion_conf_
                         : *::jmc_auto::drivers::lidar_velodyne::FusionConf::internal_default_instance();
}
::jmc_auto::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::mutable_fusion_conf() {
  set_has_fusion_conf();
  if (fusion_conf_ == NULL) {
    fusion_conf_ = new ::jmc_auto::drivers::lidar_velodyne::FusionConf;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  return fusion_conf_;
}
::jmc_auto::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::release_fusion_conf() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  clear_has_fusion_conf();
  ::jmc_auto::drivers::lidar_velodyne::FusionConf* temp = fusion_conf_;
  fusion_conf_ = NULL;
  return temp;
}
void VelodyneConfUnit::set_allocated_fusion_conf(::jmc_auto::drivers::lidar_velodyne::FusionConf* fusion_conf) {
  delete fusion_conf_;
  fusion_conf_ = fusion_conf;
  if (fusion_conf) {
    set_has_fusion_conf();
  } else {
    clear_has_fusion_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
