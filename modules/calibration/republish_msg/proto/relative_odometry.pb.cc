// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/calibration/republish_msg/proto/relative_odometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/calibration/republish_msg/proto/relative_odometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace calibration {
namespace republish_msg {
class RelativeOdometryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelativeOdometry> {
} _RelativeOdometry_default_instance_;

namespace protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeOdometry, position_type_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(RelativeOdometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RelativeOdometry_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/calibration/republish_msg/proto/relative_odometry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _RelativeOdometry_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _RelativeOdometry_default_instance_.DefaultConstruct();
  _RelativeOdometry_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _RelativeOdometry_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _RelativeOdometry_default_instance_.get_mutable()->orientation_ = const_cast< ::jmc_auto::common::Quaternion*>(
      ::jmc_auto::common::Quaternion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\?modules/calibration/republish_msg/prot"
      "o/relative_odometry.proto\022\"jmc_auto.cali"
      "bration.republish_msg\032!modules/common/pr"
      "oto/header.proto\032#modules/common/proto/g"
      "eometry.proto\"\261\001\n\020RelativeOdometry\022\'\n\006he"
      "ader\030\001 \001(\0132\027.jmc_auto.common.Header\022+\n\010p"
      "osition\030\002 \001(\0132\031.jmc_auto.common.PointENU"
      "\0220\n\013orientation\030\003 \001(\0132\033.jmc_auto.common."
      "Quaternion\022\025\n\rposition_type\030\004 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/calibration/republish_msg/proto/relative_odometry.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativeOdometry::kHeaderFieldNumber;
const int RelativeOdometry::kPositionFieldNumber;
const int RelativeOdometry::kOrientationFieldNumber;
const int RelativeOdometry::kPositionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativeOdometry::RelativeOdometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.calibration.republish_msg.RelativeOdometry)
}
RelativeOdometry::RelativeOdometry(const RelativeOdometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::PointENU(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::jmc_auto::common::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  position_type_ = from.position_type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.calibration.republish_msg.RelativeOdometry)
}

void RelativeOdometry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&position_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(position_type_));
}

RelativeOdometry::~RelativeOdometry() {
  // @@protoc_insertion_point(destructor:jmc_auto.calibration.republish_msg.RelativeOdometry)
  SharedDtor();
}

void RelativeOdometry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete orientation_;
  }
}

void RelativeOdometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelativeOdometry::descriptor() {
  protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativeOdometry& RelativeOdometry::default_instance() {
  protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelativeOdometry* RelativeOdometry::New(::google::protobuf::Arena* arena) const {
  RelativeOdometry* n = new RelativeOdometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelativeOdometry::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::PointENU::Clear();
    }
    if (has_orientation()) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->::jmc_auto::common::Quaternion::Clear();
    }
  }
  position_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativeOdometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Quaternion orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_position_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.calibration.republish_msg.RelativeOdometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.calibration.republish_msg.RelativeOdometry)
  return false;
#undef DO_
}

void RelativeOdometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .jmc_auto.common.PointENU position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .jmc_auto.common.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // optional uint32 position_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.calibration.republish_msg.RelativeOdometry)
}

::google::protobuf::uint8* RelativeOdometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .jmc_auto.common.PointENU position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional .jmc_auto.common.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, deterministic, target);
  }

  // optional uint32 position_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.calibration.republish_msg.RelativeOdometry)
  return target;
}

size_t RelativeOdometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.common.PointENU position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Quaternion orientation = 3;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_);
    }

    // optional uint32 position_type = 4;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelativeOdometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeOdometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativeOdometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.calibration.republish_msg.RelativeOdometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.calibration.republish_msg.RelativeOdometry)
    MergeFrom(*source);
  }
}

void RelativeOdometry::MergeFrom(const RelativeOdometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::jmc_auto::common::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_orientation()->::jmc_auto::common::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      position_type_ = from.position_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativeOdometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeOdometry::CopyFrom(const RelativeOdometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.calibration.republish_msg.RelativeOdometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeOdometry::IsInitialized() const {
  return true;
}

void RelativeOdometry::Swap(RelativeOdometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativeOdometry::InternalSwap(RelativeOdometry* other) {
  std::swap(header_, other->header_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(position_type_, other->position_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelativeOdometry::GetMetadata() const {
  protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelativeOdometry

// optional .jmc_auto.common.Header header = 1;
bool RelativeOdometry::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelativeOdometry::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RelativeOdometry::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelativeOdometry::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& RelativeOdometry::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.calibration.republish_msg.RelativeOdometry.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* RelativeOdometry::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.calibration.republish_msg.RelativeOdometry.header)
  return header_;
}
::jmc_auto::common::Header* RelativeOdometry::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.calibration.republish_msg.RelativeOdometry.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RelativeOdometry::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.calibration.republish_msg.RelativeOdometry.header)
}

// optional .jmc_auto.common.PointENU position = 2;
bool RelativeOdometry::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelativeOdometry::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void RelativeOdometry::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelativeOdometry::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointENU::Clear();
  clear_has_position();
}
const ::jmc_auto::common::PointENU& RelativeOdometry::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.calibration.republish_msg.RelativeOdometry.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* RelativeOdometry::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.calibration.republish_msg.RelativeOdometry.position)
  return position_;
}
::jmc_auto::common::PointENU* RelativeOdometry::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.calibration.republish_msg.RelativeOdometry.position)
  clear_has_position();
  ::jmc_auto::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
void RelativeOdometry::set_allocated_position(::jmc_auto::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.calibration.republish_msg.RelativeOdometry.position)
}

// optional .jmc_auto.common.Quaternion orientation = 3;
bool RelativeOdometry::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RelativeOdometry::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
void RelativeOdometry::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
void RelativeOdometry::clear_orientation() {
  if (orientation_ != NULL) orientation_->::jmc_auto::common::Quaternion::Clear();
  clear_has_orientation();
}
const ::jmc_auto::common::Quaternion& RelativeOdometry::orientation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.calibration.republish_msg.RelativeOdometry.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::jmc_auto::common::Quaternion::internal_default_instance();
}
::jmc_auto::common::Quaternion* RelativeOdometry::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::jmc_auto::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.calibration.republish_msg.RelativeOdometry.orientation)
  return orientation_;
}
::jmc_auto::common::Quaternion* RelativeOdometry::release_orientation() {
  // @@protoc_insertion_point(field_release:jmc_auto.calibration.republish_msg.RelativeOdometry.orientation)
  clear_has_orientation();
  ::jmc_auto::common::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void RelativeOdometry::set_allocated_orientation(::jmc_auto::common::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.calibration.republish_msg.RelativeOdometry.orientation)
}

// optional uint32 position_type = 4;
bool RelativeOdometry::has_position_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RelativeOdometry::set_has_position_type() {
  _has_bits_[0] |= 0x00000008u;
}
void RelativeOdometry::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void RelativeOdometry::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
::google::protobuf::uint32 RelativeOdometry::position_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.calibration.republish_msg.RelativeOdometry.position_type)
  return position_type_;
}
void RelativeOdometry::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.calibration.republish_msg.RelativeOdometry.position_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace republish_msg
}  // namespace calibration
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
