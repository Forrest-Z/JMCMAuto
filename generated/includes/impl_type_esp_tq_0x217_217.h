/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_esp_tq_0x217_217_h
#define impl_type_esp_tq_0x217_217_h








#include "impl_type_double.h"
#include "impl_type_int32.h"
#include "impl_type_esp_trqred_reqtype.h"
#include "impl_type_esp_trqinc_reqtype.h"


struct Esp_tq_0x217_217 {
    ::Double esp_tqdecreqdbyespslow;
    
    ::Double esp_tqinccreqdbyesp;
    
    ::Int32 rolling_counter_0x217;
    
    ::Esp_trqinc_reqType esp_trqinc_req;
    
    ::Esp_trqred_reqType esp_trqred_req;
    
    ::Int32 checksum_0x217;
    
    ::Double esp_tqdecreqdbyespfast;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(esp_tqdecreqdbyespslow);
        fun(esp_tqinccreqdbyesp);
        fun(rolling_counter_0x217);
        fun(esp_trqinc_req);
        fun(esp_trqred_req);
        fun(checksum_0x217);
        fun(esp_tqdecreqdbyespfast);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(esp_tqdecreqdbyespslow);
        fun(esp_tqinccreqdbyesp);
        fun(rolling_counter_0x217);
        fun(esp_trqinc_req);
        fun(esp_trqred_req);
        fun(checksum_0x217);
        fun(esp_tqdecreqdbyespfast);
    }

    bool operator == (const ::Esp_tq_0x217_217& t) const {
        return (esp_tqdecreqdbyespslow == t.esp_tqdecreqdbyespslow) && (esp_tqinccreqdbyesp == t.esp_tqinccreqdbyesp) && (rolling_counter_0x217 == t.rolling_counter_0x217) && (esp_trqinc_req == t.esp_trqinc_req) && (esp_trqred_req == t.esp_trqred_req) && (checksum_0x217 == t.checksum_0x217) && (esp_tqdecreqdbyespfast == t.esp_tqdecreqdbyespfast);
    }
};


#endif // impl_type_esp_tq_0x217_217_h
