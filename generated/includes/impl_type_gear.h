/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gear_h
#define impl_type_gear_h





#include "impl_type_bool.h"


struct Gear {
    ::Bool is_shift_position_valid;
    
    
    ::Bool driver_override;
    
    ::Bool gear_cmd;
    
    ::Bool canbus_fault;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(is_shift_position_valid);
        fun(driver_override);
        fun(gear_cmd);
        fun(canbus_fault);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(is_shift_position_valid);
        fun(driver_override);
        fun(gear_cmd);
        fun(canbus_fault);
    }

    bool operator == (const ::Gear& t) const {
        return (is_shift_position_valid == t.is_shift_position_valid) && (driver_override == t.driver_override) && (gear_cmd == t.gear_cmd) && (canbus_fault == t.canbus_fault);
    }
};


#endif // impl_type_gear_h
