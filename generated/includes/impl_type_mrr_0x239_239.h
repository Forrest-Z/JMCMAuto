/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_mrr_0x239_239_h
#define impl_type_mrr_0x239_239_h








#include "impl_type_double.h"
#include "impl_type_int32.h"


struct Mrr_0x239_239 {
    ::Double acc_tgtaxlowercomftband;
    
    ::Double acc_tgtaxupperlim;
    
    ::Double acc_tgtaxlowerlim;
    
    ::Double acc_tgtax;
    
    ::Int32 rolling_counter_0x238;
    
    ::Int32 checksum_0x238;
    
    ::Double acc_tgtaxuppercomftband;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(acc_tgtaxlowercomftband);
        fun(acc_tgtaxupperlim);
        fun(acc_tgtaxlowerlim);
        fun(acc_tgtax);
        fun(rolling_counter_0x238);
        fun(checksum_0x238);
        fun(acc_tgtaxuppercomftband);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(acc_tgtaxlowercomftband);
        fun(acc_tgtaxupperlim);
        fun(acc_tgtaxlowerlim);
        fun(acc_tgtax);
        fun(rolling_counter_0x238);
        fun(checksum_0x238);
        fun(acc_tgtaxuppercomftband);
    }

    bool operator == (const ::Mrr_0x239_239& t) const {
        return (acc_tgtaxlowercomftband == t.acc_tgtaxlowercomftband) && (acc_tgtaxupperlim == t.acc_tgtaxupperlim) && (acc_tgtaxlowerlim == t.acc_tgtaxlowerlim) && (acc_tgtax == t.acc_tgtax) && (rolling_counter_0x238 == t.rolling_counter_0x238) && (checksum_0x238 == t.checksum_0x238) && (acc_tgtaxuppercomftband == t.acc_tgtaxuppercomftband);
    }
};


#endif // impl_type_mrr_0x239_239_h
