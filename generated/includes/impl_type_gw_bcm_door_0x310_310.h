/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gw_bcm_door_0x310_310_h
#define impl_type_gw_bcm_door_0x310_310_h























#include "impl_type_bcm_plg_driverswtype.h"
#include "impl_type_bcm_doorstsrearletype.h"
#include "impl_type_bcm_doorlockstsfrntritype.h"
#include "impl_type_bcm_windowscmdtype.h"
#include "impl_type_bcm_loadsensitivitytype.h"
#include "impl_type_bcm_doorststrunktype.h"
#include "impl_type_bcm_lockunlockfeedbacktype.h"
#include "impl_type_bcm_doorstsfrntletype.h"
#include "impl_type_bcm_rearwiperststype.h"
#include "impl_type_bcm_doorstsfrntritype.h"
#include "impl_type_int32.h"
#include "impl_type_bcm_doorstsrearritype.h"
#include "impl_type_bcm_turnindicatorststype.h"
#include "impl_type_bcm_doorlockstsfrntletype.h"
#include "impl_type_bcm_trunkdoorpreunlockststype.h"
#include "impl_type_bcm_doorlockstsrearletype.h"
#include "impl_type_bcm_antitheftststype.h"
#include "impl_type_bcm_doorlockststrunktype.h"
#include "impl_type_bcm_frontwiperststype.h"
#include "impl_type_bcm_enginehoodststype.h"


struct Gw_bcm_door_0x310_310 {
    ::Bcm_doorlockstsrearleType bcm_doorlockstsrearle;
    
    ::Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri;
    
    ::Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle;
    
    ::Bcm_antitheftstsType bcm_antitheftsts;
    
    ::Bcm_loadsensitivityType bcm_loadsensitivity;
    
    ::Bcm_lockunlockfeedbackType bcm_lockunlockfeedback;
    
    ::Bcm_doorlockststrunkType bcm_doorlockststrunk;
    
    ::Bcm_doorststrunkType bcm_doorststrunk;
    
    ::Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts;
    
    ::Bcm_doorstsrearleType bcm_doorstsrearle;
    
    ::Bcm_frontwiperstsType bcm_frontwipersts;
    
    ::Bcm_enginehoodstsType bcm_enginehoodsts;
    
    ::Bcm_plg_driverswType bcm_plg_driversw;
    
    ::Bcm_windowscmdType bcm_windowscmd;
    
    ::Bcm_rearwiperstsType bcm_rearwipersts;
    
    ::Bcm_doorstsfrntriType bcm_doorstsfrntri;
    
    ::Int32 bcm_rolling_counter_0x310;
    
    ::Bcm_turnindicatorstsType bcm_turnindicatorsts;
    
    ::Int32 bcm_checksum_0x310;
    
    ::Bcm_doorstsfrntleType bcm_doorstsfrntle;
    
    ::Bcm_doorstsrearriType bcm_doorlockstsrearri;
    
    ::Bcm_doorstsrearriType bcm_doorstsrearri;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(bcm_doorlockstsrearle);
        fun(bcm_doorlockstsfrntri);
        fun(bcm_doorlockstsfrntle);
        fun(bcm_antitheftsts);
        fun(bcm_loadsensitivity);
        fun(bcm_lockunlockfeedback);
        fun(bcm_doorlockststrunk);
        fun(bcm_doorststrunk);
        fun(bcm_trunkdoorpreunlocksts);
        fun(bcm_doorstsrearle);
        fun(bcm_frontwipersts);
        fun(bcm_enginehoodsts);
        fun(bcm_plg_driversw);
        fun(bcm_windowscmd);
        fun(bcm_rearwipersts);
        fun(bcm_doorstsfrntri);
        fun(bcm_rolling_counter_0x310);
        fun(bcm_turnindicatorsts);
        fun(bcm_checksum_0x310);
        fun(bcm_doorstsfrntle);
        fun(bcm_doorlockstsrearri);
        fun(bcm_doorstsrearri);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(bcm_doorlockstsrearle);
        fun(bcm_doorlockstsfrntri);
        fun(bcm_doorlockstsfrntle);
        fun(bcm_antitheftsts);
        fun(bcm_loadsensitivity);
        fun(bcm_lockunlockfeedback);
        fun(bcm_doorlockststrunk);
        fun(bcm_doorststrunk);
        fun(bcm_trunkdoorpreunlocksts);
        fun(bcm_doorstsrearle);
        fun(bcm_frontwipersts);
        fun(bcm_enginehoodsts);
        fun(bcm_plg_driversw);
        fun(bcm_windowscmd);
        fun(bcm_rearwipersts);
        fun(bcm_doorstsfrntri);
        fun(bcm_rolling_counter_0x310);
        fun(bcm_turnindicatorsts);
        fun(bcm_checksum_0x310);
        fun(bcm_doorstsfrntle);
        fun(bcm_doorlockstsrearri);
        fun(bcm_doorstsrearri);
    }

    bool operator == (const ::Gw_bcm_door_0x310_310& t) const {
        return (bcm_doorlockstsrearle == t.bcm_doorlockstsrearle) && (bcm_doorlockstsfrntri == t.bcm_doorlockstsfrntri) && (bcm_doorlockstsfrntle == t.bcm_doorlockstsfrntle) && (bcm_antitheftsts == t.bcm_antitheftsts) && (bcm_loadsensitivity == t.bcm_loadsensitivity) && (bcm_lockunlockfeedback == t.bcm_lockunlockfeedback) && (bcm_doorlockststrunk == t.bcm_doorlockststrunk) && (bcm_doorststrunk == t.bcm_doorststrunk) && (bcm_trunkdoorpreunlocksts == t.bcm_trunkdoorpreunlocksts) && (bcm_doorstsrearle == t.bcm_doorstsrearle) && (bcm_frontwipersts == t.bcm_frontwipersts) && (bcm_enginehoodsts == t.bcm_enginehoodsts) && (bcm_plg_driversw == t.bcm_plg_driversw) && (bcm_windowscmd == t.bcm_windowscmd) && (bcm_rearwipersts == t.bcm_rearwipersts) && (bcm_doorstsfrntri == t.bcm_doorstsfrntri) && (bcm_rolling_counter_0x310 == t.bcm_rolling_counter_0x310) && (bcm_turnindicatorsts == t.bcm_turnindicatorsts) && (bcm_checksum_0x310 == t.bcm_checksum_0x310) && (bcm_doorstsfrntle == t.bcm_doorstsfrntle) && (bcm_doorlockstsrearri == t.bcm_doorlockstsrearri) && (bcm_doorstsrearri == t.bcm_doorstsrearri);
    }
};


#endif // impl_type_gw_bcm_door_0x310_310_h
