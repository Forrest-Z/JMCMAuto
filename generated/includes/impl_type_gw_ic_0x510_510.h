/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gw_ic_0x510_510_h
#define impl_type_gw_ic_0x510_510_h









#include "impl_type_double.h"
#include "impl_type_int32.h"
#include "impl_type_ic_disfailtype.h"
#include "impl_type_ic_airbagtelltalebehaviortype.h"
#include "impl_type_ic_qdashaccfailtype.h"


struct Gw_ic_0x510_510 {
    ::Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior;
    
    ::Double ic_vehbrkpump_err_ic;
    
    ::Ic_disfailType ic_disfail;
    
    ::Ic_qdashaccfailType ic_qdashaccfail;
    
    ::Int32 ic_vehspd_hmi;
    
    ::Int32 ic_rolling_counter_0x510;
    
    ::Int32 ic_checksum_0x510;
    
    ::Double ic_odometermastervalue;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(ic_airbagtelltalebehavior);
        fun(ic_vehbrkpump_err_ic);
        fun(ic_disfail);
        fun(ic_qdashaccfail);
        fun(ic_vehspd_hmi);
        fun(ic_rolling_counter_0x510);
        fun(ic_checksum_0x510);
        fun(ic_odometermastervalue);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(ic_airbagtelltalebehavior);
        fun(ic_vehbrkpump_err_ic);
        fun(ic_disfail);
        fun(ic_qdashaccfail);
        fun(ic_vehspd_hmi);
        fun(ic_rolling_counter_0x510);
        fun(ic_checksum_0x510);
        fun(ic_odometermastervalue);
    }

    bool operator == (const ::Gw_ic_0x510_510& t) const {
        return (ic_airbagtelltalebehavior == t.ic_airbagtelltalebehavior) && (ic_vehbrkpump_err_ic == t.ic_vehbrkpump_err_ic) && (ic_disfail == t.ic_disfail) && (ic_qdashaccfail == t.ic_qdashaccfail) && (ic_vehspd_hmi == t.ic_vehspd_hmi) && (ic_rolling_counter_0x510 == t.ic_rolling_counter_0x510) && (ic_checksum_0x510 == t.ic_checksum_0x510) && (ic_odometermastervalue == t.ic_odometermastervalue);
    }
};


#endif // impl_type_gw_ic_0x510_510_h
