/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_wheelspeedst_h
#define impl_type_wheelspeedst_h





#include "impl_type_float.h"


struct WheelSpeedSt {
    ::Float front_left;
    
    ::Float front_right;
    
    ::Float rear_left;
    
    ::Float rear_right;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(front_left);
        fun(front_right);
        fun(rear_left);
        fun(rear_right);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(front_left);
        fun(front_right);
        fun(rear_left);
        fun(rear_right);
    }

    bool operator == (const ::WheelSpeedSt& t) const {
        return (front_left == t.front_left) && (front_right == t.front_right) && (rear_left == t.rear_left) && (rear_right == t.rear_right);
    }
};


#endif // impl_type_wheelspeedst_h
