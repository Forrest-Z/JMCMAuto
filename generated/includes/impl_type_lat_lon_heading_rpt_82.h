/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_lat_lon_heading_rpt_82_h
#define impl_type_lat_lon_heading_rpt_82_h








#include "impl_type_double.h"
#include "impl_type_int32.h"


struct Lat_lon_heading_rpt_82 {
    ::Double heading;
    
    ::Int32 longitude_seconds;
    
    ::Int32 longitude_minutes;
    
    ::Int32 longitude_degrees;
    
    ::Int32 latitude_seconds;
    
    ::Int32 latitude_minutes;
    
    ::Int32 latitude_degrees;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(heading);
        fun(longitude_seconds);
        fun(longitude_minutes);
        fun(longitude_degrees);
        fun(latitude_seconds);
        fun(latitude_minutes);
        fun(latitude_degrees);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(heading);
        fun(longitude_seconds);
        fun(longitude_minutes);
        fun(longitude_degrees);
        fun(latitude_seconds);
        fun(latitude_minutes);
        fun(latitude_degrees);
    }

    bool operator == (const ::Lat_lon_heading_rpt_82& t) const {
        return (heading == t.heading) && (longitude_seconds == t.longitude_seconds) && (longitude_minutes == t.longitude_minutes) && (longitude_degrees == t.longitude_degrees) && (latitude_seconds == t.latitude_seconds) && (latitude_minutes == t.latitude_minutes) && (latitude_degrees == t.latitude_degrees);
    }
};


#endif // impl_type_lat_lon_heading_rpt_82_h
