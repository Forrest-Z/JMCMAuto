/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_vehiclesignal_h
#define impl_type_vehiclesignal_h






#include "impl_type_bool.h"
#include "impl_type_turnsignal.h"


struct VehicleSignal {
    ::Bool high_beam;
    
    ::Bool low_beam;
    
    ::Bool horn;
    
    ::Bool emergency_light;
    
    ::TurnSignal turn_signal;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(high_beam);
        fun(low_beam);
        fun(horn);
        fun(emergency_light);
        fun(turn_signal);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(high_beam);
        fun(low_beam);
        fun(horn);
        fun(emergency_light);
        fun(turn_signal);
    }

    bool operator == (const ::VehicleSignal& t) const {
        return (high_beam == t.high_beam) && (low_beam == t.low_beam) && (horn == t.horn) && (emergency_light == t.emergency_light) && (turn_signal == t.turn_signal);
    }
};


#endif // impl_type_vehiclesignal_h
