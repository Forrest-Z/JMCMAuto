/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gw_nm_0x460_460_h
#define impl_type_gw_nm_0x460_460_h







#include "impl_type_int32.h"
#include "impl_type_gwnmsleepacktype.h"
#include "impl_type_gwnmringtype.h"
#include "impl_type_gwnmalivetype.h"
#include "impl_type_gwnmlimphometype.h"
#include "impl_type_gwnmsleepindtype.h"


struct Gw_nm_0x460_460 {
    ::GwnmlimphomeType gwnmlimphome;
    
    ::GwnmsleepindType gwnmsleepind;
    
    ::GwnmsleepackType gwnmsleepack;
    
    ::Int32 gwnmdestaddr;
    
    ::GwnmaliveType gwnmalive;
    
    ::GwnmringType gwnmring;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(gwnmlimphome);
        fun(gwnmsleepind);
        fun(gwnmsleepack);
        fun(gwnmdestaddr);
        fun(gwnmalive);
        fun(gwnmring);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(gwnmlimphome);
        fun(gwnmsleepind);
        fun(gwnmsleepack);
        fun(gwnmdestaddr);
        fun(gwnmalive);
        fun(gwnmring);
    }

    bool operator == (const ::Gw_nm_0x460_460& t) const {
        return (gwnmlimphome == t.gwnmlimphome) && (gwnmsleepind == t.gwnmsleepind) && (gwnmsleepack == t.gwnmsleepack) && (gwnmdestaddr == t.gwnmdestaddr) && (gwnmalive == t.gwnmalive) && (gwnmring == t.gwnmring);
    }
};


#endif // impl_type_gw_nm_0x460_460_h
