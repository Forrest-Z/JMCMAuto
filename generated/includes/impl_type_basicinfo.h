/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_basicinfo_h
#define impl_type_basicinfo_h







































#include "impl_type_double.h"
#include "impl_type_bool.h"
#include "impl_type_int32.h"
#include "impl_type_gas.h"
#include "impl_type_basicinfotype.h"


struct BasicInfo {
    ::Bool is_auto_mode;
    
    ::BasicInfoType power_state;
    
    ::Bool is_air_bag_deployed;
    
    ::Double odo_meter;
    
    ::Double drive_range;
    
    ::Bool is_system_error;
    
    ::Bool is_human_interrupt;
    
    ::Bool acc_on_button;
    
    ::Bool acc_res_button;
    
    ::Bool acc_cancel_button;
    
    ::Bool acc_on_off_button;
    
    ::Bool acc_res_cancel_button;
    
    ::Bool acc_inc_spd_button;
    
    ::Bool acc_dec_spd_button;
    
    ::Bool acc_inc_gap_button;
    
    ::Bool acc_dec_gap_button;
    
    ::Bool lka_button;
    
    ::Bool canbus_fault;
    
    ::Double latitude;
    
    ::Double longitude;
    
    ::Bool gps_valid;
    
    ::Int32 year;
    
    ::Int32 month;
    
    ::Int32 day;
    
    ::Int32 hours;
    
    ::Int32 minutes;
    
    ::Int32 seconds;
    
    ::Double compass_direction;
    
    ::Double pdop;
    
    ::Bool is_gps_fault;
    
    ::Bool is_inferred;
    
    ::Double altitude;
    
    ::Double heading;
    
    ::Double hdop;
    
    ::Double vdop;
    
    ::Gas quality;
    
    ::Int32 num_satellites;
    
    ::Double gps_speed;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(is_auto_mode);
        fun(power_state);
        fun(is_air_bag_deployed);
        fun(odo_meter);
        fun(drive_range);
        fun(is_system_error);
        fun(is_human_interrupt);
        fun(acc_on_button);
        fun(acc_res_button);
        fun(acc_cancel_button);
        fun(acc_on_off_button);
        fun(acc_res_cancel_button);
        fun(acc_inc_spd_button);
        fun(acc_dec_spd_button);
        fun(acc_inc_gap_button);
        fun(acc_dec_gap_button);
        fun(lka_button);
        fun(canbus_fault);
        fun(latitude);
        fun(longitude);
        fun(gps_valid);
        fun(year);
        fun(month);
        fun(day);
        fun(hours);
        fun(minutes);
        fun(seconds);
        fun(compass_direction);
        fun(pdop);
        fun(is_gps_fault);
        fun(is_inferred);
        fun(altitude);
        fun(heading);
        fun(hdop);
        fun(vdop);
        fun(quality);
        fun(num_satellites);
        fun(gps_speed);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(is_auto_mode);
        fun(power_state);
        fun(is_air_bag_deployed);
        fun(odo_meter);
        fun(drive_range);
        fun(is_system_error);
        fun(is_human_interrupt);
        fun(acc_on_button);
        fun(acc_res_button);
        fun(acc_cancel_button);
        fun(acc_on_off_button);
        fun(acc_res_cancel_button);
        fun(acc_inc_spd_button);
        fun(acc_dec_spd_button);
        fun(acc_inc_gap_button);
        fun(acc_dec_gap_button);
        fun(lka_button);
        fun(canbus_fault);
        fun(latitude);
        fun(longitude);
        fun(gps_valid);
        fun(year);
        fun(month);
        fun(day);
        fun(hours);
        fun(minutes);
        fun(seconds);
        fun(compass_direction);
        fun(pdop);
        fun(is_gps_fault);
        fun(is_inferred);
        fun(altitude);
        fun(heading);
        fun(hdop);
        fun(vdop);
        fun(quality);
        fun(num_satellites);
        fun(gps_speed);
    }

    bool operator == (const ::BasicInfo& t) const {
        return (is_auto_mode == t.is_auto_mode) && (power_state == t.power_state) && (is_air_bag_deployed == t.is_air_bag_deployed) && (odo_meter == t.odo_meter) && (drive_range == t.drive_range) && (is_system_error == t.is_system_error) && (is_human_interrupt == t.is_human_interrupt) && (acc_on_button == t.acc_on_button) && (acc_res_button == t.acc_res_button) && (acc_cancel_button == t.acc_cancel_button) && (acc_on_off_button == t.acc_on_off_button) && (acc_res_cancel_button == t.acc_res_cancel_button) && (acc_inc_spd_button == t.acc_inc_spd_button) && (acc_dec_spd_button == t.acc_dec_spd_button) && (acc_inc_gap_button == t.acc_inc_gap_button) && (acc_dec_gap_button == t.acc_dec_gap_button) && (lka_button == t.lka_button) && (canbus_fault == t.canbus_fault) && (latitude == t.latitude) && (longitude == t.longitude) && (gps_valid == t.gps_valid) && (year == t.year) && (month == t.month) && (day == t.day) && (hours == t.hours) && (minutes == t.minutes) && (seconds == t.seconds) && (compass_direction == t.compass_direction) && (pdop == t.pdop) && (is_gps_fault == t.is_gps_fault) && (is_inferred == t.is_inferred) && (altitude == t.altitude) && (heading == t.heading) && (hdop == t.hdop) && (vdop == t.vdop) && (quality == t.quality) && (num_satellites == t.num_satellites) && (gps_speed == t.gps_speed);
    }
};


#endif // impl_type_basicinfo_h
