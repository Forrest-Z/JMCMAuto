/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_esp_pressure_0x241_241_h
#define impl_type_esp_pressure_0x241_241_h









#include "impl_type_esp_trfcasemodreqdbyesptype.h"
#include "impl_type_double.h"
#include "impl_type_int32.h"
#include "impl_type_esp_presoffsetmastercylindervalitype.h"
#include "impl_type_esp_master_cylinder_pressure_statype.h"


struct Esp_pressure_0x241_241 {
    ::Int32 esp_trfcasetqlmtdbyesp;
    
    ::Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp;
    
    ::Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali;
    
    ::Int32 esp_presoffsetmastercylinder;
    
    ::Int32 rolling_counter_0x241;
    
    ::Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta;
    
    ::Int32 checksum_0x241;
    
    ::Double esp_master_cylinder_pressure;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(esp_trfcasetqlmtdbyesp);
        fun(esp_trfcasemodreqdbyesp);
        fun(esp_presoffsetmastercylindervali);
        fun(esp_presoffsetmastercylinder);
        fun(rolling_counter_0x241);
        fun(esp_master_cylinder_pressure_sta);
        fun(checksum_0x241);
        fun(esp_master_cylinder_pressure);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(esp_trfcasetqlmtdbyesp);
        fun(esp_trfcasemodreqdbyesp);
        fun(esp_presoffsetmastercylindervali);
        fun(esp_presoffsetmastercylinder);
        fun(rolling_counter_0x241);
        fun(esp_master_cylinder_pressure_sta);
        fun(checksum_0x241);
        fun(esp_master_cylinder_pressure);
    }

    bool operator == (const ::Esp_pressure_0x241_241& t) const {
        return (esp_trfcasetqlmtdbyesp == t.esp_trfcasetqlmtdbyesp) && (esp_trfcasemodreqdbyesp == t.esp_trfcasemodreqdbyesp) && (esp_presoffsetmastercylindervali == t.esp_presoffsetmastercylindervali) && (esp_presoffsetmastercylinder == t.esp_presoffsetmastercylinder) && (rolling_counter_0x241 == t.rolling_counter_0x241) && (esp_master_cylinder_pressure_sta == t.esp_master_cylinder_pressure_sta) && (checksum_0x241 == t.checksum_0x241) && (esp_master_cylinder_pressure == t.esp_master_cylinder_pressure);
    }
};


#endif // impl_type_esp_pressure_0x241_241_h
