/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gw_ems_tq_0x101_101_h
#define impl_type_gw_ems_tq_0x101_101_h








#include "impl_type_double.h"
#include "impl_type_int32.h"
#include "impl_type_ems_engspeederrortype.h"


struct Gw_ems_tq_0x101_101 {
    ::Double ems_indicatedrealengtorq;
    
    ::Double ems_engspeed;
    
    ::Ems_engspeederrorType ems_engspeederror;
    
    ::Double ems_rngmodtorqcrsleadmin;
    
    ::Int32 dcm_ems_rollingcounter_0x101;
    
    ::Double ems_rngmodtorqcrsleadmax;
    
    ::Int32 dcm_ems_checksum_0x101;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(ems_indicatedrealengtorq);
        fun(ems_engspeed);
        fun(ems_engspeederror);
        fun(ems_rngmodtorqcrsleadmin);
        fun(dcm_ems_rollingcounter_0x101);
        fun(ems_rngmodtorqcrsleadmax);
        fun(dcm_ems_checksum_0x101);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(ems_indicatedrealengtorq);
        fun(ems_engspeed);
        fun(ems_engspeederror);
        fun(ems_rngmodtorqcrsleadmin);
        fun(dcm_ems_rollingcounter_0x101);
        fun(ems_rngmodtorqcrsleadmax);
        fun(dcm_ems_checksum_0x101);
    }

    bool operator == (const ::Gw_ems_tq_0x101_101& t) const {
        return (ems_indicatedrealengtorq == t.ems_indicatedrealengtorq) && (ems_engspeed == t.ems_engspeed) && (ems_engspeederror == t.ems_engspeederror) && (ems_rngmodtorqcrsleadmin == t.ems_rngmodtorqcrsleadmin) && (dcm_ems_rollingcounter_0x101 == t.dcm_ems_rollingcounter_0x101) && (ems_rngmodtorqcrsleadmax == t.ems_rngmodtorqcrsleadmax) && (dcm_ems_checksum_0x101 == t.dcm_ems_checksum_0x101);
    }
};


#endif // impl_type_gw_ems_tq_0x101_101_h
