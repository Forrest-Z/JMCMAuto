/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_recordheader_h
#define impl_type_recordheader_h
















#include "impl_type_uint64.h"
#include "impl_type_uint32.h"
#include "impl_type_bool.h"
#include "impl_type_compresstype.h"


struct RecordHeader {
    ::UInt32 major_version;
    
    ::UInt32 minor_version;
    
    ::CompressType compress;
    
    ::UInt64 chunk_interval;
    
    ::UInt64 segment_interval;
    
    ::UInt64 index_position;
    
    ::UInt64 chunk_number;
    
    ::UInt64 channel_number;
    
    ::UInt64 begin_time;
    
    ::UInt64 end_time;
    
    ::UInt64 message_number;
    
    ::UInt64 size;
    
    ::Bool is_complete;
    
    ::UInt64 chunk_raw_size;
    
    ::UInt64 segment_raw_size;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(major_version);
        fun(minor_version);
        fun(compress);
        fun(chunk_interval);
        fun(segment_interval);
        fun(index_position);
        fun(chunk_number);
        fun(channel_number);
        fun(begin_time);
        fun(end_time);
        fun(message_number);
        fun(size);
        fun(is_complete);
        fun(chunk_raw_size);
        fun(segment_raw_size);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(major_version);
        fun(minor_version);
        fun(compress);
        fun(chunk_interval);
        fun(segment_interval);
        fun(index_position);
        fun(chunk_number);
        fun(channel_number);
        fun(begin_time);
        fun(end_time);
        fun(message_number);
        fun(size);
        fun(is_complete);
        fun(chunk_raw_size);
        fun(segment_raw_size);
    }

    bool operator == (const ::RecordHeader& t) const {
        return (major_version == t.major_version) && (minor_version == t.minor_version) && (compress == t.compress) && (chunk_interval == t.chunk_interval) && (segment_interval == t.segment_interval) && (index_position == t.index_position) && (chunk_number == t.chunk_number) && (channel_number == t.channel_number) && (begin_time == t.begin_time) && (end_time == t.end_time) && (message_number == t.message_number) && (size == t.size) && (is_complete == t.is_complete) && (chunk_raw_size == t.chunk_raw_size) && (segment_raw_size == t.segment_raw_size);
    }
};


#endif // impl_type_recordheader_h
