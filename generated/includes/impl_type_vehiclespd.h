/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_vehiclespd_h
#define impl_type_vehiclespd_h































#include "impl_type_double.h"
#include "impl_type_bool.h"
#include "impl_type_wheel_speed_rpt_7a.h"


struct VehicleSpd {
    ::Bool is_vehicle_standstill;
    
    ::Bool is_vehicle_spd_valid;
    
    ::Double vehicle_spd;
    
    ::Bool is_wheel_spd_rr_valid;
    
    ::Wheel_speed_rpt_7a wheel_direction_rr;
    
    ::Double wheel_spd_rr;
    
    ::Bool is_wheel_spd_rl_valid;
    
    ::Bool wheel_direction_rl;
    
    ::Double wheel_spd_rl;
    
    ::Bool is_wheel_spd_fr_valid;
    
    ::Bool wheel_direction_fr;
    
    ::Double wheel_spd_fr;
    
    ::Bool is_wheel_spd_fl_valid;
    
    ::Bool wheel_direction_fl;
    
    ::Double wheel_spd_fl;
    
    ::Bool is_yaw_rate_valid;
    
    ::Double yaw_rate;
    
    ::Double yaw_rate_offset;
    
    ::Bool is_ax_valid;
    
    ::Double ax;
    
    ::Double ax_offset;
    
    ::Bool lat_acc;
    
    ::Bool long_acc;
    
    ::Bool vert_acc;
    
    ::Bool roll_rate;
    
    ::Bool acc_est;
    
    ::Bool timestamp_sec;
    
    ::Bool is_ay_valid;
    
    ::Double ay;
    
    ::Double ay_offset;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(is_vehicle_standstill);
        fun(is_vehicle_spd_valid);
        fun(vehicle_spd);
        fun(is_wheel_spd_rr_valid);
        fun(wheel_direction_rr);
        fun(wheel_spd_rr);
        fun(is_wheel_spd_rl_valid);
        fun(wheel_direction_rl);
        fun(wheel_spd_rl);
        fun(is_wheel_spd_fr_valid);
        fun(wheel_direction_fr);
        fun(wheel_spd_fr);
        fun(is_wheel_spd_fl_valid);
        fun(wheel_direction_fl);
        fun(wheel_spd_fl);
        fun(is_yaw_rate_valid);
        fun(yaw_rate);
        fun(yaw_rate_offset);
        fun(is_ax_valid);
        fun(ax);
        fun(ax_offset);
        fun(lat_acc);
        fun(long_acc);
        fun(vert_acc);
        fun(roll_rate);
        fun(acc_est);
        fun(timestamp_sec);
        fun(is_ay_valid);
        fun(ay);
        fun(ay_offset);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(is_vehicle_standstill);
        fun(is_vehicle_spd_valid);
        fun(vehicle_spd);
        fun(is_wheel_spd_rr_valid);
        fun(wheel_direction_rr);
        fun(wheel_spd_rr);
        fun(is_wheel_spd_rl_valid);
        fun(wheel_direction_rl);
        fun(wheel_spd_rl);
        fun(is_wheel_spd_fr_valid);
        fun(wheel_direction_fr);
        fun(wheel_spd_fr);
        fun(is_wheel_spd_fl_valid);
        fun(wheel_direction_fl);
        fun(wheel_spd_fl);
        fun(is_yaw_rate_valid);
        fun(yaw_rate);
        fun(yaw_rate_offset);
        fun(is_ax_valid);
        fun(ax);
        fun(ax_offset);
        fun(lat_acc);
        fun(long_acc);
        fun(vert_acc);
        fun(roll_rate);
        fun(acc_est);
        fun(timestamp_sec);
        fun(is_ay_valid);
        fun(ay);
        fun(ay_offset);
    }

    bool operator == (const ::VehicleSpd& t) const {
        return (is_vehicle_standstill == t.is_vehicle_standstill) && (is_vehicle_spd_valid == t.is_vehicle_spd_valid) && (vehicle_spd == t.vehicle_spd) && (is_wheel_spd_rr_valid == t.is_wheel_spd_rr_valid) && (wheel_direction_rr == t.wheel_direction_rr) && (wheel_spd_rr == t.wheel_spd_rr) && (is_wheel_spd_rl_valid == t.is_wheel_spd_rl_valid) && (wheel_direction_rl == t.wheel_direction_rl) && (wheel_spd_rl == t.wheel_spd_rl) && (is_wheel_spd_fr_valid == t.is_wheel_spd_fr_valid) && (wheel_direction_fr == t.wheel_direction_fr) && (wheel_spd_fr == t.wheel_spd_fr) && (is_wheel_spd_fl_valid == t.is_wheel_spd_fl_valid) && (wheel_direction_fl == t.wheel_direction_fl) && (wheel_spd_fl == t.wheel_spd_fl) && (is_yaw_rate_valid == t.is_yaw_rate_valid) && (yaw_rate == t.yaw_rate) && (yaw_rate_offset == t.yaw_rate_offset) && (is_ax_valid == t.is_ax_valid) && (ax == t.ax) && (ax_offset == t.ax_offset) && (lat_acc == t.lat_acc) && (long_acc == t.long_acc) && (vert_acc == t.vert_acc) && (roll_rate == t.roll_rate) && (acc_est == t.acc_est) && (timestamp_sec == t.timestamp_sec) && (is_ay_valid == t.is_ay_valid) && (ay == t.ay) && (ay_offset == t.ay_offset);
    }
};


#endif // impl_type_vehiclespd_h
