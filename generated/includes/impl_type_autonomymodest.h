/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_autonomymodest_h
#define impl_type_autonomymodest_h




#include "impl_type_bool.h"


struct AutonomyModeSt {
    ::Bool gear_autonomous;
    
    ::Bool speed_autonomous;
    
    ::Bool steering_autonomous;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(gear_autonomous);
        fun(speed_autonomous);
        fun(steering_autonomous);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(gear_autonomous);
        fun(speed_autonomous);
        fun(steering_autonomous);
    }

    bool operator == (const ::AutonomyModeSt& t) const {
        return (gear_autonomous == t.gear_autonomous) && (speed_autonomous == t.speed_autonomous) && (steering_autonomous == t.steering_autonomous);
    }
};


#endif // impl_type_autonomymodest_h
