/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_pam_0x270_270_h
#define impl_type_pam_0x270_270_h














#include "impl_type_pam_brakefunctionmodetype.h"
#include "impl_type_pam_ststype.h"
#include "impl_type_double.h"
#include "impl_type_float.h"
#include "impl_type_pam_apaftype.h"
#include "impl_type_int32.h"
#include "impl_type_pam_cmdepsststype.h"
#include "impl_type_stopstartinhibit_apatype.h"
#include "impl_type_pam_failurebrakemodetype.h"
#include "impl_type_pam_esp_target_gear_requesttype.h"
#include "impl_type_pam_brakemodeststype.h"


struct Pam_0x270_270 {
    ::Pam_esp_target_gear_requestType pam_esp_target_gear_request;
    
    ::Pam_brakefunctionmodeType pam_brakefunctionmode;
    
    ::Stopstartinhibit_apaType stopstartinhibit_apa;
    
    ::Pam_apafType ems_pam_apaf;
    
    ::Pam_cmdepsstsType pam_cmdepssts;
    
    ::Pam_stsType pam_sts;
    
    ::Pam_brakemodestsType pam_brakemodests;
    
    ::Pam_failurebrakemodeType pam_failurebrakemode;
    
    ::Float pam_esp_speed_target;
    
    ::Int32 pam_esp_stop_distance;
    
    ::Int32 rolling_counter_0x270;
    
    ::Int32 checksum_0x270;
    
    ::Double pam_trgtepsstrgwhlang;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(pam_esp_target_gear_request);
        fun(pam_brakefunctionmode);
        fun(stopstartinhibit_apa);
        fun(ems_pam_apaf);
        fun(pam_cmdepssts);
        fun(pam_sts);
        fun(pam_brakemodests);
        fun(pam_failurebrakemode);
        fun(pam_esp_speed_target);
        fun(pam_esp_stop_distance);
        fun(rolling_counter_0x270);
        fun(checksum_0x270);
        fun(pam_trgtepsstrgwhlang);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(pam_esp_target_gear_request);
        fun(pam_brakefunctionmode);
        fun(stopstartinhibit_apa);
        fun(ems_pam_apaf);
        fun(pam_cmdepssts);
        fun(pam_sts);
        fun(pam_brakemodests);
        fun(pam_failurebrakemode);
        fun(pam_esp_speed_target);
        fun(pam_esp_stop_distance);
        fun(rolling_counter_0x270);
        fun(checksum_0x270);
        fun(pam_trgtepsstrgwhlang);
    }

    bool operator == (const ::Pam_0x270_270& t) const {
        return (pam_esp_target_gear_request == t.pam_esp_target_gear_request) && (pam_brakefunctionmode == t.pam_brakefunctionmode) && (stopstartinhibit_apa == t.stopstartinhibit_apa) && (ems_pam_apaf == t.ems_pam_apaf) && (pam_cmdepssts == t.pam_cmdepssts) && (pam_sts == t.pam_sts) && (pam_brakemodests == t.pam_brakemodests) && (pam_failurebrakemode == t.pam_failurebrakemode) && (pam_esp_speed_target == t.pam_esp_speed_target) && (pam_esp_stop_distance == t.pam_esp_stop_distance) && (rolling_counter_0x270 == t.rolling_counter_0x270) && (checksum_0x270 == t.checksum_0x270) && (pam_trgtepsstrgwhlang == t.pam_trgtepsstrgwhlang);
    }
};


#endif // impl_type_pam_0x270_270_h
