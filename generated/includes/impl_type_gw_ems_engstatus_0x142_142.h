/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_gw_ems_engstatus_0x142_142_h
#define impl_type_gw_ems_engstatus_0x142_142_h











#include "impl_type_double.h"
#include "impl_type_ems_engoperationstatustype.h"
#include "impl_type_ems_ignswtststype.h"
#include "impl_type_int32.h"
#include "impl_type_ems_startstopmessagetype.h"
#include "impl_type_ems_throttleplatepositionerrortype.h"
#include "impl_type_ems_aircompressorstatustype.h"


struct Gw_ems_engstatus_0x142_142 {
    ::Int32 ems_ignitiontiming;
    
    ::Double ems_setlengidlespeed;
    
    ::Ems_engoperationstatusType ems_engoperationstatus;
    
    ::Ems_aircompressorstatusType ems_aircompressorstatus;
    
    ::Ems_throttleplatepositionerrorType ems_throttleplatepositionerror;
    
    ::Ems_startstopmessageType ems_startstopmessage;
    
    ::Int32 dcm_ems_rollingcounter_0x142;
    
    ::Ems_ignswtstsType ems_ignswtsts;
    
    ::Int32 dcm_ems_checksum_0x142;
    
    ::Double ems_engthrottleposition;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(ems_ignitiontiming);
        fun(ems_setlengidlespeed);
        fun(ems_engoperationstatus);
        fun(ems_aircompressorstatus);
        fun(ems_throttleplatepositionerror);
        fun(ems_startstopmessage);
        fun(dcm_ems_rollingcounter_0x142);
        fun(ems_ignswtsts);
        fun(dcm_ems_checksum_0x142);
        fun(ems_engthrottleposition);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(ems_ignitiontiming);
        fun(ems_setlengidlespeed);
        fun(ems_engoperationstatus);
        fun(ems_aircompressorstatus);
        fun(ems_throttleplatepositionerror);
        fun(ems_startstopmessage);
        fun(dcm_ems_rollingcounter_0x142);
        fun(ems_ignswtsts);
        fun(dcm_ems_checksum_0x142);
        fun(ems_engthrottleposition);
    }

    bool operator == (const ::Gw_ems_engstatus_0x142_142& t) const {
        return (ems_ignitiontiming == t.ems_ignitiontiming) && (ems_setlengidlespeed == t.ems_setlengidlespeed) && (ems_engoperationstatus == t.ems_engoperationstatus) && (ems_aircompressorstatus == t.ems_aircompressorstatus) && (ems_throttleplatepositionerror == t.ems_throttleplatepositionerror) && (ems_startstopmessage == t.ems_startstopmessage) && (dcm_ems_rollingcounter_0x142 == t.dcm_ems_rollingcounter_0x142) && (ems_ignswtsts == t.ems_ignswtsts) && (dcm_ems_checksum_0x142 == t.dcm_ems_checksum_0x142) && (ems_engthrottleposition == t.ems_engthrottleposition);
    }
};


#endif // impl_type_gw_ems_engstatus_0x142_142_h
