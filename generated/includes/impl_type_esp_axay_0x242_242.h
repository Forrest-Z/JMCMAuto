/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_esp_axay_0x242_242_h
#define impl_type_esp_axay_0x242_242_h









#include "impl_type_esp_yawratestatustype.h"
#include "impl_type_double.h"
#include "impl_type_esp_alatstatustype.h"
#include "impl_type_int32.h"
#include "impl_type_esp_algtstatustype.h"


struct Esp_axay_0x242_242 {
    ::Double esp_alat;
    
    ::Double esp_yawrate;
    
    ::Int32 rolling_counter_0x242;
    
    ::Esp_yawratestatusType esp_yawratestatus;
    
    ::Esp_alatstatusType esp_alatstatus;
    
    ::Esp_algtstatusType esp_algtstatus;
    
    ::Int32 checksum_0x242;
    
    ::Double esp_algt;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(esp_alat);
        fun(esp_yawrate);
        fun(rolling_counter_0x242);
        fun(esp_yawratestatus);
        fun(esp_alatstatus);
        fun(esp_algtstatus);
        fun(checksum_0x242);
        fun(esp_algt);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(esp_alat);
        fun(esp_yawrate);
        fun(rolling_counter_0x242);
        fun(esp_yawratestatus);
        fun(esp_alatstatus);
        fun(esp_algtstatus);
        fun(checksum_0x242);
        fun(esp_algt);
    }

    bool operator == (const ::Esp_axay_0x242_242& t) const {
        return (esp_alat == t.esp_alat) && (esp_yawrate == t.esp_yawrate) && (rolling_counter_0x242 == t.rolling_counter_0x242) && (esp_yawratestatus == t.esp_yawratestatus) && (esp_alatstatus == t.esp_alatstatus) && (esp_algtstatus == t.esp_algtstatus) && (checksum_0x242 == t.checksum_0x242) && (esp_algt == t.esp_algt);
    }
};


#endif // impl_type_esp_axay_0x242_242_h
