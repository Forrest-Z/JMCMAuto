/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_safety_h
#define impl_type_safety_h
























#include "impl_type_bool.h"
#include "impl_type_int32.h"
#include "impl_type_drivingmode.h"


struct Safety {
    ::Bool is_driver_car_door_close;
    
    ::Bool is_driver_buckled;
    
    ::Int32 emergency_button;
    
    ::Bool has_error;
    
    ::Bool is_motor_invertor_fault;
    
    ::Bool is_system_fault;
    
    ::Bool is_power_battery_fault;
    
    ::Bool is_motor_invertor_over_temperature;
    
    ::Bool is_small_battery_charge_discharge_fault;
    
    ::Int32 driving_mode;
    
    ::Bool is_passenger_door_open;
    
    ::Bool is_rearleft_door_open;
    
    ::Bool is_rearright_door_open;
    
    ::Bool is_hood_open;
    
    ::Bool is_trunk_open;
    
    ::Bool is_passenger_detected;
    
    ::Bool is_passenger_airbag_enabled;
    
    ::Bool is_passenger_buckled;
    
    ::Int32 front_left_tire_press;
    
    ::Int32 front_right_tire_press;
    
    ::Int32 rear_left_tire_press;
    
    ::Int32 rear_right_tire_press;
    
    ::DrivingMode car_driving_mode;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(is_driver_car_door_close);
        fun(is_driver_buckled);
        fun(emergency_button);
        fun(has_error);
        fun(is_motor_invertor_fault);
        fun(is_system_fault);
        fun(is_power_battery_fault);
        fun(is_motor_invertor_over_temperature);
        fun(is_small_battery_charge_discharge_fault);
        fun(driving_mode);
        fun(is_passenger_door_open);
        fun(is_rearleft_door_open);
        fun(is_rearright_door_open);
        fun(is_hood_open);
        fun(is_trunk_open);
        fun(is_passenger_detected);
        fun(is_passenger_airbag_enabled);
        fun(is_passenger_buckled);
        fun(front_left_tire_press);
        fun(front_right_tire_press);
        fun(rear_left_tire_press);
        fun(rear_right_tire_press);
        fun(car_driving_mode);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(is_driver_car_door_close);
        fun(is_driver_buckled);
        fun(emergency_button);
        fun(has_error);
        fun(is_motor_invertor_fault);
        fun(is_system_fault);
        fun(is_power_battery_fault);
        fun(is_motor_invertor_over_temperature);
        fun(is_small_battery_charge_discharge_fault);
        fun(driving_mode);
        fun(is_passenger_door_open);
        fun(is_rearleft_door_open);
        fun(is_rearright_door_open);
        fun(is_hood_open);
        fun(is_trunk_open);
        fun(is_passenger_detected);
        fun(is_passenger_airbag_enabled);
        fun(is_passenger_buckled);
        fun(front_left_tire_press);
        fun(front_right_tire_press);
        fun(rear_left_tire_press);
        fun(rear_right_tire_press);
        fun(car_driving_mode);
    }

    bool operator == (const ::Safety& t) const {
        return (is_driver_car_door_close == t.is_driver_car_door_close) && (is_driver_buckled == t.is_driver_buckled) && (emergency_button == t.emergency_button) && (has_error == t.has_error) && (is_motor_invertor_fault == t.is_motor_invertor_fault) && (is_system_fault == t.is_system_fault) && (is_power_battery_fault == t.is_power_battery_fault) && (is_motor_invertor_over_temperature == t.is_motor_invertor_over_temperature) && (is_small_battery_charge_discharge_fault == t.is_small_battery_charge_discharge_fault) && (driving_mode == t.driving_mode) && (is_passenger_door_open == t.is_passenger_door_open) && (is_rearleft_door_open == t.is_rearleft_door_open) && (is_rearright_door_open == t.is_rearright_door_open) && (is_hood_open == t.is_hood_open) && (is_trunk_open == t.is_trunk_open) && (is_passenger_detected == t.is_passenger_detected) && (is_passenger_airbag_enabled == t.is_passenger_airbag_enabled) && (is_passenger_buckled == t.is_passenger_buckled) && (front_left_tire_press == t.front_left_tire_press) && (front_right_tire_press == t.front_right_tire_press) && (rear_left_tire_press == t.rear_left_tire_press) && (rear_right_tire_press == t.rear_right_tire_press) && (car_driving_mode == t.car_driving_mode);
    }
};


#endif // impl_type_safety_h
