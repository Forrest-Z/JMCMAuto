/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_epb_h
#define impl_type_epb_h





#include "impl_type_pbraketype.h"
#include "impl_type_bool.h"
#include "impl_type_int32.h"


struct Epb {
    ::Bool is_epb_error;
    
    ::Bool is_epb_released;
    
    ::Int32 epb_status;
    
    ::PBrakeType parking_brake_status;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(is_epb_error);
        fun(is_epb_released);
        fun(epb_status);
        fun(parking_brake_status);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(is_epb_error);
        fun(is_epb_released);
        fun(epb_status);
        fun(parking_brake_status);
    }

    bool operator == (const ::Epb& t) const {
        return (is_epb_error == t.is_epb_error) && (is_epb_released == t.is_epb_released) && (epb_status == t.epb_status) && (parking_brake_status == t.parking_brake_status);
    }
};


#endif // impl_type_epb_h
