/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_esp_direction_0x235_235_h
#define impl_type_esp_direction_0x235_235_h
















#include "impl_type_esp_rlwheeldrivedirstatustype.h"
#include "impl_type_esp_rlwheeldrivedirectiontype.h"
#include "impl_type_esp_whlmilgrearristatustype.h"
#include "impl_type_esp_frwheeldrivedirstatustype.h"
#include "impl_type_esp_flwheeldrivedirstatustype.h"
#include "impl_type_esp_flwheeldrivedirectiontype.h"
#include "impl_type_esp_frwheeldrivedirectiontype.h"
#include "impl_type_esp_vehiclestandstilltype.h"
#include "impl_type_esp_whlmilgrearlestatustype.h"
#include "impl_type_esp_rrwheeldrivedirstatustype.h"
#include "impl_type_esp_rrwheeldrivedirectiontype.h"
#include "impl_type_int32.h"


struct Esp_direction_0x235_235 {
    ::Int32 esp_whlmilgrearre;
    
    ::Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus;
    
    ::Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus;
    
    ::Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus;
    
    ::Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus;
    
    ::Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection;
    
    ::Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection;
    
    ::Esp_frwheeldrivedirectionType esp_frwheeldrivedirection;
    
    ::Esp_flwheeldrivedirectionType esp_flwheeldrivedirection;
    
    ::Int32 rolling_counter_0x235;
    
    ::Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus;
    
    ::Esp_whlmilgrearristatusType esp_whlmilgrearristatus;
    
    ::Esp_vehiclestandstillType esp_vehiclestandstill;
    
    ::Int32 checksum_0x235;
    
    ::Int32 esp_whlmilgrearle;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(esp_whlmilgrearre);
        fun(esp_frwheeldrivedirstatus);
        fun(esp_flwheeldrivedirstatus);
        fun(esp_rrwheeldrivedirstatus);
        fun(esp_rlwheeldrivedirstatus);
        fun(esp_rrwheeldrivedirection);
        fun(esp_rlwheeldrivedirection);
        fun(esp_frwheeldrivedirection);
        fun(esp_flwheeldrivedirection);
        fun(rolling_counter_0x235);
        fun(esp_whlmilgrearlestatus);
        fun(esp_whlmilgrearristatus);
        fun(esp_vehiclestandstill);
        fun(checksum_0x235);
        fun(esp_whlmilgrearle);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(esp_whlmilgrearre);
        fun(esp_frwheeldrivedirstatus);
        fun(esp_flwheeldrivedirstatus);
        fun(esp_rrwheeldrivedirstatus);
        fun(esp_rlwheeldrivedirstatus);
        fun(esp_rrwheeldrivedirection);
        fun(esp_rlwheeldrivedirection);
        fun(esp_frwheeldrivedirection);
        fun(esp_flwheeldrivedirection);
        fun(rolling_counter_0x235);
        fun(esp_whlmilgrearlestatus);
        fun(esp_whlmilgrearristatus);
        fun(esp_vehiclestandstill);
        fun(checksum_0x235);
        fun(esp_whlmilgrearle);
    }

    bool operator == (const ::Esp_direction_0x235_235& t) const {
        return (esp_whlmilgrearre == t.esp_whlmilgrearre) && (esp_frwheeldrivedirstatus == t.esp_frwheeldrivedirstatus) && (esp_flwheeldrivedirstatus == t.esp_flwheeldrivedirstatus) && (esp_rrwheeldrivedirstatus == t.esp_rrwheeldrivedirstatus) && (esp_rlwheeldrivedirstatus == t.esp_rlwheeldrivedirstatus) && (esp_rrwheeldrivedirection == t.esp_rrwheeldrivedirection) && (esp_rlwheeldrivedirection == t.esp_rlwheeldrivedirection) && (esp_frwheeldrivedirection == t.esp_frwheeldrivedirection) && (esp_flwheeldrivedirection == t.esp_flwheeldrivedirection) && (rolling_counter_0x235 == t.rolling_counter_0x235) && (esp_whlmilgrearlestatus == t.esp_whlmilgrearlestatus) && (esp_whlmilgrearristatus == t.esp_whlmilgrearristatus) && (esp_vehiclestandstill == t.esp_vehiclestandstill) && (checksum_0x235 == t.checksum_0x235) && (esp_whlmilgrearle == t.esp_whlmilgrearle);
    }
};


#endif // impl_type_esp_direction_0x235_235_h
