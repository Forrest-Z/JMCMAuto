/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_esp_whlpulse_0x236_236_h
#define impl_type_esp_whlpulse_0x236_236_h











#include "impl_type_int32.h"
#include "impl_type_esp_wheelpulse_fl_validtype.h"
#include "impl_type_esp_wheelpulse_rr_validtype.h"
#include "impl_type_esp_wheelpulse_fr_validtype.h"
#include "impl_type_esp_wheelpulse_rl_validtype.h"


struct Esp_whlpulse_0x236_236 {
    ::Int32 esp_wheelpulse_fr;
    
    ::Int32 esp_wheelpulse_rl;
    
    ::Int32 esp_wheelpulse_rr;
    
    ::Int32 rollingcounter_esp_0x236;
    
    ::Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid;
    
    ::Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid;
    
    ::Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid;
    
    ::Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid;
    
    ::Int32 checksum_esp_0x236;
    
    ::Int32 esp_wheelpulse_fl;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(esp_wheelpulse_fr);
        fun(esp_wheelpulse_rl);
        fun(esp_wheelpulse_rr);
        fun(rollingcounter_esp_0x236);
        fun(esp_wheelpulse_rr_valid);
        fun(esp_wheelpulse_rl_valid);
        fun(esp_wheelpulse_fr_valid);
        fun(esp_wheelpulse_fl_valid);
        fun(checksum_esp_0x236);
        fun(esp_wheelpulse_fl);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(esp_wheelpulse_fr);
        fun(esp_wheelpulse_rl);
        fun(esp_wheelpulse_rr);
        fun(rollingcounter_esp_0x236);
        fun(esp_wheelpulse_rr_valid);
        fun(esp_wheelpulse_rl_valid);
        fun(esp_wheelpulse_fr_valid);
        fun(esp_wheelpulse_fl_valid);
        fun(checksum_esp_0x236);
        fun(esp_wheelpulse_fl);
    }

    bool operator == (const ::Esp_whlpulse_0x236_236& t) const {
        return (esp_wheelpulse_fr == t.esp_wheelpulse_fr) && (esp_wheelpulse_rl == t.esp_wheelpulse_rl) && (esp_wheelpulse_rr == t.esp_wheelpulse_rr) && (rollingcounter_esp_0x236 == t.rollingcounter_esp_0x236) && (esp_wheelpulse_rr_valid == t.esp_wheelpulse_rr_valid) && (esp_wheelpulse_rl_valid == t.esp_wheelpulse_rl_valid) && (esp_wheelpulse_fr_valid == t.esp_wheelpulse_fr_valid) && (esp_wheelpulse_fl_valid == t.esp_wheelpulse_fl_valid) && (checksum_esp_0x236 == t.checksum_esp_0x236) && (esp_wheelpulse_fl == t.esp_wheelpulse_fl);
    }
};


#endif // impl_type_esp_whlpulse_0x236_236_h
