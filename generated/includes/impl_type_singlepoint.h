/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_singlepoint_h
#define impl_type_singlepoint_h






#include "impl_type_uint32.h"
#include "impl_type_float.h"


struct SinglePoint {
    ::Float x;
    
    ::Float y;
    
    ::Float z;
    
    ::Float intensity;
    
    ::UInt32 ring;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(x);
        fun(y);
        fun(z);
        fun(intensity);
        fun(ring);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(x);
        fun(y);
        fun(z);
        fun(intensity);
        fun(ring);
    }

    bool operator == (const ::SinglePoint& t) const {
        return (x == t.x) && (y == t.y) && (z == t.z) && (intensity == t.intensity) && (ring == t.ring);
    }
};


#endif // impl_type_singlepoint_h
