/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_pam_0x272_272_h
#define impl_type_pam_0x272_272_h












#include "impl_type_apa_parkslot_statetype.h"
#include "impl_type_sdg_objectstsflstype.h"
#include "impl_type_sdg_objectstsrlstype.h"
#include "impl_type_sdg_objectstsfls_rlstype.h"
#include "impl_type_sdg_objectstsfrs_rrstype.h"
#include "impl_type_apa_indicationtype.h"
#include "impl_type_sdg_objectsts_frstype.h"
#include "impl_type_apa_recover_int_indicationtype.h"
#include "impl_type_apa_selectedsidetype.h"
#include "impl_type_apa_quit_indicationtype.h"
#include "impl_type_sod_blis_displaytype.h"


struct Pam_0x272_272 {
    ::Apa_parkslot_stateType apa_parkslot_state;
    
    ::Sdg_objectsts_frsType sdg_objectsts_frs;
    
    ::Sdg_objectstsrlsType sdg_objectstsrls;
    
    ::Apa_selectedsideType apa_selectedside;
    
    ::Sod_blis_displayType sdg_objectstsrrs;
    
    ::Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs;
    
    ::Apa_quit_indicationType apa_quit_indication;
    
    ::Apa_recover_int_indicationType apa_recover_int_indication;
    
    ::Sdg_objectstsfls_rlsType sdg_objectstsfls_rls;
    
    ::Apa_indicationType apa_indication;
    
    ::Sdg_objectstsflsType sdg_objectstsfls;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(apa_parkslot_state);
        fun(sdg_objectsts_frs);
        fun(sdg_objectstsrls);
        fun(apa_selectedside);
        fun(sdg_objectstsrrs);
        fun(sdg_objectstsfrs_rrs);
        fun(apa_quit_indication);
        fun(apa_recover_int_indication);
        fun(sdg_objectstsfls_rls);
        fun(apa_indication);
        fun(sdg_objectstsfls);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(apa_parkslot_state);
        fun(sdg_objectsts_frs);
        fun(sdg_objectstsrls);
        fun(apa_selectedside);
        fun(sdg_objectstsrrs);
        fun(sdg_objectstsfrs_rrs);
        fun(apa_quit_indication);
        fun(apa_recover_int_indication);
        fun(sdg_objectstsfls_rls);
        fun(apa_indication);
        fun(sdg_objectstsfls);
    }

    bool operator == (const ::Pam_0x272_272& t) const {
        return (apa_parkslot_state == t.apa_parkslot_state) && (sdg_objectsts_frs == t.sdg_objectsts_frs) && (sdg_objectstsrls == t.sdg_objectstsrls) && (apa_selectedside == t.apa_selectedside) && (sdg_objectstsrrs == t.sdg_objectstsrrs) && (sdg_objectstsfrs_rrs == t.sdg_objectstsfrs_rrs) && (apa_quit_indication == t.apa_quit_indication) && (apa_recover_int_indication == t.apa_recover_int_indication) && (sdg_objectstsfls_rls == t.sdg_objectstsfls_rls) && (apa_indication == t.apa_indication) && (sdg_objectstsfls == t.sdg_objectstsfls);
    }
};


#endif // impl_type_pam_0x272_272_h
